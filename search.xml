<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>JavaScript</title>
      <link href="2020/12/06/javascript/"/>
      <url>2020/12/06/javascript/</url>
      
        <content type="html"><![CDATA[<h1 id="一、基础"><a href="#一、基础" class="headerlink" title="一、基础"></a>一、基础</h1><h2 id="1-alter"><a href="#1-alter" class="headerlink" title="1.alter()"></a>1.alter()</h2><p>自带的弹出消息框的方法，可以在 onclick 中直接调用，如：onclick=”alert(‘欢迎!’)”；点击后就会弹出消息框；</p><h2 id="2-匹配属性"><a href="#2-匹配属性" class="headerlink" title="2.匹配属性"></a>2.匹配属性</h2><p>​ 如下，先获取 myimage 这个 id，赋值给 element，然后判断 element 的 src 属性中是否有 bulboff 这个字段，然后修改其 src 属性。</p><pre><code>&lt;script&gt;function changeImage()&#123; element=document.getElementById(&#39;myimage&#39;) if (element.src.match(&quot;bulboff&quot;)) &#123;  element.src=&quot;/images/pic_bulbon.gif&quot;; &#125; else &#123;  element.src=&quot;/images/pic_bulboff.gif&quot;; &#125;&#125;&lt;/script&gt;</code></pre><h2 id="3-用法"><a href="#3-用法" class="headerlink" title="3.用法"></a>3.用法</h2><p>​ 通常的做法是把函数放入&lt;head&gt; 部分中，或者放在页面底部。这样就可以把它们安置到同一处位置，不会干扰页面的内容。外部脚本不能包含 &lt;script&gt; 标签。</p><h2 id="4-输出"><a href="#4-输出" class="headerlink" title="4.输出"></a>4.输出</h2><p>JavaScript 可以通过不同的方式来输出数据：</p><ul><li><p>使用 <strong>window.alert()</strong> 弹出警告框。</p></li><li><p>使用 <strong>document.write()</strong> 方法将内容写到 HTML 文档中。</p><blockquote><pre><code>&lt;p&gt;我的第一个段落。&lt;/p&gt;&lt;script&gt;document.write(Date());&lt;/script&gt;</code></pre></blockquote><p>使用 document.write() 仅仅向文档输出写内容。如果在文档已完成加载后执行 document.write，整个 HTML 页面将被覆盖。</p><p>如下，日期会覆盖之前的内容，因为点击事件是后面在页面加载完再去点击触发的：</p><pre><code>&lt;body&gt;  &lt;h1&gt;我的第一个 Web 页面&lt;/h1&gt;  &lt;p&gt;我的第一个段落。&lt;/p&gt;  &lt;button onclick=&quot;myFunction()&quot;&gt;点我&lt;/button&gt;  &lt;script&gt;    function myFunction() &#123;      document.write(Date());    &#125;  &lt;/script&gt;&lt;/body&gt;</code></pre></li><li><p>使用 <strong>innerHTML</strong> 写入到 HTML 元素。</p><blockquote><pre><code>&lt;p id=&quot;demo&quot;&gt;我的第一个段落&lt;/p&gt;&lt;script&gt;document.getElementById(&quot;demo&quot;).innerHTML = &quot;段落已修改。&quot;;&lt;/script&gt;</code></pre></blockquote><p><strong>document.getElementById(“demo”)</strong> 是使用 id 属性来查找 HTML 元素的 JavaScript 代码 。</p><p><strong>innerHTML = “段落已修改。”</strong> 是用于修改元素的 HTML 内容(innerHTML)的 JavaScript 代码。</p></li><li><p>使用 <strong>console.log()</strong> 写入到浏览器的控制台。</p></li></ul><h2 id="5-语法"><a href="#5-语法" class="headerlink" title="5.语法"></a>5.语法</h2><p>JavaScript 使用 Unicode 字符集。Unicode 覆盖了所有的字符，包含标点等字符。</p><h2 id="6-数据类型"><a href="#6-数据类型" class="headerlink" title="6.数据类型"></a>6.数据类型</h2><ul><li><p>JavaScript 拥有动态类型</p><p>JavaScript 拥有动态类型。这意味着相同的变量可用作不同的类型：</p><blockquote><p>实例</p><p>var x; // x 为 undefined<br>var x = 5; // 现在 x 为数字<br>var x = “John”; // 现在 x 为字符串</p></blockquote></li><li><p>字符串</p><p>字符串是存储字符（比如 “Bill Gates”）的变量。字符串可以是引号中的任意文本。您可以使用单引号或双引号。</p></li><li><p>JavaScript 只有一种数字类型。数字可以带小数点，也可以不带；极大或极小的数字可以通过科学（指数）计数法来书写。</p></li><li><p>数组</p><blockquote><p>var cars=new Array();<br>cars[0]=”Saab”;<br>cars[1]=”Volvo”;<br>cars[2]=”BMW”;</p><p>或：var cars=new Array(“Saab”,”Volvo”,”BMW”);</p><p>或：var cars=[“Saab”,”Volvo”,”BMW”];</p></blockquote></li><li><p>对象</p><p>对象由花括号分隔。在括号内部，对象的属性以名称和值对的形式 (name : value) 来定义。属性由逗号分隔：</p><p>var person={firstname:”John”, lastname:”Doe”, id:5566};</p><ul><li><p>对象属性有两种寻址方式：</p><blockquote><p>name=person.lastname;<br>name=person[“lastname”];</p></blockquote></li></ul></li><li><p>声明变量类型</p><p>当您声明新变量时，可以使用关键词 “new” 来声明其类型：</p><blockquote><p>var carname=new String;<br>var x= new Number;<br>var y= new Boolean;<br>var cars= new Array;<br>var person= new Object;</p></blockquote></li><li><p>数据类型</p></li></ul><blockquote><p>在 JavaScript 中有 5 种不同的数据类型：</p><ul><li>string</li><li>number</li><li>boolean</li><li>object</li><li>function</li></ul><p>3 种对象类型：</p><ul><li>Object</li><li>Date</li><li>Array</li></ul><p>2 个不包含任何值的数据类型：</p><ul><li>null</li><li>undefined</li></ul></blockquote><ul><li><strong>constructor</strong> 属性返回所有 JavaScript 变量的构造函数。返回 String()等类型的构造函数</li><li>类型转换<ul><li>全局方法 <strong>String()</strong> 可以将数字转换为字符串；该方法可用于任何类型的数字，字母，变量，表达式；Number 方法 <strong>toString()</strong> 也是有同样的效果。String()还可以将布尔类型的转换为字符串</li></ul></li></ul><h2 id="7-函数"><a href="#7-函数" class="headerlink" title="7.函数"></a>7.函数</h2><p>​ 可以用 return 返回值，当执行完 return 时，函数会停止执行，也可以当初使用 return 去结束函数；可以用变量去接收返回的值。</p><ul><li><p>局部变量</p><blockquote><p>在 JavaScript 函数内部声明的变量（使用 var）是<em>局部</em>变量，所以只能在函数内部访问它。（该变量的作用域是局部的），可以在不同的函数中使用名称相同的局部变量，因为只有声明过该变量的函数才能识别出该变量。只要函数运行完毕，本地变量就会被删除。</p></blockquote><p>在函数外声明的变量是<em>全局</em>变量，网页上的所有脚本和函数都能访问它。</p></li><li><p>变量生存期</p><blockquote><p>JavaScript 变量的生命期从它们被声明的时间开始；局部变量会在函数运行以后被删除；全局变量会在页面关闭后被删除。</p></blockquote></li><li><p>未声明的变量</p><p>如果把值赋给尚未声明的变量，该变量将被自动作为 window 的一个属性。</p><p>如：var1=”Volvo”; 可以用 console.log(window.var1); 打印，可以用 delete var1 删除。</p></li></ul><h2 id="8-常见的-HTML-事件"><a href="#8-常见的-HTML-事件" class="headerlink" title="8.常见的 HTML 事件"></a>8.常见的 HTML 事件</h2><table><thead><tr><th>事件</th><th>描述</th></tr></thead><tbody><tr><td>onchange</td><td>HTML 元素改变</td></tr><tr><td>onclick</td><td>用户点击 HTML 元素</td></tr><tr><td>onmouseover</td><td>用户在一个 HTML 元素上移动鼠标</td></tr><tr><td>onmouseout</td><td>用户从一个 HTML 元素上移开鼠标</td></tr><tr><td>onkeydown</td><td>用户按下键盘按键</td></tr><tr><td>onload</td><td>浏览器已完成页面的加载</td></tr></tbody></table><h2 id="9-字符串"><a href="#9-字符串" class="headerlink" title="9.字符串"></a>9.字符串</h2><p>​ 可以用单引号或者双引号表示字符串，可以使用索引位置来访问字符串中的每个字符。</p><p>常见的转义字符：</p><table><thead><tr><th>代码</th><th>输出</th></tr></thead><tbody><tr><td>&#39;</td><td>单引号</td></tr><tr><td>&quot;</td><td>双引号</td></tr><tr><td>\</td><td>反斜杠</td></tr><tr><td>\n</td><td>换行</td></tr><tr><td>\r</td><td>回车</td></tr><tr><td>\t</td><td>tab(制表符)</td></tr><tr><td>\b</td><td>退格符</td></tr><tr><td>\f</td><td>换页符</td></tr></tbody></table><p>通常， JavaScript 字符串是原始值，可以使用字符创建： <strong>var firstName = “John”</strong></p><p>但我们也可以使用 new 关键字将字符串定义为一个对象： <strong>var firstName = new String(“John”)</strong></p><pre><code>var x = &quot;John&quot;;var y = new String(&quot;John&quot;);typeof x; // 返回 Stringtypeof y; // 返回 Object</code></pre><blockquote><p>var x = “John”;<br>var y = new String(“John”);<br>(x === y) // 结果为 false，因为 x 是字符串，y 是对象</p><p>=== 为绝对相等，即数据类型与值都必须相等。</p></blockquote><p>原始值字符串，如 “John”, 没有属性和方法(因为他们不是对象)。</p><p>原始值可以使用 JavaScript 的属性和方法，因为 JavaScript 在执行方法和属性时可以把原始值当作对象。</p><h2 id="10-break-和-continue-标签"><a href="#10-break-和-continue-标签" class="headerlink" title="10.break 和 continue 标签"></a>10.break 和 continue 标签</h2><p>break 和 continue 这两个关键字带或不带标签都可以跳出代码块。</p><p>所谓标签引用，即如下，labelname: break labelname</p><pre><code>&lt;script&gt;cars=[&quot;BMW&quot;,&quot;Volvo&quot;,&quot;Saab&quot;,&quot;Ford&quot;,&quot;asfa&quot;];list:&#123; document.write(cars[0] + &quot;&lt;br&gt;&quot;); document.write(cars[1] + &quot;&lt;br&gt;&quot;); document.write(cars[2] + &quot;&lt;br&gt;&quot;); continue list; document.write(cars[3] + &quot;&lt;br&gt;&quot;); document.write(cars[4] + &quot;&lt;br&gt;&quot;); document.write(cars[5] + &quot;&lt;br&gt;&quot;);&#125;&lt;/script&gt;</code></pre><h2 id="11-正则表达式"><a href="#11-正则表达式" class="headerlink" title="11.正则表达式"></a>11.正则表达式</h2><p>语法：/正则表达式主体/修饰符(可选)</p><table><thead><tr><th>修饰符</th><th>描述</th></tr></thead><tbody><tr><td>i</td><td>执行对大小写不敏感的匹配。</td></tr><tr><td>g</td><td>执行全局匹配（查找所有匹配而非在找到第一个匹配后停止）。</td></tr><tr><td>m</td><td>执行多行匹配。</td></tr></tbody></table><p>在 JavaScript 中，正则表达式通常用于两个字符串方法 : search() 和 replace()。</p><p><strong>search() 方法</strong> 用于检索字符串中指定的子字符串，或检索与正则表达式相匹配的子字符串，并返回子串的起始位置。</p><p><strong>replace() 方法</strong> 用于在字符串中用一些字符替换另一些字符，或替换一个与正则表达式匹配的子串。</p><pre><code>var str = &quot;Visit Runoob!&quot;;var n = str.search(/Runoob/i);//返回：6var str = document.getElementById(&quot;demo&quot;).innerHTML;var txt = str.replace(/microsoft/i, &quot;Runoob&quot;);// 等同于var txt = str.replace(&quot;Microsoft&quot;,&quot;Runoob&quot;);// 返回：Visit Runoob!</code></pre><h3 id="正则表达式模式"><a href="#正则表达式模式" class="headerlink" title="正则表达式模式"></a>正则表达式模式</h3><p>方括号用于查找某个范围内的字符：</p><table><thead><tr><th>表达式</th><th>描述</th></tr></thead><tbody><tr><td>[abc]</td><td>查找方括号之间的任何字符。</td></tr><tr><td>[0-9]</td><td>查找任何从 0 至 9 的数字。</td></tr><tr><td>(x|y)</td><td>查找任何以 | 分隔的选项。</td></tr></tbody></table><p>元字符是拥有特殊含义的字符：</p><table><thead><tr><th>元字符</th><th>描述</th></tr></thead><tbody><tr><td>\d</td><td>查找数字。</td></tr><tr><td>\s</td><td>查找空白字符。</td></tr><tr><td>\b</td><td>匹配单词边界。</td></tr><tr><td>\uxxxx</td><td>查找以十六进制数 xxxx 规定的 Unicode 字符。</td></tr></tbody></table><p>量词:</p><table><thead><tr><th>量词</th><th>描述</th></tr></thead><tbody><tr><td>n+</td><td>匹配任何包含至少一个 <em>n</em> 的字符串。</td></tr><tr><td>n*</td><td>匹配任何包含零个或多个<em>n</em> 的字符串。</td></tr><tr><td>n?</td><td>匹配任何包含零个或一个 <em>n</em> 的字符串。</td></tr></tbody></table><p><strong>在 JavaScript 中，RegExp 对象是一个预定义了属性和方法的正则表达式对象。</strong></p><h2 id="12-表单"><a href="#12-表单" class="headerlink" title="12.表单"></a>12.表单</h2><h3 id="HTML-约束验证"><a href="#HTML-约束验证" class="headerlink" title="HTML 约束验证"></a>HTML 约束验证</h3><p>HTML5 新增了 HTML 表单的验证方式：约束验证（constraint validation）。</p><p>约束验证是表单被提交时浏览器用来实现验证的一种算法。</p><p>HTML 约束验证基于：</p><ul><li><strong>HTML 输入属性</strong></li><li><strong>CSS 伪类选择器</strong></li><li><strong>DOM 属性和方法</strong></li></ul><h4 id="约束验证-HTML-输入属性"><a href="#约束验证-HTML-输入属性" class="headerlink" title="约束验证 HTML 输入属性"></a>约束验证 HTML 输入属性</h4><table><thead><tr><th>属性</th><th>描述</th></tr></thead><tbody><tr><td>disabled</td><td>规定输入的元素不可用</td></tr><tr><td>max</td><td>规定输入元素的最大值</td></tr><tr><td>min</td><td>规定输入元素的最小值</td></tr><tr><td>pattern</td><td>规定输入元素值的模式</td></tr><tr><td>required</td><td>规定输入元素字段是必需的</td></tr><tr><td>type</td><td>规定输入元素的类型</td></tr></tbody></table><p>完整列表，请查看 <a href="https://www.runoob.com/html/html5-form-attributes.html">HTML 输入属性</a>。</p><h4 id="约束验证-CSS-伪类选择器"><a href="#约束验证-CSS-伪类选择器" class="headerlink" title="约束验证 CSS 伪类选择器"></a>约束验证 CSS 伪类选择器</h4><table><thead><tr><th>选择器</th><th>描述</th></tr></thead><tbody><tr><td>:disabled</td><td>选取属性为 “disabled” 属性的 input 元素</td></tr><tr><td>:invalid</td><td>选取无效的 input 元素</td></tr><tr><td>:optional</td><td>选择没有”required”属性的 input 元素</td></tr><tr><td>:required</td><td>选择有”required”属性的 input 元素</td></tr><tr><td>:valid</td><td>选取有效值的 input 元素</td></tr></tbody></table><p>完整列表，请查看 <a href="https://www.runoob.com/css/css-pseudo-classes.html">CSS 伪类</a>。</p><h3 id="JavaScript-表单验证"><a href="#JavaScript-表单验证" class="headerlink" title="JavaScript 表单验证"></a>JavaScript 表单验证</h3><p>​ ==JavaScript 可用来在数据被送往服务器前对 HTML 表单中的这些输入数据进行验证。==</p><blockquote><p>表单数据经常需要使用 JavaScript 来验证其正确性：</p><ul><li>验证表单数据是否为空？</li><li>验证输入是否是一个正确的 email 地址？</li><li>验证日期是否输入正确？</li><li>验证表单输入内容是否为数字型？</li></ul></blockquote><p>下面的函数用来检查用户是否已填写表单中的必填（或必选）项目。假如必填或必选项为空，那么警告框会弹出，并且函数的返回值为 false，否则函数的返回值则为 true（意味着数据没有问题）：</p><pre><code>&lt;script&gt;function validateForm()&#123;    // 获取myForm标签中的fname属性var x=document.forms[&quot;myForm&quot;][&quot;fname&quot;].value;if (x==null || x==&quot;&quot;)&#123;  alert(&quot;姓必须填写&quot;);  return false;  &#125;&#125;&lt;/script&gt;&lt;/head&gt;&lt;body&gt;&lt;form name=&quot;myForm&quot; action=&quot;demo-form.php&quot; onsubmit=&quot;return validateForm()&quot; method=&quot;post&quot;&gt;姓: &lt;input type=&quot;text&quot; name=&quot;fname&quot;&gt;&lt;input type=&quot;submit&quot; value=&quot;提交&quot;&gt;&lt;/form&gt;</code></pre><h3 id="E-mail-验证"><a href="#E-mail-验证" class="headerlink" title="E-mail 验证"></a>E-mail 验证</h3><p>下面的函数检查输入的数据是否符合电子邮件地址的基本语法。</p><p>意思就是说，输入的数据必须包含 @ 符号和点号(.)。同时，@ 不可以是邮件地址的首字符，并且 @ 之后需有至少一个点号：</p><pre><code>&lt;script&gt;function validateForm()&#123;    // 获取myForm这个标签的email的value var x=document.forms[&quot;myForm&quot;][&quot;email&quot;].value; var atpos=x.indexOf(&quot;@&quot;); var dotpos=x.lastIndexOf(&quot;.&quot;); if (atpos&lt;1 || dotpos&lt;atpos+2 || dotpos+2&gt;=x.length)&#123;  alert(&quot;不是一个有效的 e-mail 地址&quot;);    return false; &#125;&#125;&lt;/script&gt;&lt;/head&gt;&lt;body&gt;&lt;form name=&quot;myForm&quot; action=&quot;demo-form.php&quot; onsubmit=&quot;return validateForm();&quot; method=&quot;post&quot;&gt;Email: &lt;input type=&quot;text&quot; name=&quot;email&quot;&gt;&lt;input type=&quot;submit&quot; value=&quot;提交&quot;&gt;&lt;/form&gt;</code></pre><h3 id="JavaScript-验证-API"><a href="#JavaScript-验证-API" class="headerlink" title="JavaScript 验证 API"></a>JavaScript 验证 API</h3><h4 id="约束验证-DOM-方法"><a href="#约束验证-DOM-方法" class="headerlink" title="约束验证 DOM 方法"></a>约束验证 DOM 方法</h4><table><thead><tr><th>Property</th><th>Description</th></tr></thead><tbody><tr><td>checkValidity()</td><td>如果 input 元素中的数据是合法的返回 true，否则返回 false。</td></tr><tr><td>setCustomValidity()</td><td>设置 input 元素的 validationMessage 属性，用于自定义错误提示信息的方法。使用 setCustomValidity 设置了自定义提示后，validity.customError 就会变成 true，则 checkValidity 总是会返回 false。如果要重新判断需要取消自定义提示，方式如下：<code>setCustomValidity(&#39;&#39;) ，setCustomValidity(null)， setCustomValidity(undefined)</code></td></tr></tbody></table><pre><code>&lt;body&gt;&lt;p&gt;输入数字并点击验证按钮:&lt;/p&gt;&lt;input id=&quot;id1&quot; type=&quot;number&quot; min=&quot;100&quot; max=&quot;300&quot; required&gt;&lt;button onclick=&quot;myFunction()&quot;&gt;验证&lt;/button&gt;&lt;p&gt;如果输入的数字小于 100 或大于300，会提示错误信息。&lt;/p&gt;&lt;p id=&quot;demo&quot;&gt;&lt;/p&gt;&lt;script&gt;function myFunction() &#123;    // 获取&quot;id1&quot;这个对象    var inpObj = document.getElementById(&quot;id1&quot;);    if (inpObj.checkValidity() == false) &#123;        document.getElementById(&quot;demo&quot;).innerHTML = inpObj.validationMessage;    &#125; else &#123;        document.getElementById(&quot;demo&quot;).innerHTML = &quot;输入正确&quot;;    &#125;&#125;&lt;/script&gt;&lt;/body&gt;</code></pre><h3 id="约束验证-DOM-属性"><a href="#约束验证-DOM-属性" class="headerlink" title="约束验证 DOM 属性"></a>约束验证 DOM 属性</h3><table><thead><tr><th>属性</th><th>描述</th></tr></thead><tbody><tr><td>validity</td><td>布尔属性值，返回 input 输入值是否合法</td></tr><tr><td>validationMessage</td><td>浏览器错误提示信息</td></tr><tr><td>willValidate</td><td>指定 input 是否需要验证</td></tr></tbody></table><hr><h3 id="Validity-属性"><a href="#Validity-属性" class="headerlink" title="Validity 属性"></a>Validity 属性</h3><p>input 元素的 <strong>validity 属性</strong>包含一系列关于 validity 数据属性:</p><table><thead><tr><th>属性</th><th>描述</th></tr></thead><tbody><tr><td>customError</td><td>设置为 true, 如果设置了自定义的 validity 信息。</td></tr><tr><td>patternMismatch</td><td>设置为 true, 如果元素的值不匹配它的模式属性。</td></tr><tr><td>rangeOverflow</td><td>设置为 true, 如果元素的值大于设置的最大值。</td></tr><tr><td>rangeUnderflow</td><td>设置为 true, 如果元素的值小于它的最小值。</td></tr><tr><td>stepMismatch</td><td>设置为 true, 如果元素的值不是按照规定的 step 属性设置。</td></tr><tr><td>tooLong</td><td>设置为 true, 如果元素的值超过了 maxLength 属性设置的长度。</td></tr><tr><td>typeMismatch</td><td>设置为 true, 如果元素的值不是预期相匹配的类型。</td></tr><tr><td>valueMissing</td><td>设置为 true，如果元素 (required 属性) 没有值。</td></tr><tr><td>valid</td><td>设置为 true，如果元素的值是合法的。</td></tr></tbody></table><pre><code>&lt;p&gt;输入数字并点击验证按钮:&lt;/p&gt;&lt;input id=&quot;id1&quot; type=&quot;number&quot; max=&quot;100&quot;&gt;&lt;button onclick=&quot;myFunction()&quot;&gt;验证&lt;/button&gt;&lt;p&gt;如果输入的数字大于 100 ( input 的 max 属性), 会显示错误信息。&lt;/p&gt;&lt;p id=&quot;demo&quot;&gt;&lt;/p&gt;&lt;script&gt;function myFunction() &#123;    var txt = &quot;&quot;;    if (document.getElementById(&quot;id1&quot;).validity.rangeOverflow) &#123;        txt = &quot;输入的值太大了&quot;;    &#125; else &#123;        txt = &quot;输入正确&quot;;    &#125;    document.getElementById(&quot;demo&quot;).innerHTML = txt;&#125;&lt;/script&gt;</code></pre><h2 id="13-this-关键字"><a href="#13-this-关键字" class="headerlink" title="13.this 关键字"></a>13.this 关键字</h2><p>面向对象语言中 this 表示当前对象的一个引用。</p><p>但在 JavaScript 中 this 不是固定不变的，它会随着执行环境的改变而改变。</p><ul><li><p>==在方法中，this 表示该方法所属的对象==。</p></li><li><p>在函数中，this 表示全局对象。</p></li><li><p>在函数中，在严格模式下，this 是未定义的(undefined)。</p></li><li><p>在事件中，this 表示接收事件的元素。</p><blockquote><pre><code>&lt;h2&gt;JavaScript &lt;b&gt;this&lt;/b&gt; 关键字&lt;/h2&gt;//修改button的样式，点击后button会消失&lt;button onclick=&quot;this.style.display=&#39;none&#39;&quot;&gt;点我后我就消失了&lt;/button&gt;</code></pre></blockquote></li><li><p>类似 call() 和 apply() 方法可以将 this 引用到任何对象。</p></li><li><p>单独使用 this，则它指向全局(Global)对象。在浏览器中，window 就是该全局对象为 [<strong>object Window</strong>]。</p></li></ul><pre><code>&lt;h2&gt;JavaScript &lt;b&gt;this&lt;/b&gt; 关键字&lt;/h2&gt;&lt;p&gt;实例中，&lt;b&gt;this&lt;/b&gt; 指向了 window 对象:&lt;/p&gt;&lt;p id=&quot;demo&quot;&gt;&lt;/p&gt;&lt;script&gt;var x = this;document.getElementById(&quot;demo&quot;).innerHTML = x;&lt;/script&gt;//会输出JavaScript this 关键字实例中，this 指向了 window 对象:[object Window]</code></pre><ul><li><p>显式函数绑定</p><p>在 JavaScript 中函数也是对象，对象则有方法，apply 和 call 就是函数对象的方法。这两个方法异常强大，他们允许切换函数执行的上下文环境（context），即 this 绑定的对象。</p><p>在下面实例中，==当我们使用 person2 作为参数来调用 person1.fullName 方法时, <strong>this</strong> 将指向 person2, 即便它是 person1 的方法==：</p><pre><code>&lt;h2&gt;JavaScript this 关键字&lt;/h2&gt;&lt;p&gt;实例中 &lt;strong&gt;this&lt;/strong&gt; 指向了 person2，即便它是 person1 的方法:&lt;/p&gt;&lt;p id=&quot;demo&quot;&gt;&lt;/p&gt;&lt;script&gt;var person1 = &#123;  fullName: function() &#123;    return this.firstName + &quot; &quot; + this.lastName;  &#125;&#125;var person2 = &#123;  firstName:&quot;John&quot;,  lastName: &quot;Doe&quot;,&#125;var x = person1.fullName.call(person2);document.getElementById(&quot;demo&quot;).innerHTML = x;&lt;/script&gt;</code></pre></li></ul><h2 id="14-let-和-const"><a href="#14-let-和-const" class="headerlink" title="14.let 和 const"></a>14.let 和 const</h2><p>let 声明的变量只在 let 命令所在的代码块内有效。</p><p>const 声明一个只读的常量，一旦声明，常量的值就不能改变。</p><p>使用 var 关键字声明的变量不具备块级作用域的特性，它在 {} 外依然能被访问到。</p><p>在 ES6 之前，是没有块级作用域的概念的，ES6 可以使用 let 关键字来实现块级作用域。</p><p>==let 声明的变量只在 let 命令所在的代码块 <strong>{}</strong> 内有效，在 <strong>{}</strong> 之外不能访问。==</p><pre><code>var x = 10;// 这里输出 x 为 10&#123;  let x = 2;  // 这里输出 x 为 2&#125;// 这里输出 x 为 10</code></pre><p>在 JavaScript 中, 全局作用域是针对 JavaScript 环境。在 HTML 中, 全局作用域是针对 window 对象。</p><p>使用 <strong>var</strong> 关键字声明的全局作用域变量属于 window 对象，使用 <strong>let</strong> 关键字声明的全局作用域变量不属于 window 对象。</p><p>==const 用于声明一个或多个常量，声明时必须进行初始化，且初始化后值不可再修改。==</p><p>const 定义常量与使用 let 定义的变量相似：</p><ul><li>二者都是块级作用域</li><li>都不能和它所在作用域内的其他变量或函数拥有相同的名称</li></ul><p>两者还有以下两点区别：</p><ul><li><code>const</code>声明的常量必须初始化，而<code>let</code>声明的变量不用</li><li>const 定义常量的值不能通过再赋值修改，也不能再次声明。而 let 定义的变量值可以修改。</li></ul><p><strong>const 的本质: const 定义的变量并非常量，并非不可变，它定义了一个常量引用一个值。使用 const 定义的对象或者数组，其实是可变的。</strong></p><h2 id="15-JSON"><a href="#15-JSON" class="headerlink" title="15.JSON"></a>15.JSON</h2><p>JSON 是用于存储和传输数据的格式，它通常用于服务端向网页传递数据 。</p><blockquote><p>==JSON 使用 JavaScript 语法，但是 JSON 格式仅仅是一个文本。文本可以被任何编程语言读取及作为数据格式传递。==</p></blockquote><h3 id="语法规则"><a href="#语法规则" class="headerlink" title="语法规则"></a>语法规则</h3><ul><li>数据为 键/值 对。</li><li>数据由逗号分隔。</li><li>大括号保存对象</li><li>方括号保存数组</li></ul><h3 id="JSON-对象保存在大括号内"><a href="#JSON-对象保存在大括号内" class="headerlink" title="JSON 对象保存在大括号内"></a>JSON 对象保存在大括号内</h3><p>就像在 JavaScript 中, 对象可以保存多个 键/值 对：</p><p>{“name”:”Runoob”, “url”:”<a href="http://www.runoob.com&quot;}/">www.runoob.com&quot;}</a></p><h3 id="JSON-数组保存在中括号内"><a href="#JSON-数组保存在中括号内" class="headerlink" title="JSON 数组保存在中括号内"></a>JSON 数组保存在中括号内</h3><p>就像在 JavaScript 中, 数组可以包含对象：</p><p>“sites”:[ {“name”:”Runoob”, “url”:”<a href="http://www.runoob.com&quot;}/">www.runoob.com&quot;}</a>, {“name”:”Google”, “url”:”<a href="http://www.google.com&quot;}/">www.google.com&quot;}</a>, {“name”:”Taobao”, “url”:”<a href="http://www.taobao.com&quot;}/">www.taobao.com&quot;}</a> ]</p><pre><code>&lt;h2&gt;为 JSON 字符串创建对象&lt;/h2&gt;&lt;p id=&quot;demo&quot;&gt;&lt;/p&gt;&lt;script&gt;var text = &#39;&#123; &quot;sites&quot; : [&#39; + &#39;&#123; &quot;name&quot;:&quot;Runoob&quot; , &quot;url&quot;:&quot;www.runoob.com&quot; &#125;,&#39; + &#39;&#123; &quot;name&quot;:&quot;Google&quot; , &quot;url&quot;:&quot;www.google.com&quot; &#125;,&#39; + &#39;&#123; &quot;name&quot;:&quot;Taobao&quot; , &quot;url&quot;:&quot;www.taobao.com&quot; &#125; ]&#125;&#39;;obj = JSON.parse(text); // 转换为JS对象document.getElementById(&quot;demo&quot;).innerHTML = obj.sites[2].name + &quot; &quot; + obj.sites[1].url;&lt;/script&gt;</code></pre><table><thead><tr><th>函数</th><th>描述</th></tr></thead><tbody><tr><td><a href="https://www.runoob.com/js/javascript-json-parse.html">JSON.parse()</a></td><td>用于将一个 JSON 字符串转换为 JavaScript 对象。</td></tr><tr><td><a href="https://www.runoob.com/js/javascript-json-stringify.html">JSON.stringify()</a></td><td>用于将 JavaScript 值转换为 JSON 字符串。</td></tr></tbody></table><h2 id="16-void"><a href="#16-void" class="headerlink" title="16.void"></a>16.void</h2><p><strong>href=”#”与 href=”javascript:void(0)”的区别</strong></p><p><strong>#</strong> 包含了一个位置信息，默认的锚是**#top** 也就是网页的上端；而 javascript:void(0), 仅仅表示一个死链接。</p><p>在页面很长的时候会使用 <strong>#</strong> 来定位页面的具体位置，格式为：**# + id**。</p><p>如果你要定义一个死链接请使用 javascript:void(0) 。</p><h1 id="二、HTML-DOM"><a href="#二、HTML-DOM" class="headerlink" title="二、HTML DOM"></a>二、HTML DOM</h1><p>当网页被加载时，浏览器会创建页面的文档对象模型（Document Object Model）。</p><p><strong>HTML DOM</strong> 模型被构造为<strong>对象</strong>的树：</p><p><img src="https://learningpics.oss-cn-shenzhen.aliyuncs.com/images/pic_htmltree.gif" alt="DOM HTML tree"></p><p>通过可编程的对象模型，JavaScript 获得了足够的能力来创建动态的 HTML。</p><ul><li>JavaScript 能够改变页面中的所有 HTML 元素</li><li>JavaScript 能够改变页面中的所有 HTML 属性</li><li>JavaScript 能够改变页面中的所有 CSS 样式</li><li>JavaScript 能够对页面中的所有事件做出反应</li></ul><h2 id="查找-HTML-元素"><a href="#查找-HTML-元素" class="headerlink" title="查找 HTML 元素"></a>查找 HTML 元素</h2><p>有三种查找 HTML 元素的方法：</p><ul><li>通过 id 找到 HTML 元素</li><li>通过标签名找到 HTML 元素</li><li>通过类名找到 HTML 元素</li></ul><h3 id="通过-id-查找-HTML-元素"><a href="#通过-id-查找-HTML-元素" class="headerlink" title="通过 id 查找 HTML 元素"></a>通过 id 查找 HTML 元素</h3><p>在 DOM 中查找 HTML 元素的最简单的方法，是通过使用元素的 id。</p><p>本例查找 id=”intro” 元素：var x=document.getElementById(“intro”);</p><blockquote><p>如果找到该元素，则该方法将以对象（在 x 中）的形式返回该元素。如果未找到该元素，则 x 将包含 null。</p></blockquote><h3 id="通过标签名查找-HTML-元素"><a href="#通过标签名查找-HTML-元素" class="headerlink" title="通过标签名查找 HTML 元素"></a>通过标签名查找 HTML 元素</h3><p>本例查找 id=”main” 的元素，然后查找 id=”main” 元素中的所有&lt;p&gt; 元素：</p><blockquote><p>var x=document.getElementById(“main”);<br>var y=x.getElementsByTagName(“p”);</p></blockquote><h3 id="通过类名找到-HTML-元素"><a href="#通过类名找到-HTML-元素" class="headerlink" title="通过类名找到 HTML 元素"></a>通过类名找到 HTML 元素</h3><p>本例通过 <strong>getElementsByClassName</strong> 函数来查找 class=”intro” 的元素：</p><p>var x=document.getElementsByClassName(“intro”);</p><h2 id="改变-HTML"><a href="#改变-HTML" class="headerlink" title="改变 HTML"></a>改变 HTML</h2><h3 id="改变-HTML-标签的内容"><a href="#改变-HTML-标签的内容" class="headerlink" title="改变 HTML 标签的内容"></a>改变 HTML 标签的内容</h3><p>document.getElementById(<em>id</em>Name).innerHTML=<em>新的 HTML</em></p><h3 id="改变-HTML-属性"><a href="#改变-HTML-属性" class="headerlink" title="改变 HTML 属性"></a>改变 HTML 属性</h3><p>document.getElementById(<em>id</em>).<em>attribute=新属性值</em></p><blockquote><p>比如改变图片的属性：</p><pre><code>&lt;img id=&quot;image&quot; src=&quot;smiley.gif&quot;&gt;&lt;script&gt;document.getElementById(&quot;image&quot;).src=&quot;landscape.jpg&quot;;&lt;/script&gt;</code></pre></blockquote><h2 id="改变-CSS"><a href="#改变-CSS" class="headerlink" title="改变 CSS"></a>改变 CSS</h2><h3 id="改变-HTML-样式"><a href="#改变-HTML-样式" class="headerlink" title="改变 HTML 样式"></a>改变 HTML 样式</h3><p>document.getElementById(<em>id</em>).style.<em>property</em>=<em>新样式</em></p><p>如下面改变 p 标签的颜色，字体和大小</p><pre><code>&lt;body&gt;&lt;p id=&quot;p1&quot;&gt;Hello World!&lt;/p&gt;&lt;p id=&quot;p2&quot;&gt;Hello World!&lt;/p&gt;&lt;script&gt;document.getElementById(&quot;p2&quot;).style.color=&quot;blue&quot;;document.getElementById(&quot;p2&quot;).style.fontFamily=&quot;Arial&quot;;document.getElementById(&quot;p2&quot;).style.fontSize=&quot;larger&quot;;&lt;/script&gt;&lt;p&gt;以上段落通过脚本修改。&lt;/p&gt;&lt;/body&gt;</code></pre><h2 id="HTML-DOM-事件"><a href="#HTML-DOM-事件" class="headerlink" title="HTML DOM 事件"></a>HTML DOM 事件</h2><p>在事件发生时执行 JavaScript，比如当用户在 HTML 元素上点击时。如需在用户点击某个元素时执行代码，请向一个 HTML 事件属性添加 JavaScript 代码：</p><p>onclick=<em>JavaScript</em></p><p>HTML 事件的例子：</p><ul><li>当用户点击鼠标时</li><li>当网页已加载时</li><li>当图像已加载时</li><li>当鼠标移动到元素上时</li><li>当输入字段被改变时</li><li>当提交 HTML 表单时</li><li>当用户触发按键时</li></ul><p>如：&lt;h1 onclick=”this.innerHTML=’Ooops!’”&gt;点击文本!&lt;/h1&gt; 点击时文本会变成 Ooops</p><h2 id="各种事件"><a href="#各种事件" class="headerlink" title="各种事件"></a>各种事件</h2><ul><li><strong>onload 和 onunload 事件，它们会在用户进入或离开==页面==时被触发。</strong></li></ul><blockquote><p>onload 事件可用于检测访问者的浏览器类型和浏览器版本，并基于这些信息来加载网页的正确版本。</p></blockquote><ul><li>onload 和 onunload 事件可用于处理 cookie。</li><li>onchange 事件，常结合对输入字段的验证来使用。</li><li>onmouseover 和 onmouseout 事件可用于在用户的鼠标移至 HTML 元素上方或移出元素时触发函数。</li><li><strong>onmousedown, onmouseup 以及 onclick 构成了鼠标点击事件的所有部分。</strong>首先当点击鼠标按钮时，会触发 onmousedown 事件，当释放鼠标按钮时，会触发 onmouseup 事件，最后，当完成鼠标点击时，会触发 onclick 事件。</li></ul><h3 id="addEventListener-方法"><a href="#addEventListener-方法" class="headerlink" title="addEventListener() 方法"></a>addEventListener() 方法</h3><p>addEventListener() 方法用于向指定元素添加事件句柄，它添加的事件句柄不会覆盖已存在的事件句柄。</p><p>可以向一个元素添加多个事件句柄，也可以向同个元素添加多个同类型的事件句柄，如：两个 “click” 事件。</p><p>可以向任何 DOM 对象添加事件监听，不仅仅是 HTML 元素。如： window 对象。</p><p>addEventListener() 方法可以更简单的控制事件（冒泡与捕获）。</p><p>当你使用 addEventListener() 方法时, JavaScript 从 HTML 标记中分离开来，可读性更强， 在没有控制 HTML 标记时也可以添加事件监听。</p><p>可以使用 removeEventListener() 方法来移除事件的监听。</p><blockquote><p>如在用户点击按钮时触发监听事件：</p><p>document.getElementById(“myBtn”).addEventListener(“click”, displayDate);</p></blockquote><h4 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h4><p>==<em>element</em>.addEventListener(<em>event, function, useCapture</em>);==</p><blockquote><p>第一个参数是事件的类型 (如 “click” 或 “mousedown”).</p><p>第二个参数是事件触发后调用的函数。</p><p>第三个参数是个布尔值用于描述事件是冒泡还是捕获。该参数是可选的。</p><p><strong>注意:不要使用 “on” 前缀。 例如，使用 “click” ,而不是使用 “onclick”。</strong></p></blockquote><h4 id="向原元素添加事件句柄"><a href="#向原元素添加事件句柄" class="headerlink" title="向原元素添加事件句柄"></a>向原元素添加事件句柄</h4><p>可以引用外部函数名</p><pre><code>element.addEventListener(&quot;click&quot;, myFunction);function myFunction() &#123;  alert(&quot;Hello World!&quot;);&#125;</code></pre><h4 id="向同一个元素中添加多个事件句柄"><a href="#向同一个元素中添加多个事件句柄" class="headerlink" title="向同一个元素中添加多个事件句柄"></a>向同一个元素中添加多个事件句柄</h4><p>addEventListener() 方法允许向同一个元素添加多个事件，且不会覆盖已存在的事件：</p><pre><code>element.addEventListener(&quot;mouseover&quot;, myFunction);element.addEventListener(&quot;click&quot;, mySecondFunction);element.addEventListener(&quot;mouseout&quot;, myThirdFunction);</code></pre><h4 id="向-Window-对象添加事件句柄"><a href="#向-Window-对象添加事件句柄" class="headerlink" title="向 Window 对象添加事件句柄"></a>向 Window 对象添加事件句柄</h4><p>​ addEventListener() 方法允许你在 HTML DOM 对象添加事件监听， HTML DOM 对象如： HTML 元素, HTML 文档, window 对象。或者其他支出的事件对象如: xmlHttpRequest 对象。</p><pre><code>//当用户重置窗口大小时添加事件监听：window.addEventListener(&quot;resize&quot;, function()&#123;    document.getElementById(&quot;demo&quot;).innerHTML = sometext;&#125;);</code></pre><h4 id="传递参数"><a href="#传递参数" class="headerlink" title="传递参数"></a>传递参数</h4><p>当传递参数值时，使用”匿名函数”调用带参数的函数：</p><pre><code>&lt;button id=&quot;myBtn&quot;&gt;点我&lt;/button&gt;&lt;p id=&quot;demo&quot;&gt;&lt;/p&gt;&lt;script&gt;var p1 = 5;var p2 = 7;    //不能直接引用myFunction(p1, p2)document.getElementById(&quot;myBtn&quot;).addEventListener(&quot;click&quot;, function() &#123;    myFunction(p1, p2);&#125;);function myFunction(a, b) &#123;    var result = a * b;    document.getElementById(&quot;demo&quot;).innerHTML = result;&#125;&lt;/script&gt;</code></pre><h4 id="冒泡与捕获"><a href="#冒泡与捕获" class="headerlink" title="冒泡与捕获"></a>冒泡与捕获</h4><p>==事件传递有两种方式：冒泡与捕获。==</p><p>事件传递定义了元素事件触发的顺序。 如果你将&lt;p&gt; 元素插入到 &lt;div&gt; 元素中，用户点击 &lt;p&gt; 元素, 哪个元素的 “click” 事件先被触发呢？</p><p>在 <em>冒泡</em> 中，内部元素的事件会先被触发，然后再触发外部元素，即： &lt;p&gt; 元素的点击事件先触发，然后会触发 &lt;div&gt; 元素的点击事件。</p><p>在 <em>捕获</em> 中，外部元素的事件会先被触发，然后才会触发内部元素的事件，即： &lt;div&gt; 元素的点击事件先触发 ，然后再触发 &lt;p&gt; 元素的点击事件。</p><p>addEventListener() 方法可以指定 “useCapture” 参数来设置传递类型：</p><pre><code>addEventListener(event, function, useCapture);</code></pre><p>默认值为 false, 即冒泡传递，当值为 true 时, 事件使用捕获传递。</p><h4 id="removeEventListener-方法"><a href="#removeEventListener-方法" class="headerlink" title="removeEventListener() 方法"></a>removeEventListener() 方法</h4><blockquote><p>removeEventListener() 方法移除由 addEventListener() 方法添加的事件句柄:</p><p><em>element</em>.removeEventListener(“mousemove”, myFunction);</p></blockquote><h4 id="创建新的-HTML-元素-节点-appendChild"><a href="#创建新的-HTML-元素-节点-appendChild" class="headerlink" title="创建新的 HTML 元素 (节点) - appendChild()"></a>创建新的 HTML 元素 (节点) - appendChild()</h4><p>要创建新的 HTML 元素 (节点)需要先创建一个元素，然后在已存在的元素中添加它。</p><pre><code>&lt;script&gt;var para = document.createElement(&quot;p&quot;);  // 创建 &lt;p&gt; 元素var node = document.createTextNode(&quot;这是一个新的段落。&quot;); //为 &lt;p&gt; 元素添加文本节点para.appendChild(node);  // 将文本节点添加到 &lt;p&gt; 元素中,在一个已存在的元素中添加 p 元素。var element = document.getElementById(&quot;div1&quot;); //查找已存在的元素element.appendChild(para); //添加到已存在的元素中&lt;/script&gt;</code></pre><h4 id="创建新的-HTML-元素-节点-insertBefore"><a href="#创建新的-HTML-元素-节点-insertBefore" class="headerlink" title="创建新的 HTML 元素 (节点) - insertBefore()"></a>创建新的 HTML 元素 (节点) - insertBefore()</h4><p>将新元素添加到开始位置，可以使用 <strong>insertBefore()</strong> 方法:</p><h4 id="移除已存在的元素"><a href="#移除已存在的元素" class="headerlink" title="移除已存在的元素"></a>移除已存在的元素</h4><p>要移除一个元素，你需要知道该元素的父元素,removeChild()方法</p><h4 id="替换-HTML-元素-replaceChild"><a href="#替换-HTML-元素-replaceChild" class="headerlink" title="替换 HTML 元素 - replaceChild()"></a>替换 HTML 元素 - replaceChild()</h4><h3 id="DOM-集合"><a href="#DOM-集合" class="headerlink" title="DOM 集合"></a>DOM 集合</h3><p>getElementsByTagName() 方法返回 <a href="https://www.runoob.com/jsref/dom-htmlcollection.html">HTMLCollection</a> 对象。</p><pre><code>//获取文档所有的 &lt;p&gt; 元素：var x = document.getElementsByTagName(&quot;p&quot;);//集合中的元素可以通过索引(以 0 为起始位置)来访问,访问第二个 &lt;p&gt; 元素:y = x[1];//HTMLCollection 对象的 length 属性定义了集合中元素的数量，如：x.length表示&lt;p&gt; 元素的数量</code></pre><p>修改所有&lt;p&gt;元素的背景颜色：</p><pre><code>var myCollection = document.getElementsByTagName(&quot;p&quot;);var i;for (i = 0; i &lt; myCollection.length; i++) &#123;  myCollection[i].style.backgroundColor = &quot;red&quot;;&#125;</code></pre><h1 id="二、高级"><a href="#二、高级" class="headerlink" title="二、高级"></a>二、高级</h1><h2 id="JavaScript-对象"><a href="#JavaScript-对象" class="headerlink" title="JavaScript 对象"></a>JavaScript 对象</h2><p>JavaScript 提供多个内建对象，比如 String、Date、Array 等等。 对象只是带有属性和方法的特殊数据类型。</p><ul><li>布尔型可以是一个对象。</li><li>数字型可以是一个对象。</li><li>字符串也可以是一个对象</li><li>日期是一个对象</li><li>数学和正则表达式也是对象</li><li>数组是一个对象</li><li>甚至函数也可以是对象</li></ul><p>==对象只是一种特殊的数据。对象拥有<strong>属性</strong>和<strong>方法</strong>==。</p><h3 id="创建-JavaScript-对象"><a href="#创建-JavaScript-对象" class="headerlink" title="创建 JavaScript 对象"></a>创建 JavaScript 对象</h3><p>通过 JavaScript，您能够定义并创建自己的对象。创建新对象有两种不同的方法：</p><ul><li><p>定义并创建对象的实例</p><pre><code>person=new Object();person.firstname=&quot;John&quot;;person.lastname=&quot;Doe&quot;;person.age=50;person.eyecolor=&quot;blue&quot;;</code></pre></li><li><p>使用函数来定义对象，然后创建新的对象实例</p><pre><code>function person(firstname, lastname, age, eyecolor) &#123;  this.firstname = firstname;  this.lastname = lastname;  this.age = age;  this.eyecolor = eyecolor;&#125;</code></pre></li></ul><h3 id="prototype（原型对象）"><a href="#prototype（原型对象）" class="headerlink" title="prototype（原型对象）"></a>prototype（原型对象）</h3><p>所有的 JavaScript 对象都会从一个 prototype（原型对象）中继承属性和方法。</p><h4 id="prototype-继承"><a href="#prototype-继承" class="headerlink" title="prototype 继承"></a>prototype 继承</h4><p>所有的 JavaScript 对象都会从一个 prototype（原型对象）中继承属性和方法：</p><ul><li><code>Date</code> 对象从 <code>Date.prototype</code> 继承。</li><li><code>Array</code> 对象从 <code>Array.prototype</code> 继承。</li><li><code>Person</code> 对象从 <code>Person.prototype</code> 继承。</li></ul><p>所有 JavaScript 中的对象都是位于原型链顶端的 Object 的实例。</p><p>JavaScript 对象有一个指向一个原型对象的链。当试图访问一个对象的属性时，它不仅仅在该对象上搜寻，还会搜寻该对象的原型，以及该对象的原型的原型，依次层层向上搜索，直到找到一个名字匹配的属性或到达原型链的末尾。</p><p><code>Date</code> 对象, <code>Array</code> 对象, 以及 <code>Person</code> 对象从 <code>Object.prototype</code> 继承。</p><h4 id="添加属性和方法"><a href="#添加属性和方法" class="headerlink" title="添加属性和方法"></a>添加属性和方法</h4><p>在所有已经存在的对象添加新的属性或方法，可以通过 prototype 实现。</p><p>使用 prototype 属性就可以给对象的构造函数添加新的属性：</p><pre><code>function Person(first, last, age, eyecolor) &#123;  this.firstName = first;  this.lastName = last;  this.age = age;  this.eyeColor = eyecolor;&#125;Person.prototype.nationality = &quot;English&quot;;//添加方法Person.prototype.name = function () &#123;  return this.firstName + &quot; &quot; + this.lastName;&#125;;</code></pre><h3 id="Number-对象"><a href="#Number-对象" class="headerlink" title="Number 对象"></a>Number 对象</h3><p>JavaScript 只有一种数字类型，可以使用也可以不使用小数点来书写数字，极大或极小的数字可通过科学（指数）计数法来写。</p><p><strong>所有 JavaScript 数字均为 64 位。</strong></p><h4 id="NaN-非数字值"><a href="#NaN-非数字值" class="headerlink" title="NaN - 非数字值"></a>NaN - 非数字值</h4><p>NaN 属性是代表非数字值的特殊值。该属性用于指示某个值不是数字。可以把 Number 对象设置为该值，来指示其不是数字值。可以使用 isNaN() 全局函数来判断一个值是否是 NaN 值。</p><h3 id="字符串（String）-对象"><a href="#字符串（String）-对象" class="headerlink" title="字符串（String） 对象"></a>字符串（String） 对象</h3><p>字符串的属性和方法与 Java 中的大多数一样，一个字符串可以使用单引号或双引号。</p><ul><li><p>**match()**函数用来查找字符串中特定的字符，并且如果找到的话，则返回这个字符。</p></li><li><p><strong>replace()</strong> 方法在字符串中用某些字符替换另一些字符。</p></li><li><p>字符串大小写转换使用函数 <strong>toUpperCase()</strong> / <strong>toLowerCase()。</strong></p></li><li><p>字符串使用**split()**函数转为数组:</p><pre><code>&lt;script&gt;function myFunction()&#123; var str=&quot;a,b,c,d,e,f&quot;; var n=str.split(&quot;,&quot;); document.getElementById(&quot;demo&quot;).innerHTML=n[0];&#125;&lt;/script&gt;</code></pre></li><li><p>特殊字符</p><table><thead><tr><th>代码</th><th>输出</th></tr></thead><tbody><tr><td>&#39;</td><td>单引号</td></tr><tr><td>&quot;</td><td>双引号</td></tr><tr><td>\</td><td>斜杆</td></tr><tr><td>\n</td><td>换行</td></tr><tr><td>\r</td><td>回车</td></tr><tr><td>\t</td><td>tab</td></tr><tr><td>\b</td><td>空格</td></tr><tr><td>\f</td><td>换页</td></tr></tbody></table></li></ul><h3 id="Date（日期）-对象"><a href="#Date（日期）-对象" class="headerlink" title="Date（日期） 对象"></a>Date（日期） 对象</h3><h4 id="在线实例"><a href="#在线实例" class="headerlink" title="在线实例"></a>在线实例</h4><pre><code>// 显示当前日期&lt;script&gt;var d=new Date();document.write(d);&lt;/script&gt;//使用 getFullYear() 获取年份。&lt;script&gt;function myFunction()&#123; var d = new Date(); var x = document.getElementById(&quot;demo&quot;); x.innerHTML=d.getFullYear();    d.getTime(); //getTime() 返回从 1970 年 1 月 1 日至今的毫秒数。    x.innerHTML=d.toUTCString(); //使用 toUTCString() 将当日的日期（根据 UTC）转换为字符串。&#125;&lt;/script&gt;</code></pre><p>使用 getDay() 和数组来显示星期，而不仅仅是数字。</p><pre><code>&lt;script&gt;function myFunction()&#123; var d = new Date(); var weekday=new Array(7); weekday[0]=&quot;周日&quot;; weekday[1]=&quot;周一&quot;; weekday[2]=&quot;周二&quot;; weekday[3]=&quot;周三&quot;; weekday[4]=&quot;周四&quot;; weekday[5]=&quot;周五&quot;; weekday[6]=&quot;周六&quot;; var x = document.getElementById(&quot;demo&quot;); x.innerHTML=weekday[d.getDay()];&#125;&lt;/script&gt;</code></pre><p>在网页上显示一个钟表。</p><pre><code>&lt;!DOCTYPE html&gt;&lt;html&gt;  &lt;head&gt;    &lt;meta charset=&quot;utf-8&quot; /&gt;    &lt;title&gt;菜鸟教程(runoob.com)&lt;/title&gt;    &lt;script&gt;      function startTime() &#123;        var today = new Date();        var h = today.getHours();        var m = today.getMinutes();        var s = today.getSeconds(); // 在小于10的数字前加一个‘0’        m = checkTime(m);        s = checkTime(s);        document.getElementById(&quot;txt&quot;).innerHTML = h + &quot;:&quot; + m + &quot;:&quot; + s;        t = setTimeout(function () &#123;          startTime();        &#125;, 500);      &#125;      function checkTime(i) &#123;        if (i &lt; 10) &#123;          i = &quot;0&quot; + i;        &#125;        return i;      &#125;    &lt;/script&gt;  &lt;/head&gt;  &lt;body onload=&quot;startTime()&quot;&gt;&lt;/body&gt;&lt;/html&gt;</code></pre><h3 id="Array（数组）-对象"><a href="#Array（数组）-对象" class="headerlink" title="Array（数组） 对象"></a>Array（数组） 对象</h3><h4 id="在线实例-1"><a href="#在线实例-1" class="headerlink" title="在线实例"></a>在线实例</h4><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//合并两个数组,如下输出：Cecilie,Lone,Emil,Tobias,Linus</span><span class="token operator">&lt;</span>script<span class="token operator">></span>  <span class="token keyword">var</span> hege <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"Cecilie"</span><span class="token punctuation">,</span> <span class="token string">"Lone"</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">var</span> stale <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"Emil"</span><span class="token punctuation">,</span> <span class="token string">"Tobias"</span><span class="token punctuation">,</span> <span class="token string">"Linus"</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">var</span>  children <span class="token operator">=</span> hege<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>stale<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">var</span> family <span class="token operator">=</span> parents<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>brothers<span class="token punctuation">,</span>  children<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 合并三个数组，其中brothers,children和parents都是数组</span>  document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>children<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre><h5 id="用数组元素组成字符串"><a href="#用数组元素组成字符串" class="headerlink" title="用数组元素组成字符串"></a>用数组元素组成字符串</h5><pre><code>&lt;script&gt;function myFunction()&#123; var fruits = [&quot;Banana&quot;, &quot;Orange&quot;, &quot;Apple&quot;, &quot;Mango&quot;];    fruits.toString(); // 将数组转换为字符串    fruits.pop(); // 删除最后一个元素    fruits.shift(); // 删除第一个元素    var citrus = fruits.slice(1,3);  // 截取数组下标 1 到 2 的元素，从一个数组中选择元素    fruits.push(&quot;Kiwi&quot;)  // 在数组末尾添加新的元素    fruits.unshift(&quot;Lemon&quot;,&quot;Pineapple&quot;); // 在数组的开头添加新元素    fruits.splice(2,0,&quot;Lemon&quot;,&quot;Kiwi&quot;); // 在第二个位置添加两个元素    fruits.reverse();  //将一个数组中的元素的顺序反转排序 var x=document.getElementById(&quot;demo&quot;); x.innerHTML=fruits.join();&#125;&lt;/script&gt;</code></pre><h5 id="数组排序"><a href="#数组排序" class="headerlink" title="数组排序"></a>数组排序</h5><pre><code>// 按字母升序排序&lt;script&gt;function myFunction()&#123; var fruits = [&quot;Banana&quot;, &quot;Orange&quot;, &quot;Apple&quot;, &quot;Mango&quot;]; fruits.sort(); var x=document.getElementById(&quot;demo&quot;); x.innerHTML=fruits;&#125;&lt;/script&gt;// 按数字升/降序排序&lt;script&gt;function myFunction()&#123; var points = [40,100,1,5,25,10]; points.sort(function(a,b)&#123;return a-b&#125;);  // 升序    points.sort(function(a,b)&#123;return b-a&#125;);  // 降序 var x=document.getElementById(&quot;demo&quot;); x.innerHTML=points;&#125;&lt;/script&gt;</code></pre><h3 id="RegExp-对象"><a href="#RegExp-对象" class="headerlink" title="RegExp 对象"></a>RegExp 对象</h3><h4 id="语法-1"><a href="#语法-1" class="headerlink" title="语法"></a>语法</h4><blockquote><p>var patt=new RegExp(pattern,modifiers); 或</p><p>var patt=/pattern/modifiers;</p><p>如：var patt1 = /runoob/i;</p></blockquote><ul><li>模式描述了一个表达式模型。</li><li>修饰符(modifiers)描述了检索是否是全局，区分大小写等。</li></ul><blockquote><p><strong>注意：</strong>当使用构造函数创造正则对象时，需要常规的字符转义规则（在前面加反斜杠 \）。比如，以下是等价的：</p><pre><code>var re = new RegExp(&quot;\\w+&quot;);var re = /\w+/;</code></pre></blockquote><p>exec() 方法检索字符串中的指定值。返回值是被找到的值。如果没有发现匹配，则返回 null。</p><h4 id="修饰符"><a href="#修饰符" class="headerlink" title="修饰符"></a>修饰符</h4><p>修饰符用于执行区分大小写和全局匹配:</p><table><thead><tr><th>修饰符</th><th>描述</th></tr></thead><tbody><tr><td><a href="https://www.runoob.com/js/jsref-regexp-i.html">i</a></td><td>执行对大小写不敏感的匹配。</td></tr><tr><td><a href="https://www.runoob.com/js/jsref-regexp-g.html">g</a></td><td>执行全局匹配（查找所有匹配而非在找到第一个匹配后停止）。</td></tr><tr><td>m</td><td>执行多行匹配。</td></tr></tbody></table><h4 id="方括号"><a href="#方括号" class="headerlink" title="方括号"></a>方括号</h4><p>方括号用于查找某个范围内的字符：</p><table><thead><tr><th>表达式</th><th>描述</th></tr></thead><tbody><tr><td>[<a href="https://www.runoob.com/jsref/jsref-regexp-charset.html">abc]</a></td><td>查找方括号之间的任何字符。</td></tr><tr><td>[<a href="https://www.runoob.com/jsref/jsref-regexp-charset-not.html">^abc]</a></td><td>查找任何不在方括号之间的字符。</td></tr><tr><td>[0-9]</td><td>查找任何从 0 至 9 的数字。</td></tr><tr><td>[a-z]</td><td>查找任何从小写 a 到小写 z 的字符。</td></tr><tr><td>[A-Z]</td><td>查找任何从大写 A 到大写 Z 的字符。</td></tr><tr><td>[A-z]</td><td>查找任何从大写 A 到小写 z 的字符。</td></tr><tr><td>[adgk]</td><td>查找给定集合内的任何字符。</td></tr><tr><td>[^adgk]</td><td>查找给定集合外的任何字符。</td></tr><tr><td>(red|blue|green)</td><td>查找任何指定的选项。</td></tr></tbody></table><h4 id="元字符"><a href="#元字符" class="headerlink" title="元字符"></a>元字符</h4><p>元字符（Metacharacter）是拥有特殊含义的字符：</p><table><thead><tr><th>元字符</th><th>描述</th></tr></thead><tbody><tr><td><a href="https://www.runoob.com/jsref/jsref-regexp-dot.html">.</a></td><td>查找单个字符，除了换行和行结束符。</td></tr><tr><td><a href="https://www.runoob.com/jsref/jsref-regexp-wordchar.html">\w</a></td><td>查找单词字符。</td></tr><tr><td><a href="https://www.runoob.com/jsref/jsref-regexp-wordchar-non.html">\W</a></td><td>查找非单词字符。</td></tr><tr><td><a href="https://www.runoob.com/jsref/jsref-regexp-digit.html">\d</a></td><td>查找数字。</td></tr><tr><td><a href="https://www.runoob.com/jsref/jsref-regexp-digit-non.html">\D</a></td><td>查找非数字字符。</td></tr><tr><td><a href="https://www.runoob.com/jsref/jsref-regexp-whitespace.html">\s</a></td><td>查找空白字符。</td></tr><tr><td><a href="https://www.runoob.com/jsref/jsref-regexp-whitespace-non.html">\S</a></td><td>查找非空白字符。</td></tr><tr><td><a href="https://www.runoob.com/jsref/jsref-regexp-begin.html">\b</a></td><td>匹配单词边界。</td></tr><tr><td><a href="https://www.runoob.com/jsref/jsref-regexp-begin-not.html">\B</a></td><td>匹配非单词边界。</td></tr><tr><td>\0</td><td>查找 NULL 字符。</td></tr><tr><td><a href="https://www.runoob.com/jsref/jsref-regexp-newline.html">\n</a></td><td>查找换行符。</td></tr><tr><td>\f</td><td>查找换页符。</td></tr><tr><td>\r</td><td>查找回车符。</td></tr><tr><td>\t</td><td>查找制表符。</td></tr><tr><td>\v</td><td>查找垂直制表符。</td></tr><tr><td><a href="https://www.runoob.com/jsref/jsref-regexp-octal.html">\xxx</a></td><td>查找以八进制数 xxx 规定的字符。</td></tr><tr><td><a href="https://www.runoob.com/jsref/jsref-regexp-hex.html">\xdd</a></td><td>查找以十六进制数 dd 规定的字符。</td></tr><tr><td><a href="https://www.runoob.com/jsref/jsref-regexp-unicode-hex.html">\uxxxx</a></td><td>查找以十六进制数 xxxx 规定的 Unicode 字符。</td></tr></tbody></table><h4 id="量词"><a href="#量词" class="headerlink" title="量词"></a>量词</h4><table><thead><tr><th>量词</th><th>描述</th></tr></thead><tbody><tr><td><a href="https://www.runoob.com/jsref/jsref-regexp-onemore.html">n+</a></td><td>匹配任何包含至少一个 n 的字符串。例如，/a+/ 匹配 “candy” 中的 “a”，”caaaaaaandy” 中所有的 “a”。</td></tr><tr><td><a href="https://www.runoob.com/jsref/jsref-regexp-zeromore.html">n*</a></td><td>匹配任何包含零个或多个 n 的字符串。例如，/bo*/ 匹配 “A ghost booooed” 中的 “boooo”，”A bird warbled” 中的 “b”，但是不匹配 “A goat grunted”。</td></tr><tr><td><a href="https://www.runoob.com/jsref/jsref-regexp-zeroone.html">n?</a></td><td>匹配任何包含零个或一个 n 的字符串。例如，/e?le?/ 匹配 “angel” 中的 “el”，”angle” 中的 “le”。</td></tr><tr><td><a href="https://www.runoob.com/jsref/jsref-regexp-nx.html">n{X}</a></td><td>匹配包含 X 个 n 的序列的字符串。例如，/a{2}/ 不匹配 “candy,” 中的 “a”，但是匹配 “caandy,” 中的两个 “a”，且匹配 “caaandy.” 中的前两个 “a”。</td></tr><tr><td><a href="https://www.runoob.com/jsref/jsref-regexp-nxcomma.html">n{X,}</a></td><td>X 是一个正整数。前面的模式 n 连续出现至少 X 次时匹配。例如，/a{2,}/ 不匹配 “candy” 中的 “a”，但是匹配 “caandy” 和 “caaaaaaandy.” 中所有的 “a”。</td></tr><tr><td><a href="https://www.runoob.com/jsref/jsref-regexp-nxy.html">n{X,Y}</a></td><td>X 和 Y 为正整数。前面的模式 n 连续出现至少 X 次，至多 Y 次时匹配。例如，/a{1,3}/ 不匹配 “cndy”，匹配 “candy,” 中的 “a”，”caandy,” 中的两个 “a”，匹配 “caaaaaaandy” 中的前面三个 “a”。注意，当匹配 “caaaaaaandy” 时，即使原始字符串拥有更多的 “a”，匹配项也是 “aaa”。</td></tr><tr><td><a href="https://www.runoob.com/jsref/jsref-regexp-ndollar.html">n$</a></td><td>匹配任何结尾为 n 的字符串。</td></tr><tr><td><a href="https://www.runoob.com/jsref/jsref-regexp-ncaret.html">^n</a></td><td>匹配任何开头为 n 的字符串。</td></tr><tr><td><a href="https://www.runoob.com/jsref/jsref-regexp-nfollow.html">?=n</a></td><td>匹配任何其后紧接指定字符串 n 的字符串。</td></tr><tr><td><a href="https://www.runoob.com/jsref/jsref-regexp-nfollow-not.html">?!n</a></td><td>匹配任何其后没有紧接指定字符串 n 的字符串。</td></tr></tbody></table><h4 id="RegExp-对象方法"><a href="#RegExp-对象方法" class="headerlink" title="RegExp 对象方法"></a>RegExp 对象方法</h4><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td><a href="https://www.runoob.com/jsref/jsref-regexp-compile.html">compile</a></td><td>在 1.5 版本中已废弃。 编译正则表达式。</td></tr><tr><td><a href="https://www.runoob.com/jsref/jsref-exec-regexp.html">exec</a></td><td>检索字符串中指定的值。返回找到的值，并确定其位置。</td></tr><tr><td><a href="https://www.runoob.com/jsref/jsref-test-regexp.html">test</a></td><td>检索字符串中指定的值。返回 true 或 false。</td></tr><tr><td><a href="https://www.runoob.com/jsref/jsref-regexp-tostring.html">toString</a></td><td>返回正则表达式的字符串。</td></tr></tbody></table><h4 id="支持正则表达式的-String-对象的方法"><a href="#支持正则表达式的-String-对象的方法" class="headerlink" title="支持正则表达式的 String 对象的方法"></a>支持正则表达式的 String 对象的方法</h4><table><thead><tr><th>方法</th><th>描述</th><th>FF</th><th>IE</th></tr></thead><tbody><tr><td><a href="https://www.runoob.com/js/jsref-search.html">search</a></td><td>检索与正则表达式相匹配的值。</td><td>1</td><td>4</td></tr><tr><td><a href="https://www.runoob.com/js/jsref-match.html">match</a></td><td>找到一个或多个正则表达式的匹配。</td><td>1</td><td>4</td></tr><tr><td><a href="https://www.runoob.com/js/jsref-replace.html">replace</a></td><td>替换与正则表达式匹配的子串。</td><td>1</td><td>4</td></tr><tr><td><a href="https://www.runoob.com/js/jsref-split.html">split</a></td><td>把字符串分割为字符串数组。</td><td>1</td><td>4</td></tr></tbody></table><hr><h4 id="RegExp-对象属性"><a href="#RegExp-对象属性" class="headerlink" title="RegExp 对象属性"></a>RegExp 对象属性</h4><table><thead><tr><th>属性</th><th>描述</th></tr></thead><tbody><tr><td><a href="https://www.runoob.com/jsref/jsref-regexp-constructor.html">constructor</a></td><td>返回一个函数，该函数是一个创建 RegExp 对象的原型。</td></tr><tr><td><a href="https://www.runoob.com/jsref/jsref-regexp-global.html">global</a></td><td>判断是否设置了 “g” 修饰符</td></tr><tr><td><a href="https://www.runoob.com/jsref/jsref-regexp-ignorecase.html">ignoreCase</a></td><td>判断是否设置了 “i” 修饰符</td></tr><tr><td><a href="https://www.runoob.com/jsref/jsref-lastindex-regexp.html">lastIndex</a></td><td>用于规定下次匹配的起始位置</td></tr><tr><td><a href="https://www.runoob.com/jsref/jsref-multiline-regexp.html">multiline</a></td><td>判断是否设置了 “m” 修饰符</td></tr><tr><td><a href="https://www.runoob.com/jsref/jsref-source-regexp.html">source</a></td><td>返回正则表达式的匹配模式</td></tr></tbody></table><h2 id="Window-浏览器对象模型"><a href="#Window-浏览器对象模型" class="headerlink" title="Window - 浏览器对象模型"></a>Window - 浏览器对象模型</h2><h3 id="Window-Location"><a href="#Window-Location" class="headerlink" title="Window Location"></a>Window Location</h3><p>==window.location 对象用于获得当前页面的地址 (URL)，并把浏览器重定向到新的页面。==</p><p><strong>window.location</strong> 对象在编写时可不使用 window 这个前缀。</p><ul><li>location.hostname 返回 web 主机的域名</li><li>location.pathname 返回当前页面的路径和文件名</li><li>location.port 返回 web 主机的端口 （80 或 443）</li><li>location.protocol 返回所使用的 web 协议（http:// 或 https://）</li></ul><h3 id="Window-History"><a href="#Window-History" class="headerlink" title="Window History"></a>Window History</h3><p>window.history 对象包含浏览器的历史,在编写时可不使用 window 这个前缀。</p><ul><li>history.back() - 与在浏览器点击后退按钮相同，加载历史列表中的前一个 URL。</li><li>history.forward() - 与在浏览器中点击向前按钮相同，加载历史列表中的下一个 URL。</li></ul><h3 id="弹窗"><a href="#弹窗" class="headerlink" title="弹窗"></a>弹窗</h3><p>可以在 JavaScript 中创建三种消息框：警告框、确认框、提示框。</p><h4 id="警告框"><a href="#警告框" class="headerlink" title="警告框"></a>警告框</h4><p>警告框经常用于确保用户可以得到某些信息。当警告框出现后，用户需要点击确定按钮才能继续进行操作。</p><p>window.alert(“<em>sometext</em>“);</p><p><strong>window.alert()</strong> 方法可以不带上 window 对象，直接使用**alert()**方法。</p><h4 id="确认框"><a href="#确认框" class="headerlink" title="确认框"></a>确认框</h4><p>确认框通常用于验证是否接受用户操作。</p><blockquote><p>当确认卡弹出时，用户可以点击 “确认” 或者 “取消” 来确定用户操作。</p><p>当你点击 “确认”, 确认框返回 true， 如果点击 “取消”, 确认框返回 false。</p></blockquote><p><strong>window.confirm()</strong> 方法可以不带上 window 对象，直接使用**confirm()**方法。</p><h4 id="提示框"><a href="#提示框" class="headerlink" title="提示框"></a>提示框</h4><p>提示框经常用于提示用户在进入页面前输入某个值。</p><blockquote><p>当提示框出现后，用户需要输入某个值，然后点击确认或取消按钮才能继续操纵。</p><p>如果用户点击确认，那么返回值为输入的值。如果用户点击取消，那么返回值为 null。</p></blockquote><p>window.prompt(“<em>sometext</em>“,”<em>defaultvalue</em>“);</p><pre><code>&lt;script&gt;function myFunction()&#123; var x; var person=prompt(&quot;请输入你的名字&quot;,&quot;Harry Potter&quot;); if (person!=null &amp;&amp; person!=&quot;&quot;)&#123;     x=&quot;你好 &quot; + person + &quot;! 今天感觉如何?&quot;;     document.getElementById(&quot;demo&quot;).innerHTML=x; &#125;&#125;&lt;/script&gt;</code></pre><h3 id="计时事件"><a href="#计时事件" class="headerlink" title="计时事件"></a>计时事件</h3><ul><li>setInterval() - 间隔指定的毫秒数不停地执行指定的代码。(多次)</li><li>setTimeout() - 在指定的毫秒数后执行指定代码。(一次)</li></ul><p><strong>注意:</strong> setInterval() 和 setTimeout() 是 HTML DOM Window 对象的两个方法。</p><h4 id="setInterval-方法"><a href="#setInterval-方法" class="headerlink" title="setInterval() 方法"></a>setInterval() 方法</h4><p>==setInterval() 间隔指定的毫秒数不停地执行指定的代码==</p><p>window.setInterval(“<em>javascript function</em>“,<em>milliseconds</em>);</p><p><strong>window.setInterval()</strong> 方法可以不使用 window 前缀，直接使用函数 **setInterval()**。</p><blockquote><p>setInterval() 第一个参数是函数（function）。第二个参数间隔的毫秒数。<strong>注意:</strong> 1000 毫秒是一秒。</p></blockquote><pre><code>&lt;p&gt;在页面显示一个时钟&lt;/p&gt;&lt;p id=&quot;demo&quot;&gt;&lt;/p&gt;&lt;script&gt;  var myVar = setInterval(function () &#123;    myTimer();  &#125;, 1000);  function myTimer() &#123;    var d = new Date();    var t = d.toLocaleTimeString();    document.getElementById(&quot;demo&quot;).innerHTML = t;  &#125;&lt;/script&gt;</code></pre><h5 id="clearInterval-方法用于停止-setInterval-方法执行的函数代码"><a href="#clearInterval-方法用于停止-setInterval-方法执行的函数代码" class="headerlink" title="clearInterval() 方法用于停止 setInterval() 方法执行的函数代码"></a>clearInterval() 方法用于停止 setInterval() 方法执行的函数代码</h5><p>window.clearInterval(<em>intervalVariable</em>)</p><p><strong>window.clearInterval()</strong> 方法可以不使用 window 前缀，直接使用函数**clearInterval()**。</p><blockquote><p>要使用 clearInterval() 方法, 在创建计时方法时你必须使用全局变量：</p><p>myVar=setInterval(“<em>javascript function</em>“,<em>milliseconds</em>);</p></blockquote><h4 id="setTimeout-方法"><a href="#setTimeout-方法" class="headerlink" title="setTimeout() 方法"></a>setTimeout() 方法</h4><p>myVar= window.setTimeout(“<em>javascript function</em>“, <em>milliseconds</em>);</p><p>setTimeout() 方法会返回某个值。在上面的语句中，值被储存在名为 myVar 的变量中。假如你希望取消这个 setTimeout()，你可以使用这个变量名来指定它。</p><p>setTimeout() 的第一个参数是含有 JavaScript 语句的字符串。这个语句可能诸如 “alert(‘5 seconds!’)”，或者对函数的调用，诸如 alertMsg。</p><p>第二个参数指示从当前起多少毫秒后执行第一个参数。</p><p>提示：1000 毫秒等于一秒。</p><pre><code>//等待3秒，然后弹出 &quot;Hello&quot;:setTimeout(function () &#123;  alert(&quot;Hello&quot;);&#125;, 3000);</code></pre><h5 id="clearTimeout-方法用于停止执行-setTimeout-方法的函数代码"><a href="#clearTimeout-方法用于停止执行-setTimeout-方法的函数代码" class="headerlink" title="clearTimeout() 方法用于停止执行 setTimeout()方法的函数代码"></a>clearTimeout() 方法用于停止执行 setTimeout()方法的函数代码</h5><p>window.clearTimeout(<em>timeoutVariable</em>)</p><blockquote><p><strong>window.clearTimeout()</strong> 方法可以不使用 window 前缀。</p><p>要使用 clearTimeout() 方法, 你必须在创建超时方法中（setTimeout）使用全局变量:</p><p>myVar=setTimeout(“<em>javascript function</em>“,<em>milliseconds</em>);</p><p>如果函数还未被执行，你可以使用 clearTimeout() 方法来停止执行函数代码。</p></blockquote><h2 id="Cookie"><a href="#Cookie" class="headerlink" title="Cookie"></a>Cookie</h2><p>​ Cookie 是一些数据, 用于存储 web 页面的用户信息，存储于你电脑上的文本文件中。当 web 服务器向浏览器发送 web 页面时，在连接关闭后，服务端不会记录用户的信息。</p><p>Cookie 的作用就是用于解决 “如何记录客户端的用户信息”:</p><ul><li>当用户访问 web 页面时，他的名字可以记录在 cookie 中。</li><li>在用户下一次访问该页面时，可以在 cookie 中读取用户访问记录。</li></ul><p>Cookie 以名/值对形式存储，如: username=John Doe</p><p>当浏览器从服务器上请求 web 页面时， 属于该页面的 cookie 会被添加到该请求中。服务端通过这种方式来获取用户的信息。</p><h3 id="创建-Cookie"><a href="#创建-Cookie" class="headerlink" title="创建 Cookie"></a>创建 Cookie</h3><p>可以使用 <strong>document.cookie</strong> 属性来创建 、读取、及删除 cookie。</p><p>JavaScript 中，创建 cookie 如下所示：</p><blockquote><p>document.cookie=”username=John Doe”;</p></blockquote><p>为 cookie 添加一个过期时间（以 UTC 或 GMT 时间）。默认情况下，cookie 在浏览器关闭时删除：</p><blockquote><p>document.cookie=”username=John Doe; expires=Thu, 18 Dec 2043 12:00:00 GMT”;</p></blockquote><p>使用 path 参数告诉浏览器 cookie 的路径。默认情况下，cookie 属于当前页面。</p><blockquote><p>document.cookie=”username=John Doe; expires=Thu, 18 Dec 2043 12:00:00 GMT; path=/“;</p></blockquote><p><strong>读取 cookie： var x = document.cookie;</strong></p><blockquote><p>document.cookie 将以字符串的方式返回所有的 cookie，类型格式： cookie1=value; cookie2=value; cookie3=value;</p></blockquote><p><strong>修改 cookie 类似于创建 cookie，如下所示：</strong></p><blockquote><p>document.cookie=”username=John Smith; expires=Thu, 18 Dec 2043 12:00:00 GMT; path=/“;</p><p>旧的 cookie 将被覆盖。</p></blockquote><p>删除 cookie 非常简单，只需要设置 expires 参数为以前的时间即可，如下所示，设置为 Thu, 01 Jan 1970 00:00:00 GMT:</p><blockquote><p>document.cookie = “username=; expires=Thu, 01 Jan 1970 00:00:00 GMT”;</p><p>注意，当您删除时不必指定 cookie 的值。</p></blockquote><h3 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h3><p>创建 cookie 来存储访问者名称。</p><p>首先，访问者访问 web 页面, 他将被要求填写自己的名字。该名字会存储在 cookie 中。访问者下一次访问页面时，他会看到一个欢迎的消息。在这个实例中我们会创建 3 个 JavaScript 函数:</p><ol><li>设置 cookie 值的函数</li><li>获取 cookie 值的函数</li><li>检测 cookie 值的函数</li></ol><pre><code>&lt;script&gt;//创建一个函数用于存储访问者的名字，cookie 的名称为 cname，cookie 的值为 cvalue，并设置了 cookie 的过期时间 expires。//该函数设置了 cookie 名、cookie 值、cookie过期时间。function setCookie(cname,cvalue,exdays)&#123; var d = new Date(); d.setTime(d.getTime()+(exdays*24*60*60*1000)); var expires = &quot;expires=&quot;+d.toGMTString(); document.cookie = cname+&quot;=&quot;+cvalue+&quot;; &quot;+expires;&#125;/*创建一个函数用户返回指定 cookie 的值，cookie 名的参数为 cname。创建一个文本变量用于检索指定 cookie :cname + &quot;=&quot;；使用分号来分割 document.cookie 字符串，并将分割后的字符串数组赋值给 ca (ca = document.cookie.split(&#39;;&#39;))。循环 ca 数组 (i=0;i&lt;ca.length;i++)，然后读取数组中的每个值，并去除前后空格 (c=ca[i].trim())。如果找到 cookie(c.indexOf(name) == 0)，返回 cookie 的值 (c.substring(name.length,c.length)。如果没有找到 cookie, 返回 &quot;&quot;。*/function getCookie(cname)&#123; var name = cname + &quot;=&quot;; var ca = document.cookie.split(&#39;;&#39;); for(var i=0; i&lt;ca.length; i++) &#123;  var c = ca[i].trim();  if (c.indexOf(name)==0) &#123; return c.substring(name.length,c.length); &#125; &#125; return &quot;&quot;;&#125;//创建一个检测 cookie 是否创建的函数。如果设置了 cookie，将显示一个问候信息。如果没有设置 cookie，将会显示一个弹窗用于询问访问者的名字，并调用 setCookie 函数将访问者的名字存储 365 天：function checkCookie()&#123; var user=getCookie(&quot;username&quot;); if (user!=&quot;&quot;)&#123;  alert(&quot;欢迎 &quot; + user + &quot; 再次访问&quot;); &#125; else &#123;  user = prompt(&quot;请输入你的名字:&quot;,&quot;&quot;);    if (user!=&quot;&quot; &amp;&amp; user!=null)&#123;      setCookie(&quot;username&quot;,user,30);     &#125; &#125;&#125;&lt;/script&gt;&lt;/head&gt;&lt;body onload=&quot;checkCookie()&quot;&gt;&lt;/body&gt;</code></pre><p>参照：菜鸟教程</p>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>jQuery</title>
      <link href="2020/12/06/jquery/"/>
      <url>2020/12/06/jquery/</url>
      
        <content type="html"><![CDATA[<h1 id="一、简介"><a href="#一、简介" class="headerlink" title="一、简介"></a>一、简介</h1><p>jQuery 库包含以下功能：</p><ul><li>HTML 元素选取</li><li>HTML 元素操作</li><li>CSS 操作</li><li>HTML 事件函数</li><li>JavaScript 特效和动画</li><li>HTML DOM 遍历和修改</li><li>AJAX</li><li>Utilities</li></ul><p><strong>提示：</strong> 除此之外，Jquery 还提供了大量的插件。</p><h2 id="1-语法"><a href="#1-语法" class="headerlink" title="1.语法"></a>1.语法</h2><p>jQuery 语法是通过选取 HTML 元素，并对选取的元素执行某些操作。</p><p>基础语法： <strong>$(selector).action()</strong></p><ul><li>美元符号定义 jQuery</li><li>选择符（selector）”查询”和”查找” HTML 元素</li><li>jQuery 的 action() 执行对元素的操作</li></ul><p>实例:</p><ul><li>$(this).hide() - 隐藏当前元素</li><li>$(“p”).hide() - 隐藏所有 <p> 元素</p></li><li>$(“p.test”).hide() - 隐藏所有 class=”test” 的 <p> 元素</p></li><li>$(“#test”).hide() - 隐藏所有 id=”test” 的元素</li></ul><h3 id="文档就绪事件"><a href="#文档就绪事件" class="headerlink" title="文档就绪事件"></a>文档就绪事件</h3><pre><code>$(document).ready(function()&#123;   // 开始写 jQuery 代码...&#125;);</code></pre><p>这是为了防止文档在完全加载（就绪）之前运行 jQuery 代码，即在 DOM 加载完成后才可以对 DOM 进行操作。如果在文档没有完全加载之前就运行函数，操作可能失败。</p><h2 id="2-jQuery-选择器"><a href="#2-jQuery-选择器" class="headerlink" title="2.jQuery 选择器"></a>2.jQuery 选择器</h2><p>jQuery 选择器可以对 HTML 元素组或单个元素进行操作。</p><p><strong>jQuery 中所有选择器都以美元符号开头：$()。</strong></p><h4 id="元素选择器"><a href="#元素选择器" class="headerlink" title="元素选择器"></a>元素选择器</h4><p>jQuery 元素选择器基于元素名选取元素。</p><p>在页面中选取所有 &lt;p&gt; 元素:$(“p”)</p><h4 id="id-选择器"><a href="#id-选择器" class="headerlink" title="#id 选择器"></a>#id 选择器</h4><p>jQuery #id 选择器通过 HTML 元素的 id 属性选取指定的元素。</p><p>页面中元素的 id 应该是唯一的，所以您要在页面中选取唯一的元素需要通过 #id 选择器。</p><p>通过 id 选取元素语法如下：$(“#test”)</p><h4 id="class-选择器"><a href="#class-选择器" class="headerlink" title=".class 选择器"></a>.class 选择器</h4><p>jQuery 类选择器可以通过指定的 class 查找元素。</p><p>语法如下：$(“.test”)</p><h4 id="更多实例"><a href="#更多实例" class="headerlink" title="更多实例"></a>更多实例</h4><table><thead><tr><th>语法</th><th>描述</th><th>实例</th></tr></thead><tbody><tr><td>$(“*“)</td><td>选取所有元素</td><td><a href="https://www.runoob.com/try/try.php?filename=tryjquery_sel_all2">在线实例</a></td></tr><tr><td>$(this)</td><td>选取当前 HTML 元素</td><td><a href="https://www.runoob.com/try/try.php?filename=tryjquery_sel_this">在线实例</a></td></tr><tr><td>$(“p.intro”)</td><td>选取 class 为 intro 的 &lt;p&gt; 元素</td><td><a href="https://www.runoob.com/try/try.php?filename=tryjquery_sel_pclass">在线实例</a></td></tr><tr><td>$(“p:first”)</td><td>选取第一个 &lt;p&gt; 元素</td><td><a href="https://www.runoob.com/try/try.php?filename=tryjquery_sel_pfirst">在线实例</a></td></tr><tr><td>$(“ul li:first”)</td><td>选取第一个 &lt;ul&gt; 元素的第一个 &lt;li&gt; 元素</td><td><a href="https://www.runoob.com/try/try.php?filename=tryjquery_sel_ullifirst">在线实例</a></td></tr><tr><td>$(“ul li:first-child”)</td><td>选取每个 &lt;ul&gt; 元素的第一个 &lt;li&gt; 元素</td><td><a href="https://www.runoob.com/try/try.php?filename=tryjquery_sel_ullifirstchild">在线实例</a></td></tr><tr><td>$(“[href]”)</td><td>选取带有 href 属性的元素</td><td><a href="https://www.runoob.com/try/try.php?filename=tryjquery_sel_hrefattr">在线实例</a></td></tr><tr><td>$(“a[target=’_blank’]”)</td><td>选取所有 target 属性值等于 “_blank” 的 &lt;a&gt; 元素</td><td><a href="https://www.runoob.com/try/try.php?filename=tryjquery_sel_hrefattrblank">在线实例</a></td></tr><tr><td>$(“a[target!=’_blank’]”)</td><td>选取所有 target 属性值不等于 “_blank” 的 &lt;a&gt; 元素</td><td><a href="https://www.runoob.com/try/try.php?filename=tryjquery_sel_hrefattrnotblank">在线实例</a></td></tr><tr><td>$(“:button”)</td><td>选取所有 type=”button” 的 &lt;input&gt; 元素 和 &lt;button&gt; 元素</td><td><a href="https://www.runoob.com/try/try.php?filename=tryjquery_sel_button2">在线实例</a></td></tr><tr><td>$(“tr:even”)</td><td>选取偶数位置的 &lt;tr&gt; 元素</td><td><a href="https://www.runoob.com/try/try.php?filename=tryjquery_sel_even">在线实例</a></td></tr><tr><td>$(“tr:odd”)</td><td>选取奇数位置的 &lt;tr&gt; 元素</td><td><a href="https://www.runoob.com/try/try.php?filename=tryjquery_sel_odd">在线实例</a></td></tr></tbody></table><h2 id="3-常用的-jQuery-事件方法"><a href="#3-常用的-jQuery-事件方法" class="headerlink" title="3.常用的 jQuery 事件方法"></a>3.常用的 jQuery 事件方法</h2><ul><li>$(document).ready()，在文档完全加载完后执行函数。</li><li>click(),当按钮点击事件被触发时会调用一个函数。</li><li>dblclick()，当双击元素时，会发生 dblclick 事件。</li><li>mouseenter()，当鼠标指针穿过元素时，会发生 mouseenter 事件。</li><li>mouseleave()，当鼠标指针离开元素时，会发生 mouseleave 事件。</li><li>mousedown()，当鼠标指针移动到元素上方，并按下鼠标按键时，会发生 mousedown 事件。</li><li>mouseup()，当在元素上松开鼠标按钮时，会发生 mouseup 事件。</li><li>hover(),用于模拟光标悬停事件，当鼠标移动到元素上时，会触发指定的第一个函数(mouseenter);当鼠标移出这个元素时，会触发指定的第二个函数(mouseleave)。</li><li>focus()，当元素获得焦点时，发生 focus 事件。当通过鼠标点击选中元素或通过 tab 键定位到元素时，该元素就会获得焦点。</li><li>blur()，当元素失去焦点时，发生 blur 事件。</li></ul><h1 id="二、jQuery-效果"><a href="#二、jQuery-效果" class="headerlink" title="二、jQuery 效果"></a>二、jQuery 效果</h1><h2 id="hide-和-show"><a href="#hide-和-show" class="headerlink" title="hide() 和 show()"></a>hide() 和 show()</h2><p>用来隐藏和显示 HTML 元素，</p><blockquote><p>$(<em>selector</em>).hide(<em>speed,callback</em>);</p><p>$(<em>selector</em>).show(<em>speed,callback</em>);</p><p>可选的 speed 参数规定隐藏/显示的速度，可以取以下值：”slow”、”fast” 或毫秒。</p><p>可选的 callback 参数是隐藏或显示完成后所执行的函数名称。</p></blockquote><h2 id="toggle"><a href="#toggle" class="headerlink" title="toggle()"></a>toggle()</h2><p>用来切换 hide() 和 show() 方法，可以隐藏和显示。</p><blockquote><p>$(<em>selector</em>).toggle(<em>speed,callback</em>);</p><p>可选的 speed 参数规定隐藏/显示的速度，可以取以下值：”slow”、”fast” 或毫秒。</p><p>可选的 callback 参数是隐藏或显示完成后所执行的函数名称。</p></blockquote><h2 id="Fading-方法"><a href="#Fading-方法" class="headerlink" title="Fading 方法"></a>Fading 方法</h2><p>fadeIn() 用于淡入已隐藏的元素。</p><blockquote><p>$(<em>selector</em>).fadeIn(<em>speed,callback</em>);</p><p>可选的 speed 参数规定效果的时长。它可以取以下值：”slow”、”fast” 或毫秒。.</p><p>可选的 callback 参数是 fading 完成后所执行的函数名称。</p></blockquote><p>fadeOut() 方法用于淡出可见元素。(语法同上面的)</p><p>fadeToggle() 方法可以在 fadeIn() 与 fadeOut() 方法之间进行切换。(语法同上面的)</p><blockquote><p>如果元素已淡出，则 fadeToggle() 会向元素添加淡入效果。</p><p>如果元素已淡入，则 fadeToggle() 会向元素添加淡出效果。</p></blockquote><p>fadeTo() 方法允许渐变为给定的不透明度（值介于 0 与 1 之间）。</p><blockquote><p>$(<em>selector</em>).fadeTo(<em>speed,opacity,callback</em>);</p><p>必需的 speed 参数规定效果的时长。它可以取以下值：”slow”、”fast” 或毫秒。</p><p>fadeTo() 方法中必需的 opacity 参数将淡入淡出效果设置为给定的不透明度（值介于 0 与 1 之间）。</p><p>可选的 callback 参数是该函数完成后所执行的函数名称。</p></blockquote><h2 id="滑动方法"><a href="#滑动方法" class="headerlink" title="滑动方法"></a>滑动方法</h2><p>slideDown() 方法用于向下滑动元素。</p><blockquote><p>$(<em>selector</em>).slideDown(<em>speed,callback</em>);</p><p>可选的 speed 参数规定效果的时长。它可以取以下值：”slow”、”fast” 或毫秒。</p><p>可选的 callback 参数是滑动完成后所执行的函数名称。</p></blockquote><p>slideUp() 方法用于向上滑动元素。</p><p>slideToggle() 方法可以在 slideDown() 与 slideUp() 方法之间进行切换。</p><blockquote><p>如果元素向下滑动，则 slideToggle() 可向上滑动它们。</p><p>如果元素向上滑动，则 slideToggle() 可向下滑动它们。</p></blockquote><h2 id="动画"><a href="#动画" class="headerlink" title="动画"></a>动画</h2><p>animate() 方法用于创建自定义动画。</p><blockquote><p>$(<em>selector</em>).animate({<em>params</em>}<em>,speed,callback</em>);</p><p>必需的 params 参数定义形成动画的 CSS 属性。</p><p>可选的 speed 参数规定效果的时长。它可以取以下值：”slow”、”fast” 或毫秒。</p><p>可选的 callback 参数是动画完成后所执行的函数名称。</p></blockquote><p><strong>注意：默认情况下，所有 HTML 元素都有一个静态位置，且无法移动。如需对位置进行操作，要记得首先把元素的 CSS position 属性设置为 relative、fixed 或 absolute！</strong></p><p>animate() 方法 操作多个属性</p><pre><code>$(&quot;button&quot;).click(function () &#123;  $(&quot;div&quot;).animate(&#123;    left: &quot;250px&quot;,    opacity: &quot;0.5&quot;, // 透明度    height: &quot;150px&quot;,    width: &quot;150px&quot;,  &#125;);&#125;);</code></pre><blockquote><p><strong>可以用 animate() 方法来操作所有 CSS 属性</strong>，当使用 animate() 时，必须使用 Camel 标记法书写所有的属性名，比如，必须使用 paddingLeft 而不是 padding-left，使用 marginRight 而不是 margin-right，等等。</p><p>如果需要生成颜色动画，您需要从 <a href="http://jquery.com/download/">jquery.com</a> 下载 <a href="http://plugins.jquery.com/color/">颜色动画</a> 插件。</p></blockquote><p>animate() - 使用相对值</p><pre><code>$(&quot;button&quot;).click(function () &#123;  $(&quot;div&quot;).animate(&#123;    left: &quot;250px&quot;,    height: &quot;+=150px&quot;,    width: &quot;+=150px&quot;,  &#125;);&#125;);</code></pre><p>animate() - 使用预定义的值，可以把属性的动画值设置为 “show”、”hide” 或 “toggle”：</p><pre><code>$(&quot;button&quot;).click(function () &#123;  $(&quot;div&quot;).animate(&#123;    height: &quot;toggle&quot;,  &#125;);&#125;);</code></pre><p>animate() - 使用队列功能</p><blockquote><p>默认地，jQuery 提供针对动画的队列功能。</p><p>这意味着如果您在彼此之后编写多个 animate() 调用，jQuery 会创建包含这些方法调用的”内部”队列。然后逐一运行这些 animate 调用。</p></blockquote><pre><code>$(&quot;button&quot;).click(function () &#123;  var div = $(&quot;div&quot;);  div.animate(&#123; height: &quot;300px&quot;, opacity: &quot;0.4&quot; &#125;, &quot;slow&quot;);  div.animate(&#123; width: &quot;300px&quot;, opacity: &quot;0.8&quot; &#125;, &quot;slow&quot;);  div.animate(&#123; height: &quot;100px&quot;, opacity: &quot;0.4&quot; &#125;, &quot;slow&quot;);  div.animate(&#123; width: &quot;100px&quot;, opacity: &quot;0.8&quot; &#125;, &quot;slow&quot;);&#125;);//把 &lt;div&gt; 元素往右边移动了 100 像素，然后增加文本的字号$(&quot;button&quot;).click(function () &#123;  var div = $(&quot;div&quot;);  div.animate(&#123; left: &quot;100px&quot; &#125;, &quot;slow&quot;);  div.animate(&#123; fontSize: &quot;3em&quot; &#125;, &quot;slow&quot;);&#125;);</code></pre><p>stop() 方法用于停止动画或效果，在它们完成之前。</p><blockquote><p>stop() 方法适用于所有 jQuery 效果函数，包括滑动、淡入淡出和自定义动画。</p><p>$(<em>selector</em>).stop(<em>stopAll,goToEnd</em>);</p><p>可选的 stopAll 参数规定是否应该清除动画队列。默认是 false，即仅停止活动的动画，允许任何排入队列的动画向后执行。</p><p>可选的 goToEnd 参数规定是否立即完成当前动画。默认是 false。</p><p>默认地，stop() 会清除在被选元素上指定的当前动画。</p></blockquote><p>Callback 回调函数在当前动画 100% 完成之后执行。</p><pre><code>//在隐藏效果完全实现后回调函数，即在hide之后又有个function$(&quot;button&quot;).click(function () &#123;  $(&quot;p&quot;).hide(&quot;slow&quot;, function () &#123;    alert(&quot;段落现在被隐藏了&quot;);  &#125;);&#125;);</code></pre><h2 id="链-Chaining"><a href="#链-Chaining" class="headerlink" title="链(Chaining)"></a>链(Chaining)</h2><p>Chaining 允许我们在一条语句中运行多个 jQuery 方法（在相同的元素上）。链接（chaining）的技术，允许我们在相同的元素上运行多条 jQuery 命令，一条接着另一条。</p><p><strong>提示：</strong> 这样的话，浏览器就不必多次查找相同的元素。</p><p>如需链接一个动作，您只需简单地把该动作追加到之前的动作上。</p><p>下面的例子把 css()、slideUp() 和 slideDown() 链接在一起。”p1” 元素首先会变为红色，然后向上滑动，再然后向下滑动：</p><pre><code>$(&quot;#p1&quot;).css(&quot;color&quot;, &quot;red&quot;).slideUp(2000).slideDown(2000);</code></pre><h1 id="三、jQuery-HTML"><a href="#三、jQuery-HTML" class="headerlink" title="三、jQuery HTML"></a>三、jQuery HTML</h1><h2 id="获得-设置内容-text-、html-以及-val"><a href="#获得-设置内容-text-、html-以及-val" class="headerlink" title="获得/设置内容 - text()、html() 以及 val()"></a>获得/设置内容 - text()、html() 以及 val()</h2><p>三个简单实用的用于 DOM 操作的 jQuery 方法：</p><ul><li>text() - 设置或返回所选元素的文本内容</li><li>html() - 设置或返回所选元素的内容（包括 HTML 标记，会显示 HTML 相关标签）</li><li>val() - 设置或返回表单字段的值</li></ul><p>设置内容时，只要在函数里面填写对应的内容即可，注意 html()函数要在里面填写对应的 HTML 标签。</p><h2 id="text-、html-以及-val-的回调函数"><a href="#text-、html-以及-val-的回调函数" class="headerlink" title="text()、html() 以及 val() 的回调函数"></a>text()、html() 以及 val() 的回调函数</h2><p>回调函数有两个参数：被选元素列表中当前元素的下标，以及原始（旧的）值。然后以函数新值返回您希望使用的字符串。</p><pre><code>$(&quot;#btn1&quot;).click(function () &#123;  $(&quot;#test1&quot;).text(function (i, origText) &#123;    return &quot;旧文本: &quot; + origText + &quot; 新文本: Hello world! (index: &quot; + i + &quot;)&quot;;  &#125;);&#125;);$(&quot;#btn2&quot;).click(function () &#123;  $(&quot;#test2&quot;).html(function (i, origText) &#123;    return (      &quot;旧 html: &quot; +      origText +      &quot; 新 html: Hello &lt;b&gt;world!&lt;/b&gt; (index: &quot; +      i +      &quot;)&quot;    );  &#125;);&#125;);</code></pre><h2 id="获取-设置属性-attr"><a href="#获取-设置属性-attr" class="headerlink" title="获取/设置属性 - attr()"></a>获取/设置属性 - attr()</h2><pre><code>&lt;script&gt;  $(document).ready(function () &#123;    $(&quot;button&quot;).click(function () &#123;      alert($(&quot;#runoob&quot;).attr(&quot;href&quot;)); //获得链接中 href 属性的值      $(&quot;#runoob&quot;).attr(&quot;href&quot;, &quot;http://www.runoob.com/jquery&quot;); // 设置属性    &#125;);  &#125;);&lt;/script&gt;&lt;body&gt;  &lt;p&gt;&lt;a href=&quot;//www.runoob.com&quot; id=&quot;runoob&quot;&gt;菜鸟教程&lt;/a&gt;&lt;/p&gt;  &lt;button&gt;显示 href 属性的值&lt;/button&gt;&lt;/body&gt;</code></pre><p>attr() 方法也允许您同时设置多个属性：</p><pre><code>$(&quot;button&quot;).click(function () &#123;  $(&quot;#runoob&quot;).attr(&#123;    href: &quot;http://www.runoob.com/jquery&quot;,    title: &quot;jQuery 教程&quot;,  &#125;);&#125;);</code></pre><h3 id="attr-的回调函数"><a href="#attr-的回调函数" class="headerlink" title="attr() 的回调函数"></a>attr() 的回调函数</h3><p>回调函数有两个参数：被选元素列表中当前元素的下标，以及原始（旧的）值。然后以函数新值返回您希望使用的字符串。</p><pre><code>$(&quot;button&quot;).click(function () &#123;  $(&quot;#runoob&quot;).attr(&quot;href&quot;, function (i, origValue) &#123;    return origValue + &quot;/jquery&quot;;  &#125;);&#125;);</code></pre><h2 id="添加元素"><a href="#添加元素" class="headerlink" title="添加元素"></a>添加元素</h2><h3 id="添加新的-HTML-内容"><a href="#添加新的-HTML-内容" class="headerlink" title="添加新的 HTML 内容"></a>添加新的 HTML 内容</h3><p>我们将学习用于添加新内容的四个 jQuery 方法：</p><ul><li>append() - 在被选元素的结尾插入内容</li><li>prepend() - 在被选元素的开头插入内容</li><li>after() - 在被选元素之后插入内容</li><li>before() - 在被选元素之前插入内容</li></ul><pre><code>&lt;script&gt;$(document).ready(function()&#123; $(&quot;#btn1&quot;).click(function()&#123;  $(&quot;p&quot;).append(&quot; &lt;b&gt;追加文本&lt;/b&gt;。&quot;);  $(&quot;p&quot;).prepend(&quot;&lt;b&gt;在开头追加文本&lt;/b&gt;。 &quot;); &#125;); $(&quot;#btn2&quot;).click(function()&#123;  $(&quot;ol&quot;).prepend(&quot;&lt;li&gt;在开头添加列表项&lt;/li&gt;&quot;); &#125;);&#125;);&lt;/script&gt;</code></pre><p>多种方法追加元素：</p><pre><code>&lt;script&gt;function appendText()&#123; var txt1=&quot;&lt;p&gt;文本。&lt;/p&gt;&quot;;              // 使用 HTML 标签创建文本 var txt2=$(&quot;&lt;p&gt;&lt;/p&gt;&quot;).text(&quot;文本。&quot;);  // 使用 jQuery 创建文本 var txt3=document.createElement(&quot;p&quot;); txt3.innerHTML=&quot;文本。&quot;;               // 使用 DOM 创建文本 text with DOM $(&quot;body&quot;).append(txt1,txt2,txt3);        // 追加新元素&#125;&lt;/script&gt;</code></pre><h2 id="删除元素"><a href="#删除元素" class="headerlink" title="删除元素"></a>删除元素</h2><ul><li>remove() - 删除被选元素（及其子元素）</li><li>empty() - 从被选元素中删除子元素</li></ul><h3 id="过滤被删除的元素"><a href="#过滤被删除的元素" class="headerlink" title="过滤被删除的元素"></a>过滤被删除的元素</h3><p>删除 class=”italic” 的所有 &lt;p&gt; 元素：$(“p”).remove(“.italic”);</p><h2 id="获取并设置-CSS-类"><a href="#获取并设置-CSS-类" class="headerlink" title="获取并设置 CSS 类"></a>获取并设置 CSS 类</h2><ul><li>addClass() - 向被选元素添加一个或多个类</li><li>removeClass() - 从被选元素删除一个或多个类</li><li>toggleClass() - 对被选元素进行添加/删除类的切换操作</li><li>css() - 设置或返回样式属性</li></ul><pre><code>&lt;script&gt;$(document).ready(function()&#123;  $(&quot;button&quot;).click(function()&#123;    $(&quot;h1,h2,p&quot;).addClass(&quot;blue&quot;);  // 添加相关的class属性    $(&quot;div&quot;).addClass(&quot;important&quot;);  &#125;);  $(&quot;button&quot;).click(function()&#123;  $(&quot;body div:first&quot;).addClass(&quot;important blue&quot;); &#125;);&#125;);&lt;/script&gt;&lt;style type=&quot;text/css&quot;&gt;.important&#123; font-weight:bold; font-size:xx-large;&#125;.blue&#123; color:blue;&#125;&lt;/style&gt;</code></pre><h2 id="css-方法"><a href="#css-方法" class="headerlink" title="css() 方法"></a>css() 方法</h2><p>css() 方法设置或返回被选元素的一个或多个样式属性。</p><p>css(“<em>propertyname</em>“); 返回指定的 CSS 属性的值</p><p>css(“<em>propertyname</em>“,”<em>value</em>“); 设置指定的 CSS 属性</p><p>css({“<em>propertyname</em>“:”<em>value</em>“,”<em>propertyname</em>“:”<em>value</em>“,…}); 设置多个指定的 CSS 属性</p><h2 id="尺寸"><a href="#尺寸" class="headerlink" title="尺寸"></a>尺寸</h2><p><img src="/images/image-20190512121844324.png" alt="image-20190512121844324"></p><p>jQuery 提供多个处理尺寸的重要方法：</p><ul><li>width() 设置或返回元素的宽度（不包括内边距、边框或外边距）。</li><li>height() 设置或返回元素的高度（不包括内边距、边框或外边距）。</li><li>innerWidth() 返回元素的宽度（包括内边距）。</li><li>innerHeight() 返回元素的高度（包括内边距）。</li><li>outerWidth() 返回元素的宽度（包括内边距和边框）。</li><li>outerHeight() 返回元素的高度（包括内边距和边框）。</li></ul><h1 id="四、遍历"><a href="#四、遍历" class="headerlink" title="四、遍历"></a>四、遍历</h1><p>​ 下图展示了一个家族树。通过 jQuery 遍历，您能够从被选（当前的）元素开始，轻松地在家族树中向上移动（祖先），向下移动（子孙），水平移动（同胞）。这种移动被称为对 DOM 进行遍历。</p><p><img src="/images/img_travtree.png" alt="jQuery Dimensions"></p><ul><li>&lt;div&gt; 元素是 &lt;ul&gt; 的父元素，同时是其中所有内容的祖先。</li><li>&lt;ul&gt; 元素是 &lt;li&gt; 元素的父元素，同时是 &lt;div&gt; 的子元素</li><li>左边的 &lt;li&gt; 元素是 &lt;span&gt; 的父元素，&lt;ul&gt; 的子元素，同时是 &lt;div&gt; 的后代。</li><li>&lt;span&gt; 元素是 &lt;li&gt; 的子元素，同时是 &lt;ul&gt; 和 &lt;div&gt; 的后代。</li><li>两个 &lt;li&gt; 元素是同胞（拥有相同的父元素）。</li><li>右边的 &lt;li&gt; 元素是 &lt;b&gt; 的父元素，&lt;ul&gt; 的子元素，同时是 &lt;div&gt; 的后代。</li><li>&lt;b&gt; 元素是右边的 &lt;li&gt; 的子元素，同时是 &lt;ul&gt; 和 &lt;div&gt; 的后代。</li></ul><blockquote><p>祖先是父、祖父、曾祖父等等。后代是子、孙、曾孙等等。同胞拥有相同的父。</p></blockquote><h2 id="祖先"><a href="#祖先" class="headerlink" title="祖先"></a>祖先</h2><p>向上遍历 DOM 树</p><ul><li><p>parent() 返回被选元素的直接父元素，只会向<strong>上一级</strong>对 DOM 树进行遍历。</p></li><li><p>parents() 返回被选元素的所有祖先元素，它一路向上直到文档的根元素 (&lt;html&gt;)。也可以使用可选参数来过滤对祖先元素的搜索。</p><blockquote><p>如：返回所有 &lt;span&gt; 元素的所有祖先，并且它是 &lt;ul&gt; 元素：$(“span”).parents(“ul”);</p></blockquote></li><li><p>parentsUntil() 返回介于两个给定元素之间的所有祖先元素。</p><blockquote><p>如：返回介于 &lt;span&gt; 与 &lt;div&gt; 元素之间的所有祖先元素：</p><p>$(“span”).parentsUntil(“div”);</p></blockquote></li></ul><h2 id="后代"><a href="#后代" class="headerlink" title="后代"></a>后代</h2><p>后代是子、孙、曾孙等等。</p><ul><li><p>children() 返回被选元素的<strong>所有</strong>直接子元素，只会向<strong>下一级</strong>对 DOM 树进行遍历。也可以使用可选参数来过滤对子元素的搜索。</p><blockquote><p>如：返回类名为 “1” 的所有 &lt;p&gt; 元素，并且它们是 &lt;div&gt; 的直接子元素：</p><p>$(“div”).children(“p.1”);</p></blockquote></li><li><p>find() 返回被选元素的后代元素，一路向下直到最后一个后代。</p><blockquote><p>返回属于 &lt;div&gt; 后代的所有 &lt;span&gt; 元素：$(“div”).find(“span”);</p><p>返回 &lt;div&gt; 的所有后代：$(“div”).find(“*“);</p></blockquote></li></ul><h2 id="同胞-siblings"><a href="#同胞-siblings" class="headerlink" title="同胞(siblings)"></a>同胞(siblings)</h2><p>同胞拥有相同的父元素。</p><h2 id="在-DOM-树中水平遍历"><a href="#在-DOM-树中水平遍历" class="headerlink" title="在 DOM 树中水平遍历"></a>在 DOM 树中水平遍历</h2><ul><li>siblings() 返回被选元素的所有同胞元素，也可以使用可选参数来过滤对同胞元素的搜索。</li><li>next() 返回被选元素的下一个同胞元素,只返回一个元素,即返回同级元素中的下一个。</li><li>nextAll() 返回被选元素的所有跟随的同胞元素，即被选元素下面所有同胞。</li><li>nextUntil() 介于两个给定参数之间的<strong>所有跟随的同胞元素</strong>。</li><li>prev()</li><li>prevAll()</li><li>prevUntil()</li></ul><blockquote><p>后面这三个 prev 方法与上面效果一样，只是方向相反。</p></blockquote><h2 id="过滤"><a href="#过滤" class="headerlink" title="过滤"></a>过滤</h2><p>三个最基本的过滤方法是：**first(), last() 和 eq()**，它们允许您基于其在一组元素中的位置来选择一个特定的元素。</p><p>其他过滤方法，比如 <strong>filter() 和 not()</strong> 允许您选取匹配或不匹配某项指定标准的元素。</p><ul><li><p>first() 方法返回被选元素的首个元素。</p><blockquote><p>选取首个 &lt;div&gt; 元素内部的第一个 &lt;p&gt; 元素：$(“div p”).first();</p></blockquote></li><li><p>last() 方法返回被选元素的最后一个元素。</p></li><li><p>eq() 方法返回被选元素中带有指定索引号的元素。</p><blockquote><p>索引号从 0 开始，因此首个元素的索引号是 0 而不是 1。下面的例子选取第二个 &lt;p&gt; 元素（索引号 1）：$(“p”).eq(1);</p></blockquote></li><li><p>filter() 方法允许规定一个标准，不匹配这个标准的元素会被从集合中删除，匹配的元素会被返回。</p><blockquote><p>返回带有类名 “url” 的所有 &lt;p&gt; 元素：$(“p”).filter(“.url”);</p></blockquote></li><li><p>not() 方法返回不匹配标准的所有元素,not() 方法与 filter() 相反。</p></li></ul><h1 id="五、AJAX"><a href="#五、AJAX" class="headerlink" title="五、AJAX"></a>五、AJAX</h1><h2 id="load"><a href="#load" class="headerlink" title="load()"></a>load()</h2><p>从服务器加载数据，并把返回的数据放入被选元素中。</p><p>语法：$(selector).load(URL,data,callback);</p><p>必需的 <em>URL</em> 参数规定您希望加载的 URL。</p><p>可选的 <em>data</em> 参数规定与请求一同发送的查询字符串键/值对集合。</p><p>可选的 <em>callback</em> 参数是 load() 方法完成后所执行的函数名称。</p><blockquote><p>实例：</p><p>文件**”demo_test.txt”**的内容：</p><pre><code>&lt;h2&gt;jQuery AJAX 是个非常棒的功能！&lt;/h2&gt;&lt;p id=&quot;p1&quot;&gt;这是段落的一些文本。&lt;/p&gt;</code></pre><p>把文件 “demo_test.txt” 的内容加载到指定的 &lt;div&gt; 元素中：$(“#div1”).load(“demo_test.txt”);</p><p>可以把 jQuery 选择器添加到 URL 参数，把 “demo_test.txt” 文件中 id=”p1” 的元素的内容，加载到指定的 &lt;div&gt; 元素中：$(“#div1”).load(“demo_test.txt #p1”);</p></blockquote><p>可选的 callback 参数规定当 load() 方法完成后所要允许的回调函数。回调函数可以设置不同的参数：</p><ul><li><em>responseTxt</em> - 包含调用成功时的结果内容</li><li><em>statusTXT</em> - 包含调用的状态</li><li><em>xhr</em> - 包含 XMLHttpRequest 对象</li></ul><p>在 load() 方法完成后显示一个提示框。如果 load() 方法已成功，则显示”外部内容加载成功！”，而如果失败，则显示错误消息：</p><pre><code>// 先加载，如果加载成功就弹出消息框，然后再更改对应的HTML内容$(&quot;button&quot;).click(function () &#123;  $(&quot;#div1&quot;).load(&quot;demo_test.txt&quot;, function (responseTxt, statusTxt, xhr) &#123;    if (statusTxt == &quot;success&quot;) alert(&quot;外部内容加载成功!&quot;);    if (statusTxt == &quot;error&quot;)      alert(&quot;Error: &quot; + xhr.status + &quot;: &quot; + xhr.statusText);  &#125;);&#125;);</code></pre><h2 id="get-和-post-方法"><a href="#get-和-post-方法" class="headerlink" title="get() 和 post() 方法"></a>get() 和 post() 方法</h2><p>​ <strong>get() 和 post() 方法用于通过 HTTP GET 或 POST 请求从服务器请求数据。</strong></p><p>$.get() 方法通过 HTTP GET 请求从服务器上请求数据。</p><blockquote><p>$.get(<em>URL</em>,<em>callback</em>);</p><p>必需的 <em>URL</em> 参数规定您希望请求的 URL。</p><p>可选的 <em>callback</em> 参数是请求成功后所执行的函数名。</p><p>下面的例子使用 $.get() 方法从服务器上的一个文件中取回数据：</p><pre><code>$(&quot;button&quot;).click(function () &#123;  $.get(&quot;demo_test.php&quot;, function (data, status) &#123;    alert(&quot;数据: &quot; + data + &quot;\n状态: &quot; + status);  &#125;);&#125;);</code></pre><p>$.get() 的第一个参数是我们希望请求的 URL（”demo_test.php”）。</p><p>第二个参数是回调函数。第一个回调参数存有被请求页面的内容，第二个回调参数存有请求的状态。</p></blockquote><p>$.post() 方法通过 HTTP POST 请求向服务器提交数据。</p><blockquote><p>$.post(<em>URL,data,callback</em>);</p><p>必需的 <em>URL</em> 参数规定您希望请求的 URL。</p><p>可选的 <em>data</em> 参数规定连同请求发送的数据。</p><p>可选的 <em>callback</em> 参数是请求成功后所执行的函数名。</p><p>使用 $.post() 连同请求一起发送数据：</p><pre><code>$(&quot;button&quot;).click(function () &#123;  $.post(    &quot;/try/ajax/demo_test_post.php&quot;,    &#123;      name: &quot;菜鸟教程&quot;,      url: &quot;http://www.runoob.com&quot;,    &#125;,    function (data, status) &#123;      alert(&quot;数据: \n&quot; + data + &quot;\n状态: &quot; + status);    &#125;  );&#125;);</code></pre><p>$.post() 的第一个参数是我们希望请求的 URL (“demo_test_post.php”)，接着连同请求（name 和 url）一起发送数据。”demo_test_post.php” 中的 PHP 脚本读取这些参数，对它们进行处理，然后返回结果。</p><p>第三个参数是回调函数。第一个回调参数存有被请求页面的内容，而第二个参数存有请求的状态。</p></blockquote><h1 id="六、noConflict-方法"><a href="#六、noConflict-方法" class="headerlink" title="六、noConflict() 方法"></a>六、noConflict() 方法</h1><p>noConflict() 方法会释放对 $ 标识符的控制，这样其他脚本就可以使用它了。</p><blockquote><p>通过全名替代简写的方式来使用 jQuery：</p><pre><code>$.noConflict();jQuery(document).ready(function () &#123;  jQuery(&quot;button&quot;).click(function () &#123;    jQuery(&quot;p&quot;).text(&quot;jQuery 仍然在工作!&quot;);  &#125;);&#125;);</code></pre><p>以创建自己的简写。noConflict() 可返回对 jQuery 的引用，您可以把它存入变量，以供稍后使用:</p><pre><code>var jq = $.noConflict();jq(document).ready(function () &#123;  jq(&quot;button&quot;).click(function () &#123;    jq(&quot;p&quot;).text(&quot;jQuery 仍然在工作!&quot;);  &#125;);&#125;);</code></pre><p>如果你的 jQuery 代码块使用 $ 简写，并且您不愿意改变这个快捷方式，那么您<strong>可以把 $ 符号作为变量传递给 ready 方法。</strong>这样就可以在函数内使用 $ 符号了 - 而在函数外，依旧不得不使用 “jQuery”：</p><pre><code>$.noConflict();jQuery(document).ready(function ($) &#123;  $(&quot;button&quot;).click(function () &#123;    $(&quot;p&quot;).text(&quot;jQuery 仍然在工作!&quot;);  &#125;);&#125;);</code></pre></blockquote><h1 id="七、jQuery-选择器"><a href="#七、jQuery-选择器" class="headerlink" title="七、jQuery 选择器"></a>七、jQuery 选择器</h1><table><thead><tr><th>选择器</th><th>实例</th><th>选取</th></tr></thead><tbody><tr><td><a href="https://www.runoob.com/jquery/jq-sel-all.html">*</a></td><td>$(“*“)</td><td>所有元素</td></tr><tr><td><a href="https://www.runoob.com/jquery/jq-sel-id.html">#<em>id</em></a></td><td>$(“#lastname”)</td><td>id=”lastname” 的元素</td></tr><tr><td><a href="https://www.runoob.com/jquery/jq-sel-class.html">.<em>class</em></a></td><td>$(“.intro”)</td><td>class=”intro” 的所有元素</td></tr><tr><td><a href="https://www.runoob.com/jquery/sel-multiple-classes.html">.<em>class,</em>.<em>class</em></a></td><td>$(“.intro,.demo”)</td><td>==class 为 “intro” <strong>或</strong> “demo” 的所有元素==</td></tr><tr><td><a href="https://www.runoob.com/jquery/jq-sel-element.html"><em>element</em></a></td><td>$(“p”)</td><td>所有 &lt;p&gt; 元素</td></tr><tr><td><a href="https://www.runoob.com/jquery/sel-multiple-elements.html"><em>el1</em>,<em>el2</em>,<em>el3</em></a></td><td>$(“h1,div,p”)</td><td>所有 &lt;h1&gt;、&lt;div&gt; 和 &lt;p&gt; 元</td></tr><tr><td><a href="https://www.runoob.com/jquery/sel-first.html">:first</a></td><td>$(“p:first”)</td><td>第一个 <p> 元素</p></td></tr><tr><td><a href="https://www.runoob.com/jquery/sel-last.html">:last</a></td><td>$(“p:last”)</td><td>最后一个 <p> 元素</p></td></tr><tr><td><a href="https://www.runoob.com/jquery/sel-even.html">:even</a></td><td>$(“tr:even”)</td><td><strong>:even 选择器</strong>选取带有偶数索引号的每个元素（比如：0、2、4 等等）。所有偶数 &lt;tr&gt; 元素，索引值从 0 开始，第一个元素是偶数 (0)，第二个元素是奇数 (1)，以此类推。</td></tr><tr><td><a href="https://www.runoob.com/jquery/sel-odd.html">:odd</a></td><td>$(“tr:odd”)</td><td><strong>:odd 选择器</strong>选取带有奇数索引号的每个元素（比如：1、3、5 等等）。所有奇数 &lt;tr&gt; 元素，索引值从 0 开始，第一个元素是偶数 (0)，第二个元素是奇数 (1)，以此类推。</td></tr><tr><td><a href="https://www.runoob.com/jquery/jq-sel-firstchild.html">:first-child</a></td><td>$(“p:first-child”)</td><td>属于其父元素的第一个子元素的所有 &lt;p&gt; 元素</td></tr><tr><td><a href="https://www.runoob.com/jquery/sel-firstoftype.html">:first-of-type</a></td><td>$(“p:first-of-type”)</td><td>选取属于其父元素的特定类型的第一个子元素的所有元素。属于其父元素的第一个 &lt;p&gt; 元素的所有 &lt;p&gt; 元素；该选择器与 :nth-of-type(1) 相同。</td></tr><tr><td><a href="https://www.runoob.com/jquery/sel-lastchild.html">:last-child</a></td><td>$(“p:last-child”)</td><td>属于其父元素的最后一个子元素的所有 &lt;p&gt; 元素</td></tr><tr><td><a href="https://www.runoob.com/jquery/sel-lastoftype.html">:last-of-type</a></td><td>$(“p:last-of-type”)</td><td>属于其父元素的最后一个 &lt;p&gt; 元素的所有 &lt;p&gt; 元素</td></tr><tr><td><a href="https://www.runoob.com/jquery/sel-nthchild.html">:nth-child(<em>n</em>)</a></td><td>$(“p:nth-child(2)”)</td><td>属于其父元素的第二个子元素的所有 &lt;p&gt; 元素</td></tr><tr><td><a href="https://www.runoob.com/jquery/sel-nthlastchild.html">:nth-last-child(<em>n</em>)</a></td><td>$(“p:nth-last-child(2)”)</td><td>属于其父元素的第二个子元素的所有 &lt;p&gt; 元素，从最后一个子元素开始计数</td></tr><tr><td><a href="https://www.runoob.com/jquery/sel-nthoftype.html">:nth-of-type(<em>n</em>)</a></td><td>$(“p:nth-of-type(2)”)</td><td>属于其父元素的第二个 &lt;p&gt; 元素的所有 &lt;p&gt; 元素</td></tr><tr><td><a href="https://www.runoob.com/jquery/sel-nthlastoftype.html">:nth-last-of-type(<em>n</em>)</a></td><td>$(“p:nth-last-of-type(2)”)</td><td>属于其父元素的第二个 &lt;p&gt; 元素的所有 &lt;p&gt; 元素，从最后一个子元素开始计数</td></tr><tr><td><a href="https://www.runoob.com/jquery/sel-onlychild.html">:only-child</a></td><td>$(“p:only-child”)</td><td>属于其父元素的唯一子元素的所有 &lt;p&gt; 元素</td></tr><tr><td><a href="https://www.runoob.com/jquery/sel-onlyoftype.html">:only-of-type</a></td><td>$(“p:only-of-type”)</td><td>属于其父元素的特定类型的唯一子元素的所有 &lt;p&gt; 元素</td></tr><tr><td><a href="https://www.runoob.com/jquery/sel-parent-child.html">parent &gt; child</a></td><td>$(“div &gt; p”)</td><td>&lt;div&gt; 元素的直接子元素的所有 &lt;p&gt; 元素</td></tr><tr><td><a href="https://www.runoob.com/jquery/sel-parent-descendant.html">parent descendant</a></td><td>$(“div p”)</td><td>&lt;div&gt; 元素的后代的所有 &lt;p&gt; 元素</td></tr><tr><td><a href="https://www.runoob.com/jquery/sel-previous-next.html">element + next</a></td><td>$(“div + p”)</td><td>每个 &lt;div&gt; 元素相邻的下一个 &lt;p&gt; 元素</td></tr><tr><td><a href="https://www.runoob.com/jquery/sel-previous-siblings.html">element ~ siblings</a></td><td>$(“div ~ p”)</td><td>&lt;div&gt; 元素同级的所有 &lt;p&gt; 元素</td></tr><tr><td><a href="https://www.runoob.com/jquery/sel-eq.html">:eq(<em>index</em>)</a></td><td>$(“ul li:eq(3)”)</td><td>列表中的第四个元素（index 值从 0 开始）</td></tr><tr><td><a href="https://www.runoob.com/jquery/sel-gt.html">:gt(<em>no</em>)</a></td><td>$(“ul li:gt(3)”)</td><td>列举 index 大于 3 的元素</td></tr><tr><td><a href="https://www.runoob.com/jquery/sel-lt.html">:lt(<em>no</em>)</a></td><td>$(“ul li:lt(3)”)</td><td>列举 index 小于 3 的元素</td></tr><tr><td><a href="https://www.runoob.com/jquery/jq-sel-not.html">:not(<em>selector</em>)</a></td><td>$(“input:not(:empty)”)</td><td>所有不为空的输入元素</td></tr><tr><td><a href="https://www.runoob.com/jquery/sel-header.html">:header</a></td><td>$(“:header”)</td><td>所有标题元素 &lt;h1&gt;, &lt;h2&gt; …</td></tr><tr><td><a href="https://www.runoob.com/jquery/sel-animated.html">:animated</a></td><td>$(“:animated”)</td><td>所有动画元素</td></tr><tr><td><a href="https://www.runoob.com/jquery/jq-sel-focus.html">:focus</a></td><td>$(“:focus”)</td><td>当前具有焦点的元素</td></tr><tr><td><a href="https://www.runoob.com/jquery/sel-contains.html">:contains(<em>text</em>)</a></td><td>$(“:contains(‘Hello’)”)</td><td>所有包含文本 “Hello” 的元素</td></tr><tr><td><a href="https://www.runoob.com/jquery/sel-has.html">:has(<em>selector</em>)</a></td><td>$(“div:has(p)”)</td><td>所有包含有 &lt;p&gt; 元素在其内的 &lt;div&gt; 元素</td></tr><tr><td><a href="https://www.runoob.com/jquery/jq-sel-empty.html">:empty</a></td><td>$(“:empty”)</td><td>所有空元素</td></tr><tr><td><a href="https://www.runoob.com/jquery/sel-parent.html">:parent</a></td><td>$(“:parent”)</td><td>匹配所有含有子元素或者文本的父元素。</td></tr><tr><td><a href="https://www.runoob.com/jquery/sel-hidden.html">:hidden</a></td><td>$(“p:hidden”)</td><td>所有隐藏的 &lt;p&gt; 元素</td></tr><tr><td><a href="https://www.runoob.com/jquery/sel-visible.html">:visible</a></td><td>$(“table:visible”)</td><td>所有可见的表格</td></tr><tr><td><a href="https://www.runoob.com/jquery/jq-sel-root.html">:root</a></td><td>$(“:root”)</td><td>文档的根元素</td></tr><tr><td><a href="https://www.runoob.com/jquery/jq-sel-lang.html">:lang(<em>language</em>)</a></td><td>$(“p:lang(de)”)</td><td>所有 lang 属性值为 “de” 的 &lt;p&gt; 元素</td></tr><tr><td>[<a href="https://www.runoob.com/jquery/jq-sel-attribute.html"><em>attribute</em>]</a></td><td>$(“[href]”)</td><td>所有带有 href 属性的元素</td></tr><tr><td>[<a href="https://www.runoob.com/jquery/sel-attribute-equal-value.html"><em>attribute</em>=<em>value</em>]</a></td><td>$(“[href=’default.htm’]”)</td><td>所有带有 href 属性且值等于 “default.htm” 的元素</td></tr><tr><td>[<a href="https://www.runoob.com/jquery/sel-attribute-notequal-value.html"><em>attribute</em>!=<em>value</em>]</a></td><td>$(“[href!=’default.htm’]”)</td><td>所有带有 href 属性且值不等于 “default.htm” 的元素</td></tr><tr><td>[<a href="https://www.runoob.com/jquery/sel-attribute-end-value.html"><em>attribute</em>$=<em>value</em>]</a></td><td>$(“[href$=’.jpg’]”)</td><td>所有带有 href 属性且值以 “.jpg” 结尾的元素</td></tr><tr><td>[<a href="https://www.runoob.com/jquery/sel-attribute-prefix-value.html"><em>attribute</em>|=<em>value</em>]</a></td><td>$(“[title|=’Tomorrow’]”)</td><td>所有带有 title 属性且值等于 ‘Tomorrow’ 或者以 ‘Tomorrow’ 后跟连接符作为开头的字符串</td></tr><tr><td>[<a href="https://www.runoob.com/jquery/sel-attribute-beginning-value.html"><em>attribute</em>^=<em>value</em>]</a></td><td>$(“[title^=’Tom’]”)</td><td>所有带有 title 属性且值以 “Tom” 开头的元素</td></tr><tr><td>[<a href="https://www.runoob.com/jquery/sel-attribute-contains-value.html"><em>attribute</em>~=<em>value</em>]</a></td><td>$(“[title~=’hello’]”)</td><td>所有带有 title 属性且值包含单词 “hello” 的元素</td></tr><tr><td>[<a href="https://www.runoob.com/jquery/sel-attribute-contains-string-value.html">*attribute**=<em>value</em>]</a></td><td>$(“[title*=’hello’]”)</td><td>所有带有 title 属性且值包含字符串 “hello” 的元素</td></tr><tr><td>[<a href="https://www.runoob.com/jquery/sel-multipleattribute-equal-value.html"><em>name</em>=<em>value</em>][<em>name2</em>=<em>value2</em>]</a></td><td>$( “input[id][name$=’man’]” )</td><td>带有 id 属性，并且 name 属性以 man 结尾的输入框</td></tr><tr><td><a href="https://www.runoob.com/jquery/sel-input.html">:input</a></td><td>$(“:input”)</td><td>所有 input 元素</td></tr><tr><td><a href="https://www.runoob.com/jquery/sel-input-text.html">:text</a></td><td>$(“:text”)</td><td>所有带有 type=”text” 的 input 元素</td></tr><tr><td><a href="https://www.runoob.com/jquery/sel-input-password.html">:password</a></td><td>$(“:password”)</td><td>所有带有 type=”password” 的 input 元素</td></tr><tr><td><a href="https://www.runoob.com/jquery/sel-input-radio.html">:radio</a></td><td>$(“:radio”)</td><td>所有带有 type=”radio” 的 input 元素</td></tr><tr><td><a href="https://www.runoob.com/jquery/sel-input-checkbox.html">:checkbox</a></td><td>$(“:checkbox”)</td><td>所有带有 type=”checkbox” 的 input 元素</td></tr><tr><td><a href="https://www.runoob.com/jquery/sel-input-submit.html">:submit</a></td><td>$(“:submit”)</td><td>所有带有 type=”submit” 的 input 元素</td></tr><tr><td><a href="https://www.runoob.com/jquery/sel-input-reset.html">:reset</a></td><td>$(“:reset”)</td><td>所有带有 type=”reset” 的 input 元素</td></tr><tr><td><a href="https://www.runoob.com/jquery/sel-input-button.html">:button</a></td><td>$(“:button”)</td><td>所有带有 type=”button” 的 input 元素</td></tr><tr><td><a href="https://www.runoob.com/jquery/sel-input-image.html">:image</a></td><td>$(“:image”)</td><td>所有带有 type=”image” 的 input 元素</td></tr><tr><td><a href="https://www.runoob.com/jquery/sel-input-file.html">:file</a></td><td>$(“:file”)</td><td>所有带有 type=”file” 的 input 元素</td></tr><tr><td><a href="https://www.runoob.com/jquery/sel-input-enabled.html">:enabled</a></td><td>$(“:enabled”)</td><td>所有启用的元素</td></tr><tr><td><a href="https://www.runoob.com/jquery/sel-input-disabled.html">:disabled</a></td><td>$(“:disabled”)</td><td>所有禁用的元素</td></tr><tr><td><a href="https://www.runoob.com/jquery/sel-input-selected.html">:selected</a></td><td>$(“:selected”)</td><td>所有选定的下拉列表元素</td></tr><tr><td><a href="https://www.runoob.com/jquery/sel-input-checked.html">:checked</a></td><td>$(“:checked”)</td><td>所有选中的复选框选项</td></tr><tr><td>.selector</td><td>$(selector).selector</td><td>在 jQuery 1.7 中已经不被赞成使用。返回传给 jQuery()的原始选择器</td></tr><tr><td><a href="https://www.runoob.com/jquery/jq-sel-target.html">:target</a></td><td>$( “p:target” )</td><td>选择器将选中 ID 和 URI 中一个格式化的标识符相匹配的<p>元素</p></td></tr></tbody></table><h1 id="八、插件"><a href="#八、插件" class="headerlink" title="八、插件"></a>八、插件</h1><p>菜鸟教程&lt;<a href="https://www.runoob.com/jquery/jquery-plugin-validate.html&gt;">https://www.runoob.com/jquery/jquery-plugin-validate.html&gt;</a></p><p>参照：菜鸟教程</p>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> jQuery </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git</title>
      <link href="2020/12/06/git/"/>
      <url>2020/12/06/git/</url>
      
        <content type="html"><![CDATA[<p><img src="https://learningpics.oss-cn-shenzhen.aliyuncs.com/images/37923f2478edc5709b36562b26c9e008.png" alt="脑图"></p><h1 id="一、基础"><a href="#一、基础" class="headerlink" title="一、基础"></a>一、基础</h1><h2 id="1-常用命令"><a href="#1-常用命令" class="headerlink" title="1.常用命令"></a>1.常用命令</h2><p><img src="https://learningpics.oss-cn-shenzhen.aliyuncs.com/images/3054153c1904dfd5f3b9d3fbc6bf2375.jpeg" alt="Git å¸¸ç¨å½ä&quot;¤"></p><ul><li><p><code>git init</code>：创建 Git 库。</p><ul><li><code>git status</code> ：查看当前仓库的状态。</li></ul></li><li><p><code>git show</code> ：# 显示某次提交的内容 git show $id</p></li><li><p><code>git diff</code> ：查看本次修改与上次修改的内容的区别。</p></li><li><p><code>git add &lt;file&gt;</code> ：把现在所要添加的文件放到暂存区中。</p><ul><li><p><code>git log -p &lt;file&gt;</code> ：查看每次详细修改内容的 diff 。</p></li><li><p><code>git rm &lt;file&gt;</code> ：从版本库中删除文件。</p></li><li><p><code>git reset &lt;file&gt;</code> ：从暂存区恢复到工作文件。</p></li><li><p><code>git reset HEAD^</code> ：恢复最近一次提交过的状态，即放弃上次提交后的所有本次修改` 。</p><blockquote><p>HEAD 本身是一個游标，它通常會指向某一个本地端分支或是其它 commit，所以你也可以把 HEAD 当做是目前所在的分支（current branch）。 可参见 <a href="https://juejin.im/entry/59a38c5d6fb9a0248e5cc884">《Git 中 HEAD 是什么东西》</a> 。</p></blockquote></li></ul></li><li><p><code>git commit</code> ：把 Git add 到暂存区的内容提交到代码区中。</p></li><li><p><code>git clone</code> ：从远程仓库拷贝代码到本地。</p></li><li><p>git branch：查看当前的分支名称。</p><ul><li><code>git branch -r</code> ：查看远程分支。</li></ul></li><li><p><code>git checkout</code> ：切换分支。</p></li><li><p><code>git merge &lt;branch&gt;</code> ：将 branch 分支合并到当前分支。</p></li><li><p>git stash：暂存。</p><ul><li><code>git stash pop</code> ：恢复最近一次的暂存。</li></ul></li><li><p>git pull：抓取远程仓库所有分支更新并合并到本地。</p><ul><li><code>git push origin master</code> ：将本地主分支推到远程主分支。</li></ul></li></ul><p><img src="https://learningpics.oss-cn-shenzhen.aliyuncs.com/images/033f8d41d6f67a01a7cfefa6b9aa4cf4.png" alt="整体流程"></p><p>​ IDEA Git 插件越来越强大，很多时候，我们日常使用 Git ，更多使用它。具体的教程，可以看看 <a href="https://blog.csdn.net/huangfan322/article/details/53220060">《IntelliJ IDEA 下的使用 git》</a></p><p>Git 仓库由三个组成部分：</p><ul><li>工作区(Working Directory)：在 Git 管理下的正常目录都算是工作区，我们平时的编辑工作都是在工作区完成。</li><li>暂存区(Stage)：临时区域。里面存放将要提交文件的快照。</li><li>历史记录区(History)：<code>git commit</code> 后的记录区。</li></ul><p>然后，是这三个区的转换关系以及转换所使用的命令：<img src="https://learningpics.oss-cn-shenzhen.aliyuncs.com/images/2135c3721109d120d0bde7f2ac0a1faa.png" alt="三个区的转换关系"></p><p><code>git add</code> 和 <code>git stage</code> ：</p><ul><li><strong>其实，他们两是同义的</strong>，因为要跟 <code>svn add</code> 区分，两者的功能是完全不一样的，svn add 是将某个文件加入版本控制，而 git add 则是把某个文件加入暂存区。</li><li>因为在 Git 出来之前大家用 SVN 比较多，所以为了避免误导，Git 引入了 <code>git stage</code> ，然后把 <code>git diff --staged</code> 做为 <code>git diff --cached</code> 的相同命令。基于这个原因，建议使用 <code>git stage</code> 以及 <code>git diff --staged</code> 。</li></ul><h2 id="2-Git-和-Svn-的比较"><a href="#2-Git-和-Svn-的比较" class="headerlink" title="2.Git 和 Svn 的比较"></a>2.Git 和 Svn 的比较</h2><p>Git 是分布式版本控制系统，SVN 是集中式版本控制系统。</p><p>1）SVN 的优缺点</p><ul><li>优点<ul><li>1、管理方便，逻辑明确，符合一般人思维习惯。</li><li>2、易于管理，集中式服务器更能保证安全性。</li><li>3、代码一致性非常高。</li><li>4、适合开发人数不多的项目开发。</li></ul></li><li>缺点<ul><li>1、服务器压力太大，数据库容量暴增。</li><li>2、如果不能连接到服务器上，基本上不可以工作，因为 SVN 是集中式服务器，如果服务器不能连接上，就不能提交，还原，对比等等。</li><li>3、不适合开源开发（开发人数非常非常多，但是 Google App Engine 就是用 SVN 的）。但是一般集中式管理的有非常明确的权限管理机制（例如分支访问限制），可以实现分层管理，从而很好的解决开发人数众多的问题。</li></ul></li></ul><p>2）Git 优缺点</p><ul><li>优点<ul><li>1、适合分布式开发，强调个体。</li><li>2、公共服务器压力和数据量都不会太大。</li><li>3、速度快、灵活。</li><li>4、任意两个开发者之间可以很容易的解决冲突。</li><li>5、离线工作。</li></ul></li><li>缺点<ul><li>1、学习周期相对而言比较长。</li><li>2、不符合常规思维。</li><li>3、代码保密性差，一旦开发者把整个库克隆下来就可以完全公开所有代码和版本信息。</li></ul></li></ul><p>所以，很多公司的开发团队使用 Git 作为版本管理，而产品团队使用 SVN 。</p><h2 id="3-常用操作"><a href="#3-常用操作" class="headerlink" title="3.常用操作"></a>3.常用操作</h2><h3 id="创建分支步骤"><a href="#创建分支步骤" class="headerlink" title="创建分支步骤"></a>创建分支步骤</h3><ul><li>1、<code>git branch xxx_dev</code> ：创建名字为 <code>xxx_dev</code> 的分支。</li><li>2、<code>git checkout xxx_dev</code> ：切换到名字为 <code>xxx_dev</code> 的分支。</li><li>3、<code>git push origin xxx_dev</code> ：执行推送的操作，完成本地分支向远程分支的同步。</li></ul><p>更详细的，可以看看 <a href="https://blog.csdn.net/top_code/article/details/51931916">《Github 创建新分支》</a> 文章。</p><h3 id="tag"><a href="#tag" class="headerlink" title="tag"></a>tag</h3><p>tag ，指向一次 commit 的 id ，通常用来给分支做一个标记。</p><ul><li>打标签 ：<code>git tag -a v1.01 -m &quot;Release version 1.01&quot;</code> 。</li><li>提交标签到远程仓库 ：<code>git push origin --tags</code> 。</li><li>查看标签 ：<code>git tag</code> 。</li><li>查看某两次 tag 之间的 commit ：<code>git log --pretty=oneline tagA..tagB</code> 。</li><li>查看某次 tag 之后的 commit ：<code>git log --pretty=oneline tagA..</code> 。</li></ul><p>修改<strong>提交时写错的 commit 信息</strong>，可以通过 <code>git commit --amend</code> 来对本次 commit 进行修改。</p><h3 id="如何从-Git-中删除文件，而不将其从文件系统中删除？"><a href="#如何从-Git-中删除文件，而不将其从文件系统中删除？" class="headerlink" title="如何从 Git 中删除文件，而不将其从文件系统中删除？"></a><strong>如何从 Git 中删除文件，而不将其从文件系统中删除？</strong></h3><p>​ 如果你在 <code>git add</code> 过程中误操作，你最终会添加不想提交的文件。但是，<code>git rm</code> 则会把你的文件从你暂存区（索引）和文件系统（工作树）中删除，这可能不是你想要的。</p><p>换成 <code>git reset</code> 操作：</p><pre><code>git reset filename          # orecho filename &gt;&gt; .gitingore # add it to .gitignore to avoid re-adding it</code></pre><ul><li>上面意思是，<code>git reset &lt;file&gt;</code> 是 <code>git add &lt;file&gt;</code> 的逆操作。</li></ul><h3 id="merge-和-rebase-的区别"><a href="#merge-和-rebase-的区别" class="headerlink" title="merge 和 rebase 的区别"></a>merge 和 rebase 的区别</h3><p>Git 合并的两种方法。</p><ul><li><code>git merge</code> ，把本地代码和已经取得的远程仓库代码合并。</li><li><code>git rebase</code> ，是复位基底的意思。</li></ul><p><code>git merge</code> 会生成一个新的节点，之前的提交会分开显示；而 <code>git rebase</code> 操作不会生成新的操作，将两个分支融合成一个线性的提交。</p><p>推荐看看 <a href="https://www.jianshu.com/p/f23f72251abc">《git rebase 和 git merge 的区别》</a> 和 <a href="https://blog.csdn.net/zhangyulin54321/article/details/79996768">《git merge 和 git rebase 的区别》</a>。</p><h3 id="rebase-和-merge-命令"><a href="#rebase-和-merge-命令" class="headerlink" title="rebase 和 merge 命令"></a>rebase 和 merge 命令</h3><p>这两个命令都是把修改从一个分支集成到另一个分支上，它们只是以非常不同的方式进行。</p><ul><li><p>考虑一下场景，在合并和变基前：</p><pre><code>A &lt;- B &lt;- C    [master]^ \  D &lt;- E       [branch]</code></pre></li><li><p>在 <code>git merge master</code> 之后：</p><pre><code>A &lt;- B &lt;- C^         ^ \         \  D &lt;- E &lt;- F</code></pre></li><li><p>在 <code>git rebase master</code> 之后：</p><pre><code>A &lt;- B &lt;- C &lt;- D &lt;- E</code></pre></li></ul><p>使用变基时，意味着使用另一个分支作为集成修改的新基础。</p><ul><li>何时使用：<ul><li>如果你对修改不够果断，请使用合并操作。</li><li>根据你希望的历史记录的样子，而选择使用变基或合并操作。</li></ul></li><li>更多需要考虑的因素：<ul><li>分支是否与团队外部的开发人员共享修改（如开源、公开项目）？如果是这样，请不要使用变基操作。变基会破坏分支，除非他们使用 <code>git pull --rebase</code> ，否则这些开发人员将会得到损坏的或不一致的仓库。</li><li>你的开发团队技术是否足够娴熟？变基是一种破坏性操作。这意味着，如果你没有正确使用它，你可能会丢失提交，并且/或者会破坏其他开发者仓库的一致性。</li><li>分支本身是否代表有用的信息？一些团队使用功能分支（branch-per-feature）模式，每个分支代表一个功能（或错误修复，或子功能等）。在此模式中，分支有助于识别相关提交的集合。在每个开发人员分支（branch-per-developer）模式中，分支本身不会传达任何其他信息（提交信息已有作者）。则在这种模式下，变基不会有任何破坏。</li><li>是否无论如何都要还原合并？恢复（如在撤销中）变基，是相当困难的，并且/或者在变基中存在冲突时，是不可能完成的。如果你考虑到日后可能需要恢复，请使用合并操作。</li></ul></li></ul><h3 id="reset-与-rebase-的区别"><a href="#reset-与-rebase-的区别" class="headerlink" title="reset 与 rebase 的区别"></a><strong>reset 与 rebase 的区别</strong></h3><ul><li>reset 操作，不修改 commit 相关的东西，只会去修改 <code>.git</code> 目录下的东西。</li><li>rebase 操作，会试图修改你已经 commit 的东西，比如覆盖 commit 的历史等，但是不能使用 rebase 来修改已经 push 过的内容，容易出现兼容性问题。rebase 还可以来解决内容的冲突，解决两个人修改了同一份内容，然后失败的问题。</li></ul><p>推荐看看 <a href="https://codeday.me/bug/20171012/84739.html">《“git reset”和“git rebase”有什么区别？》</a> 。</p><h3 id="reset-与-revert-与-checkout-的区别"><a href="#reset-与-revert-与-checkout-的区别" class="headerlink" title="reset 与 revert 与 checkout 的区别"></a><strong>reset 与 revert 与 checkout 的区别</strong></h3><p><strong>首先是它们的共同点：用来撤销代码仓库中的某些更改。</strong></p><p>然后是不同点：</p><ul><li><p>1）从 commit 层面来说：</p><ul><li><p><code>git reset</code> ，可以将一个分支的末端指向之前的一个 commit 。然后再下次 Git 执行垃圾回收的时候，会把这个 commit 之后的 commit 都扔掉。<code>git reset</code> 还支持三种标记，用来标记 reset 指令影响的范围：</p><ul><li><p><code>--mixed</code> ：会影响到暂存区和历史记录区。也是默认选项；</p></li><li><p><code>--soft</code> ：只影响历史记录区；</p></li><li><p><code>--hard</code>：影响工作区、暂存区和历史记录区。</p><blockquote><p>注意：因为 <code>git reset</code> 是直接删除 commit 记录，从而会影响到其他开发人员的分支，所以不要在公共分支（比如 develop）做这个操作。</p></blockquote></li></ul></li><li><p><code>git checkout</code> ，可以将 HEAD 移到一个新的分支，并更新工作目录。因为可能会覆盖本地的修改，所以执行这个指令之前，你需要 stash 或者 commit 暂存区和工作区的更改。</p></li><li><p><code>git revert</code> ，和 <code>git reset</code> 的目的是一样的，但是做法不同，它会以创建新的 commit 的方式来撤销 commit ，这样能保留之前的 commit 历史，比较安全。另外，同样因为可能会覆盖本地的修改，所以执行这个指令之前，你需要 stash 或者 commit 暂存区和工作区的更改。</p></li></ul></li><li><p>2）从文件层面来说</p><ul><li><code>git reset</code> ，只是把文件从历史记录区拿到暂存区，不影响工作区的内容，而且不支持 <code>--mixed</code>、<code>--soft</code> 和 <code>--hard</code> 。</li><li><code>git checkout</code> ，则是把文件从历史记录拿到工作区，不影响暂存区的内容。</li><li><code>git revert</code> ，不支持文件层面的操作。</li></ul></li></ul><p>总的来说，回答关键点：</p><ul><li>对于 commit 层面和文件层面，这三个指令本身功能差别很大。</li><li><code>git revert</code> 不支持文件层面的操作。</li><li>不要在公共分支做 <code>git reset</code> 操作。</li></ul><h3 id="git-reset-–hard-指令把提交理掉了，怎么办"><a href="#git-reset-–hard-指令把提交理掉了，怎么办" class="headerlink" title="git reset –hard 指令把提交理掉了，怎么办"></a><strong>git reset –hard 指令把提交理掉了，怎么办</strong></h3><p>​ 基本上东西进了 Git 就不容易消失，它們只是以一种我们肉眼看不懂的格式存放在 Git 空间裡。我们可以透過 <code>git reflog</code> 指令去翻一下被 reset 的那個 Commit 的编号值，然後再做一次 <code>git reset --hard</code> 就可以把它救回來了。</p><h3 id="Git-解决代码冲突"><a href="#Git-解决代码冲突" class="headerlink" title="Git 解决代码冲突"></a>Git 解决代码冲突</h3><pre><code>git stashgit pullgit stash pop</code></pre><blockquote><p>最常用。</p></blockquote><ul><li>这个操作就是把自己修改的代码隐藏，然后把远程仓库的代码拉下来，然后把自己隐藏的修改的代码释放出来，让 Git 自动合并。</li></ul><pre><code>git reset –hardgit pull</code></pre><p><strong>假如你现在的分支为 main_dev，并在这个分支上修复了一个 Bug ，但是在 main_zh_test 分支也发现了同样的一个 Bug ，如果不用 copy 代码的方式，你如何把 main_dev 修复这个 Bug 提交的代码合并到 main_zh_test 分支上，请贴出你的 Git 操作指令和指令的含义?</strong></p><blockquote><p>假设合并时没有冲突</p></blockquote><ul><li>1、在 <code>main_dev</code> 分支上，通过 gitlog 命令，使用 bugid 搜索提交的 commit id 。</li><li>2、使用 <code>git checkout main_zh_test</code> 命令，切换到 <code>main_zh_test</code> 分支。</li><li>3、使用 <code>git cherry-pick commitid</code> 将对 Bug 的修改批量移植到该分支上。</li><li>4、<code>git commit</code> ，提交到本地。</li><li>5、<code>git push</code> ，推送到远程仓库。</li></ul><p>所以，重心在于 cherry-pick 使用，参见 <a href="https://www.jianshu.com/p/08c3f1804b36">《git cherry-pick 使用指南》</a> 文章。</p><p><strong>如果你正在某个分支进行开发，突然要忙于别的事，如何处理</strong></p><ul><li>一种是直接先 <code>git commit</code> ，等要处理的问题解決後再回來這個分支，再 <code>git reset</code> 把 Commit 拆开來继续接著做。</li><li>另一种做法，則是使用 <code>git stash</code> 指令，先把目前的进度存在 stash 上，等任务結束后可以再使用 <code>git stash pop</code> 或 <code>git stash apply</code> 把当时的及大怒再拿出來。</li></ul><h3 id="pull-与-fetch-的区别"><a href="#pull-与-fetch-的区别" class="headerlink" title="pull 与 fetch 的区别"></a>pull 与 fetch 的区别</h3><pre><code>pull = fetch + merge</code></pre><ul><li>使用 <code>git fetch</code> 是取回远端更新，不会对本地执行 merge 操作，不会去动你的本地的内容。</li><li>而是用 git pull 会更新你本地代码到服务器上对应分支的最新版本。</li><li>如果要代码库的文件完全覆盖本地版本。</li></ul><h2 id="fork"><a href="#fork" class="headerlink" title="fork"></a>fork</h2><p>​ <strong>fork 是对一个仓库的克隆。克隆一个仓库允许你自由试验各种改变，而不影响原始的项目。</strong></p><p>​ 一般来说，fork 被用于去更改别人的项目（贡献代码给已经开源的项目）或者使用别人的项目作为你自己想法的初始开发点。</p><blockquote><p>使用 fork 提出改变的一个很好的例子是漏洞修复。与其记录一个你发现的问题，不如：</p><ul><li>fork 这个仓库</li><li>进行修复</li><li>向这个项目的拥有者提交一个 pull requset</li></ul><p>如果这个项目的拥有者认同你的成果，他们可能会将你的修复更新到原始的仓库中！</p></blockquote><ul><li>目前很多开源项目，采用 fork + pull request 的方式，实现新功能的开发，Code Review 等等。</li></ul><h3 id="fork-和-clone-的区别"><a href="#fork-和-clone-的区别" class="headerlink" title="fork 和 clone 的区别"></a><strong>fork 和 clone 的区别</strong></h3><p>​ Clone ，不是 Fork ，克隆是个对某个远程仓库的本地拷贝。克隆时，实际上是拷贝整个源存储仓库，包括所有历史记录和分支。</p><h3 id="Fork-和-Branch-的区别"><a href="#Fork-和-Branch-的区别" class="headerlink" title="Fork 和 Branch 的区别"></a><strong>Fork 和 Branch 的区别</strong></h3><p>Branch ，是一种机制，用于处理单一存储仓库中的变更，并最终目的是用于与其他部分代码合并。</p><h3 id="Git-服务器"><a href="#Git-服务器" class="headerlink" title="Git 服务器"></a>Git 服务器</h3><p>Git 服务器的选择，实际上是比较多的。</p><ul><li><p>公有服务方案</p><ul><li>Github</li><li>Gitee</li></ul></li><li><p>私有化部署方案</p><ul><li><p>GitLab</p></li><li><p>Gogs</p></li><li><p>Bitbucket</p><blockquote><p>注意，Gitlab 和 Bitbucket 也提供公有服务的方案。</p></blockquote></li></ul></li></ul><p>一般情况下，大多数公司使用 GitLab 作为 Git 服务器。</p><blockquote><p>GitLab 是一个利用 <a href="http://www.oschina.net/p/ruby+on+rails">Ruby on Rails</a> 开发的开源应用程序，实现一个自托管的<a href="http://www.oschina.net/p/git">Git</a>项目仓库，可通过 Web 界面进行访问公开的或者私人项目。</p><p>它拥有与<a href="http://www.oschina.net/p/github">Github</a>类似的功能，能够浏览源代码，管理缺陷和注释。可以管理团队对仓库的访问，它非常易于浏览提交过的版本并提供一个文件历史库。它还提供一个代码片段收集功能可以轻松实现代码复用，便于日后有需要的时候进行查找。</p></blockquote><ul><li>不过因为 GitLb 使用 Ruby on Rails 实现，所以占用的系统资源会比较多。</li></ul><h2 id="4-Git-工作流"><a href="#4-Git-工作流" class="headerlink" title="4.Git 工作流"></a>4.Git 工作流</h2><p>Git 因为其灵活性，所以提供了多种工作流的方式：</p><ol><li>集中式工作流。</li><li>功能分支工作流。</li><li>Gitflow 工作流</li></ol><h3 id="Git-集中式工作流"><a href="#Git-集中式工作流" class="headerlink" title="Git 集中式工作流"></a>Git 集中式工作流</h3><p>参见 <a href="http://blog.jobbole.com/76847/">《Git 工作流指南：集中式工作流》</a> 文章。</p><h3 id="Git-功能分支工作流"><a href="#Git-功能分支工作流" class="headerlink" title="Git 功能分支工作流"></a>Git 功能分支工作流</h3><p>参见 <a href="http://blog.jobbole.com/76857/">《Git 工作流指南：功能分支工作流》</a> 文章。</p><h3 id="Gitflow-工作流"><a href="#Gitflow-工作流" class="headerlink" title="Gitflow 工作流"></a>Gitflow 工作流</h3><p>参见 <a href="http://blog.jobbole.com/76867/">《Git 工作流指南：Gitflow 工作流》</a> 文章。</p><ul><li>两个长期维护分支<ul><li>主分支(master)</li><li>开发分支(develop)</li></ul></li><li>三种短期分支<ul><li>功能分支(feature branch)</li><li>补丁分支(hotfix branch)</li><li>预发分支(release branch)</li></ul></li></ul><h5 id="GitFlow-的优势"><a href="#GitFlow-的优势" class="headerlink" title="GitFlow 的优势"></a>GitFlow 的优势</h5><ul><li>1、并行开发：GitFlow 可以很方便的实现并行开发：每个新功能都会建立一个新的 feature 分支，从而和已经完成的功能隔离开来，而且只有在新功能完成开发的情况下，其对应的 feature 分支才会合并到主开发分支上（也就是我们经常说的 develop 分支）。另外，如果你正在开发某个功能，同时又有一个新的功能需要开发，你只需要提交当前 feature 的代码，然后创建另外一个 feature 分支并完成新功能开发。然后再切回之前的 feature 分支即可继续完成之前功能的开发。</li><li>2、协作开发：GitFlow 还支持多人协同开发，因为每个 feature 分支上改动的代码都只是为了让某个新的 feature 可以独立运行。同时我们也很容易知道每个人都在干啥。</li><li>3、发布阶段：当一个新 feature 开发完成的时候，它会被合并到 develop 分支，这个分支主要用来暂时保存那些还没有发布的内容，所以如果需要再开发新的 feature，我们只需要从 develop 分支创建新分支，即可包含所有已经完成的 feature 。</li><li>4、支持紧急修复：GitFlow 还包含了 hotfix 分支。这种类型的分支是从某个已经发布的 tag 上创建出来并做一个紧急的修复，而且这个紧急修复只影响这个已经发布的 tag，而不会影响到你正在开发的新 feature 。</li></ul><h2 id="5-Forking-工作流程"><a href="#5-Forking-工作流程" class="headerlink" title="5.Forking 工作流程"></a>5.Forking 工作流程</h2><p><strong>Forking 工作流程</strong>，与其他流行的 Git 工作流程有着根本的区别。它不是用单个服务端仓库充当“中央”代码库，而是为每个开发者提供自己的服务端仓库。Forking 工作流程最常用于公共开源项目中。</p><ul><li>Forking 工作流程的<strong>主要优点</strong>是可以汇集提交贡献，又无需每个开发者提交到一个中央仓库中，从而实现干净的项目历史记录。开发者可以推送（push）代码到自己的服务端仓库，而只有项目维护人员才能直接推送（push）代码到官方仓库中。</li><li>当开发者准备发布本地提交时，他们的提交会推送到自己的公共仓库中，而不是官方仓库。然后他们向主仓库提交请求拉取（pull request），这会告知项目维护人员有可以集成的更新。</li></ul><p>当然，这并不是说 Forking 工作流程和上述的工作流是冲突的关系，而是可以相互结合。目前，很多公司都采用 <strong>Gitflow 工作流 + Forking 工作流程结合</strong>的方式。原因如下：</p><ul><li><p>1、对于主仓库，读权限是所有开发人员都有，但是写权限是只有部分“管理”开发人员有，从而对主仓库的统一管理。</p><blockquote><p>😈 如果不酱紫，主仓库岂不是可以被各种乱改。</p></blockquote></li><li><p>2、所有开发人员，提交代码到自己的服务端仓库，通过 pull request 到主仓库。这样，“管理”开发人员就可以对代码进行 Code Review ，保证代码质量。</p></li></ul><h2 id="6-PR-和-MR-的区别"><a href="#6-PR-和-MR-的区别" class="headerlink" title="6.PR 和 MR 的区别"></a>6.PR 和 MR 的区别</h2><p>PR 和 MR 的全称分别是 pull request 和 merge request。</p><p>解释它们两者的区别之前，我们需要先了解一下 Code Review，因为 PR 和 MR 的引入正是为了进行 Code Review。</p><ul><li>Code Review 是指在开发过程中，对代码的系统性检查。通常的目的是查找系统缺陷，保证代码质量和提高开发者自身水平。 Code Review 是轻量级代码评审，相对于正式代码评审，轻量级代码评审所需要的各种成本要明显低的多，如果流程正确，它可以起到更加积极的效果。</li><li>进行 Code Review 的原因：<ul><li>提高代码质量</li><li>及早发现潜在缺陷与 BUG ，降低事故成本。</li><li>促进团队内部知识共享，提高团队整体水平</li><li>评审过程对于评审人员来说，也是一种思路重构的过程，帮助更多的人理解系统。</li></ul></li></ul><p>然后我们需要了解下 fork 和 branch ，因为这是 PR 和 MR 各自所属的协作流程。</p><ul><li><strong>fork</strong> 是 git 上的一个协作流程。通俗来说就是把别人的仓库备份到自己仓库，修修改改，然后再把修改的东西提交给对方审核，对方同意后，就可以实现帮别人改代码的小目标了。fork 包含了两个流程：<ul><li>fork 并更新某个仓库 <img src="https://learningpics.oss-cn-shenzhen.aliyuncs.com/images/6227935e023affd4e0a339ccd197c8a6.png" alt="img"></li><li>同步 fork <img src="https://learningpics.oss-cn-shenzhen.aliyuncs.com/images/a87e005d714e9fd3b8da23c3b20c4fff.png" alt="img"></li></ul></li><li>和 fork 不同，<strong>branch</strong> 并不涉及其他的仓库，操作都在当前仓库完成。<img src="https://learningpics.oss-cn-shenzhen.aliyuncs.com/images/7200ee4a67dad8b11387fab7abef9f76.png" alt="img"></li></ul><p>考察关键点：</p><ul><li>Code review；</li><li>PR 和 MR 所属流程的细节。</li></ul><p>回答关键点：</p><ul><li>回答这个问题的时候不要单单只说它们的区别。而是要从 PR 和 MR 产生的原因，分析它们所属的流程，然后再得出两者的区别。</li></ul><p>参考与推荐如下文章：</p><ul><li><p><a href="https://gitbook.tw/interview">《Git 面試題》</a></p><blockquote><p>读者写的非常棒，即使不准备面试，也可以看看，作为平时使用 Git 一些场景下的解决方案。</p></blockquote></li><li><p><a href="https://blog.csdn.net/qq_26768741/article/details/66975516">《面试当中的 Git 问题》</a></p></li><li><p><a href="https://www.breakyizhan.com/git/5035.html">《Git 的常见问题以及面试题汇总》</a></p></li><li><p><a href="http://blog.jobbole.com/114297/">《泪流满面的 11 个 Git 面试题》</a></p></li><li><p><a href="http://www.cocoachina.com/ios/20171023/20873.html">《面试中的那些 Git 问题 - 基础部分》</a></p></li><li><p>芋道源码</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>有趣的注释</title>
      <link href="2020/12/05/you-qu-de-zhu-shi/"/>
      <url>2020/12/05/you-qu-de-zhu-shi/</url>
      
        <content type="html"><![CDATA[<pre><code>// ----------------------------------------------------------------------------------------// 1. 在我变身之前快跑吧/*                                                MMMMMMM                                                    .MMMMMMMMH                                                      .MMMMMMMMMMM                                                        MMMMMMMMMMMM&#39;                                                         &#39;MMMMMMMMMMMMM                                                           MMMMMMMMMMMMMMM                                                            MMMMMMMMMMMMMMMM.                                                             .MMMMMMMMMMMMMMMMH          H                                                              MMMMMMMMMMMMMMMMMM          M                                                               :MMMMMMMMMMMMMMMMMM         M                                                               :MMMMMMMMMMMMMMMMMMMM        M                                                                .MMMMMMMMMMMMMMMMMMMMM       M                                                                 MMMMMMMMMMMMMMMMMMMMMM:      M                                                                 MMMMMMMMMMMMMMMMMMMMMMMM      M                                                                  HMMMMMMMMMMMMMMMMMMMMMMM     HM                                                                  MMMMMMMMMMMMMMMMMMMMMMMMM     .I                                                                   MMMMMMMMMMMMMMMMMMMMMMMMM     M                                                                   &#39;MMMMMMMMMMMMMMMMMMMMMMMMM&#39;    M                                                                    MMMMMMMMMMMMMMMMMMMMMMMMMM.    M                                                                    MMMMMMMMMMMMMMMMMMMMMMMMMMMH   MM                                                                    :MMMMMMMMMMMMMMMMMMMMMMMMMMMM   M                                                                     MMMMMMMMMMMMMMMMMMMMMMMMMMMM.   M                                                                     MMMMMMMMMMMMMMMMMMMMMMMMMMMMMM   M                ..MMMMMMMMMMMMMMMMMMMMMMMMMMM:M.                     :MMMMMMMMMMMMMMMMMMMMMMMMMMMMM:  H      MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMH                MMMMMMMMMMMMMMMMMMMMMMMMMMMMMM   M   MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM            MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM   M    MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM         MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM  M       MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM&#39;      MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM. &#39;.          MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM    &#39;MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM&#39; M            HMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM.&#39;&#39;MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM.M               MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM&#39;MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM&#39;M                IMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM:M                  MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM                    .MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM&#39;                      MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM&#39;                        MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM                         MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM                           .MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM                                            H&#39;                    :                            HMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM                                       MH                    :MM                             :MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM                                   MM.                  MMMMM                               MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM                                M:                MMMMMMMM.                                MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM                           :M             &#39;MMMMMMMMMMMM                                 MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM                        MM           MMMMMMMMMMMMMMM                                  .MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM                     MM       MMMMMMMMMMMMMMMMMMM                                   .MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM.                 MM    MMMMMMMMMMMMMMMMMMMMMM                  MMMMMM             HMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM               MM  MMMMMMMMMMMMMMMMMMMMMMMM                        MMMM.         MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM            MMMMMMMMMMMMMMMMMMMMMMMMMMMM                            MMM&#39;       MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM&#39;        MMMMMMMMMMMMMMMMMMMMMMMMMMMMM                              MMMM      MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM    MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM                                MMMM    MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM:                                  MMMM   MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM                                    MMM  HMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMH               MMMMMMMMM:            .MM  MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM                 MMMMMMMMMMMMMMMMMMH   MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM                     MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM&#39;MMMMMMMMMMMMMMMMMM.H&#39;MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM                        MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM MMMMMMMM&#39;MMMMMMMMMMMMMMMMMMO&#39;&#39;MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM&#39;                           MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM MMMMMMMM&#39;&#39;MMMMMMMMMMMMMMMMM.&#39;&#39;MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM&#39;                             MMMMMMMMMMMMMMMMMMMMMMMMMMMMMM: MMMMMM.&#39;&#39; MMMMMMMMMMMMMMMMM&#39;&#39;&#39;MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM.                               MMMMMMMMMMMMMMMMMMMMMMMMMMMMM&#39; MMMMMM&#39;&#39;&#39;:MMMMMMMMMMMMMM&#39;M&#39;&#39;&#39;MMMMMMMMMMMMMMMM&#39;MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM                                 .MMMMMMMMMMMMMMMMMMMMMMMMMMMM MMMMM&#39;&#39;&#39;&#39;MMMMMMMMMMMMMM&#39;&#39;&#39;&#39;&#39;MMMMMMMMMMMMMMM&#39;&#39;&#39;MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM                                   IMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM&#39;&#39;&#39;&#39;&#39;MMMMMMMMMMMMM.&#39;&#39;&#39;&#39;&#39;MMMMMMMMMMMMM&#39;&#39;&#39;&#39;MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM.                                     MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM&#39;&#39;&#39;&#39;&#39;MMMMMMMMMMMMM&#39;&#39;&#39;&#39;&#39;&#39;MMMMMMMMMMMMM&#39;&#39;M&#39;MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM                                       MMMMMMMMMMMMMMMMMMMMMMMMMM&#39;MMM&#39;&#39;&#39;&#39;&#39;MMMMMMMMMMMM&#39;&#39;M&#39;&#39;&#39;&#39;MMMMMMMMMMM&#39;&#39;&#39;M&#39;MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM           .MMMMMMMMMMMMMMMM&#39;                                        MMMMMMMMMMMMMMMMMM&#39;MMMMMMM&#39;MMM&#39;&#39;&#39;&#39;&#39;MMMMMMMMMMMH&#39;M&#39;&#39;&#39;&#39;MMMMMMMMMMM&#39;&#39;&#39;M&#39;MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM&#39;    MMMMMM                                         &#39;MMMMMMMMMMM&#39;&#39;&#39;MM&#39;&#39;&#39;MMMMM&#39;&#39;.M.&#39;&#39;&#39;&#39;&#39;MMMMMMMMMMM&#39;M&#39;&#39;&#39;&#39;&#39;MMMMMMMMM&#39;&#39;&#39;&#39;:&#39;MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMH&#39;&#39;                                           .MMMMMMMMM&#39;MM&#39;&#39;M&#39;&#39;&#39;&#39;MMMM &#39;&#39;M&#39;&#39;&#39;&#39;&#39;&#39;MMMMMMMMMM&#39;M&#39;&#39;&#39;&#39;&#39;MMMMMMMMM&#39;&#39;&#39;&#39;&#39;M.MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM&#39;.:                                             MMMMMMMM.&#39;&#39;&#39;MM&#39;&#39;&#39;&#39;&#39;&#39;MMMM&#39;&#39;M&#39;&#39;&#39;&#39;&#39;&#39;&#39;MMMMMMMM&#39;&#39; &#39;&#39;&#39;&#39;&#39;MMMMMMMMM&#39;&#39;&#39;&#39;M&#39;MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM&#39;                                              MMMMMMM.&#39;&#39;&#39;&#39;MM&#39;&#39;&#39;M&#39;&#39;&#39;MM&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;MMMMMMM&#39;M&#39;&#39;&#39;MMMMMMMMMM:&#39;&#39;&#39;&#39;M&#39;MMMMMMMMMMMM&#39;&#39;&#39;&#39;&#39;MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM:M&#39;                                               MMMMMM  &#39;.M&#39;M&#39;&#39;&#39;M&#39;&#39;&#39;&#39;MM&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;MMMMMM&#39;M&#39;MMMMMMMMMM&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;M&#39;MMMMMMMMMM&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM                                                MMMMM&#39;M&#39;M&#39;&#39;M&#39;&#39;&#39;M&#39;&#39;&#39;&#39;&#39;MMM&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;MMMM&#39;MMMMMMMMMMM&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;M&#39;M MM&#39;&#39;MMM&#39;&#39;&#39;MM&#39;::&#39;&#39;MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM                                      .MMM&#39;      MMMM:&#39;&#39;M&#39;&#39;&#39;&#39;&#39;&#39;M&#39;&#39;&#39;&#39;&#39;MMMM&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;MMMMMMMMMMMMMMMM&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;M&#39;MM&#39;&#39;MM&#39;&#39;&#39;M&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM                                    &#39;MMMMMMMMMMMMMMMMM&#39;&#39;&#39;M.MM&#39;&#39;M&#39;&#39;&#39;&#39;&#39;MMMMM&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;MMMMMMMMMMMM&#39;&#39;M&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;MM&#39;&#39;&#39;&#39;&#39;&#39;MM&#39;&#39;&#39;&#39;&#39;M&#39;&#39;MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM                                          MMMMMMMMMMMM&#39;&#39;HMM&#39;M&#39;&#39;&#39;M&#39;&#39;&#39;&#39;MMMMMMM&#39;&#39;&#39;&#39;&#39;&#39;&#39;.MMMMMMMMMMMMM&#39;&#39;&#39;M.&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;MM&#39;&#39;&#39;&#39;&#39;MM&#39;&#39;M&#39;&#39;&#39;&#39;.&#39;MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM                                            &#39;MMMMMMMMMM&#39;&#39;MMMM&#39;&#39;&#39;&#39;M&#39;&#39;&#39;&#39;MMMMMMM&#39;&#39;&#39;&#39;MMMMMMM&#39;&#39;&#39;&#39;&#39;M.&#39;&#39;&#39;&#39;&#39;&#39;M&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;MM&#39;&#39;&#39;&#39;M&#39;M&#39;&#39;&#39;M&#39;&#39;&#39;M&#39;MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM                                               MMMMMMMM &#39;MMMM&#39;&#39;&#39;&#39; M&#39;&#39;&#39;&#39;MM&#39;MM .&#39;&#39;&#39;MMMMH&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;M&#39;&#39;&#39;&#39;&#39;M MM:&#39;&#39;&#39;&#39;&#39;M&#39;MMMMMMMMMMMMMMMMMMMMMMMMMMM:&#39;                                                 MMMMMMM&#39;&#39;H&#39;M&#39;&#39;&#39;&#39;&#39;&#39;M.&#39;&#39;&#39;&#39;&#39;&#39;&#39;:&#39;&#39;&#39;&#39;M:M&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;MM&#39;&#39;&#39;&#39;&#39;M&#39;&#39;M&#39;MMMMMMMMMMMMMMMMMMMMMMMM                                                    MMMMM&#39;&#39;MM&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;M&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;MMHM&#39;&#39;&#39;M&#39;:&#39;MMMMMMMMMMMMMMMMMMMMMH                                                      MMMMM&#39;M&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;HMMM&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;M&#39;&#39;M&#39;&#39;&#39;M&#39;&#39;&#39;MMMMMMMMMMMMMMMMM:                                                        MMMMM&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;.&#39;&#39;M&#39;&#39;&#39;MMMMMMMMMMMMMM                                                           M&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;:MM&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;M&#39;&#39;M&#39;&#39;MMMMMMMMMMMM                                                           M&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;M&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;M&#39;&#39;MMMMMMMMMM                                                          M&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;MMM&#39;&#39;&#39;M&#39;&#39;&#39;&#39;&#39;MMMMMMMM                                                           M&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;HM&#39;.M&#39;&#39;&#39;&#39;&#39;&#39;MMMMMMMMMMMMMMMMMMMMMMMM                                                            M&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;H&#39;&#39;&#39;MM:&#39;&#39;&#39;&#39;&#39;&#39;MMMMMMMMMMMMMMMMMMMMMMMMMMMM                                                             HM&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;OMM:&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;MMMMMMMMMMMMMMMMMMM&#39;                                                               M:&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;HMMMM&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;MMMM.&#39;&#39;&#39;&#39;&#39;MMMMMMMMMMMMM M                                                                .M&#39;&#39;&#39;&#39;&#39;&#39;MMO::::M&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;MMMMMMMMMMMMMMMMMM.                                                                  MM&#39;&#39;&#39;&#39;MMMHIHMM&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;MMMMMMMMMMMMMMM                                                                   MM&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;MMMMMMMMMMMMMMMMMM:                                                                     M&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;MMMMMMMMMMMMMMMMMMMMM                                                                      M &#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;MMMMM&#39;&#39;&#39;MMMMM                                                                       MM&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;.MMMMM&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;MMM                                                                        MMM&#39;&#39;&#39;&#39;&#39;&#39;MMMMMM&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;MM                                                                        M&#39;MMMMMMM&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;MM                                                                        H&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;M                                                                       :&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;M                                                                  &#39;    M&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;:M                                                                 MM:::MM&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;MMM       MMMMH    H&#39;MMMMMM:HM                                                                MH::MMM&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;MMMM&#39;MH::::::::::::::::::::M.                                                         MMMMMHMH::M:MM&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;MM:::::::::::::::IMM&#39;:MM::M                                                     MMM::::::M::HM&#39;:M&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;.MH::::::::::::::MM&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;:MM                                                MMMH:::::::::M::MM&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;MM::::::::::::::M&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;:M                                            HMMM:::::::::::MM::::M&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;:MHMMMMMMMMMM&#39;&#39;.MM:::::::::::::MI&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;MM                                           M::::::::::::::MM:::::MMM&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;HMMM&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;MM::::::::::::::M&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;MM                                            M:::::::::::::M:::::::MMMM:&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;MM&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;MM:::::::::::::::MM&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;MM                                            M::::::::::::::::::::::M&#39;&#39;&#39;M&#39;&#39;&#39;&#39;&#39;&#39;&#39;M&#39;&#39;&#39;M&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;MM:::::::::::::::::M&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;MM                                           MH:::H::::::::::::::::::M&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;..&#39;::&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;:MM:::::::::::::::::::M&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;M                                          M:&#39;:::M:::::::::::::::::::M&#39;&#39;&#39;&#39;&#39;&#39;MMM:&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;MMH:::::::::::::::::::::M&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;M                                         M&#39;&#39;&#39;M::M::::H:::::::::::::::O&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;MMMM:::::::::::::::::::::::::M&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;M                                        &#39;.&#39;&#39;&#39;M:M:::::M:::::::::::::::H&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;MM:::::::::::::::::::::::::::::M&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;M                                       &#39;M&#39;&#39;&#39;&#39;.HM::::::M:::H:::::::::::H&#39;&#39;&#39;M&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;MMM::::::::::::::::::::::::::::::::M&#39;&#39;&#39;&#39;&#39;.&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;M                                       M&#39;&#39;&#39;&#39;&#39;&#39;M::::::::::::M:::::::::::M&#39;&#39;M&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;MMH:::::::::::::::::::::::::::::::::::MM&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;M&#39;                                      M&#39;&#39;&#39;&#39;&#39;&#39;&#39;M::::::::M::::H::::::::::::&#39;H&#39;&#39;&#39;&#39;&#39;&#39;MM::::::::::::::::::::::::::::::::::::::MM&#39;&#39;&#39;H:&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;MHM                                      &#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;M:::::::::M:::::::::::::::MM &#39;&#39;&#39;&#39;M:::::::::::::::::::::::::::H:::::::::::::OM&#39;&#39;&#39;M&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;M&#39;HM                                     &#39;M&#39;&#39;&#39;&#39;&#39;&#39;H:::::::::::MM::::M:::::::::M&#39;&#39;M::::::::::::::::::::::::::::.::::::::::::::::M&#39;&#39;MM&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;M                                      M&#39;&#39;&#39;&#39;&#39;&#39;M:::::::::::MMM:::::::::::::HM::::::::::::::::::::::::::::M::::::::::::::::::MM.MM&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;MM                                      M&#39;&#39;&#39;&#39;&#39;&#39;M::::::::::::MMH::::::::::::::::::::::::::::::::::::::::MH:::::::::::::::::::M:MMM&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;H&#39;                                      H:&#39;&#39;&#39;&#39;&#39;H:::::::::::::MMM::::::::::::::::::::::::::::::::::::::M:::::::::::::::::::::::::M&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;M                                      M&#39;&#39;&#39;&#39;&#39;M:::::::::::::::HMM:::::::::::::::::::::::::::::::::::M::::::::::::::M::::::::::::MO&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;M                                      M&#39;&#39;&#39;&#39;&#39;M::::::::::::::::::M:::::::::::::::::::::::::::::::HMM:::::::::::::::::M::::::::::MM&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;:M                                      M&#39;&#39;&#39;&#39;&#39;M::::::::::::::::::::::::::::::::::::::::::::HMH::::::::::::::::::::M::::M::::::::MM&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;.&#39;                                     M.&#39;&#39;&#39;&#39;.::::::::::::::::::::::::::::::::::::::::HM::::::::::::::::::::::::::::M:::MH:::::::M&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;M                                     M&#39;&#39;&#39;&#39;&#39;M::::::::::::::::::::::::::::::::::::MM::::::::::::::::::::::::::::::::::M:::MM:::::M&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;:                                    .M&#39;&#39;&#39;&#39;&#39;M::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::M::::MM:MM&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;M                                    M&#39;&#39;&#39;&#39;&#39;&#39;M::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::M:::::HM&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;M                                   &#39;M&#39;&#39;&#39;&#39;&#39;.H:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::MM::IM&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;M                                   M&#39;&#39;&#39;&#39;&#39;&#39;M:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::HMMMM&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;MM                                   M&#39;&#39;&#39;&#39;&#39;&#39;M:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::MMM M&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;MM                                   M&#39;&#39;&#39;&#39;&#39;.H::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::MM   :M&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;M                                  M.&#39;&#39;&#39;&#39;&#39;M::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::HM     M&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;M                                  M&#39;&#39;&#39;&#39;&#39;&#39;M::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::M      &#39;M&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;.&#39;                                  M&#39;&#39;&#39;&#39;&#39;&#39;M:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::M::      .M&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;M                                 M&#39;&#39;&#39;&#39;&#39;&#39;&#39;MMI::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::H::M         M&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;M.                                 M&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;MM:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::M:::M          &#39;M&#39;M&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;M.                                 M.&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;MM::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::M::::M            M:M&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;MM                                  M&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;MM:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::M             HM&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;MM                                  M.&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;M:::::::::::::::::MMMMM::MM::::::::::::::::::::::::::::::::::::::::::::MM               M.&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;MM                                  &#39;M&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;MM::::::::::::OMM &#39;  M   MM:HooperMMMMMI:::::::::::::::::::::::::::MM                 MM&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;OM                                  M&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;MMMMMMMMM&#39;     M MM M   M .M                   &#39;::&#39;H:HMMMMM:::::MM.                   ::&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;M                                  :&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;MM           M  H  &#39;  MM   M :&#39;...H                        &#39;MMH                      M:&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;M                                 M&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;MMM      HMM: M    M  MMMM     MMM.&#39;                          M                       MM&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;M:                                &#39;M&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;MMMMO      MM  M   .M MMH   M                                M                      MM&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;.M                                M:&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;MM:           HH    M:  MM   M&#39;                              M                       .M&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;M                                M&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;MM       MMM  M  M   :   M:  I:::::::::MOHMMMM&#39;             M                         MM&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;M&#39;                                M&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;:MHMO:::::  &#39;:HMM:H:M   .M   M:::::::::M::::::::::M::IMMM M                           MM&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;MM                                M&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;M::::::::M  O  :::::M:   M   M::::::::::M::::::::::M:::::HM                            MM&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;:M                                M&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;:M::::::::H  M H::::::M   M   M:::::::::::M:::::::::HM:::::MM                            MM&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;M                                M&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;M::::::::M   M M::::::M   MO  &#39;:::::::::::MM:::::::::M:::::::M                            MM&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;MM                                M&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;M:::::::::M  H  M::::::M    M   M:::::::::::M::::::::::H::::::MM                            MM&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;MMMMMMMMMMMMMMMMMM                                HM&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;HM:::::::::   M  M::::::M    M   M::::::::::::M:::::::::M:::::::M                             M&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39; MMMMMMMMMMMMMMMMMMMM                                 MMMMMMMMMMMMMMMMMMM:::::::::M   M  H::::::M    M   M::::::::::::H:::::::::M:::::::MM                             M&#39;&#39;&#39;&#39;&#39;&#39;HMMMMMMMMMMMMMMMMMMMMMMM                                HMMMMMMMMMMMMMMMMMMM:::::::::   M&#39;  M:::::::         M::::::::::::M:::::::::::::::::M                              M&#39;&#39;&#39;&#39;MMMMMMMMMMMMMMMMMMMMMMMMM                                 MMMMMMMMMMMMMMMMMM:::::::::M   M   ::::::::M    .   M:::::::::::::M::::::::::::::::.M                              M&#39;MMMMMMMMMMMMMMMMMMMMMMMMMMM.                                 MMMMMMMMMMMMMMMMMMH::::::::M   M  &#39;::::::::M    M   M:::::::::::::H:::::::::::::::::MH                              MMMMMMMMMMMMMMMMMMMMMMMMMMMMM                                &#39;MMMMMMMMMMMMMMMMMM:::::::::M   :  :::::::::M    M    M:::::::::::::::::::::::::::::::M                             MMMMMMMMMMMMMMMMMMMMMMMMMMMMMM                                MMMMMMMMMMMMMMMMMMM:::::::::    .  M::::::::M    &#39;    M::::::::::::::::::::::::::::::::M                            &#39;MMMMMMMMMMMMMMMMMMMMMMMMMMMMMM                                MMMMMMMMMMMMMMMMMMM::::::::M   M   M::::::::M         M:::::::::::::::::::::::::::::::::&#39;                            MMMMMMMMMMMMMMMMMMMMMMMMMMMMMM                                MMMMMMMMMMMMMMMMMMM::::::::M   M   M::::::::M         M:::::::::::::::::::::::::::::::::M                             MMMMMMMMMMMMMMMMMMMMMMMMMMMMMM                                MMMMMMMMMMMMMMMMMMM::::::::M   M   M::::::::M          ::::::::::::::::::::::::::::::::::M                            MMMMMMMMMMMMMMMMMMMMMMMMMMMMMH                                MMMMMMMMMMMMMMMMMMM::::::::    H   M::::::::M          M:::::::::::::::::::::::::::::::::M                             MMMMMMMMMMMMMMMMMMMMMMMMMMMM                               :MMMMMMMMMMMMMMMMMMM:::::::H    &#39;   H::::::::M          M::::::::::::::::::::::::::::::::::M                             MMMMMMMMMMMMMM:&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;M                                MMMMMMMMMMMMMMMMMMM:::::::M        :::::::::M          M:::::::::::::::::::::::::::::::::::M                             MMMMMM.&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;.                                 MMM:&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;MMMMMM:::::::M   M   .:::::::::M&#39;          O:::::::::::::::::::::M:::::::::::::M                             M&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;M                                 M&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;MM:::::::M       M:::::::::M           M:::::::::::::::::::::M:::::::::::::M                            M&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;M                                 M&#39;&#39;M&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;MM:::::::        M:::::::::M           H:::::::::::::::::::::H:::::::::::::M.                         MM&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;.M                                 M&#39;&#39;M&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;M::::::::        ::::::::::M.          M:::::::::::::::::::::H::::::::::::H:::                      MM&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;M&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;M                                M.&#39;&#39;M&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;M:::::::M        .:::::::::M.          H::::::::::::::::::::::::::::::::::H::M                      M&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;M&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;M                                M&#39;&#39;&#39;M&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;M::::::::M         :::::::::M.           ::::::::::::::::::::M:::::::::::::M::MM                     :&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;M&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;:                                M&#39;&#39;&#39;M&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;MH::::::::M        &#39;:::::::::M&#39;           M:::::::::::::::::::M:::::::::::::M::M:M                     M&#39;&#39;&#39;.M&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;M&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;M                                :&#39;&#39;M&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;MM:::::::::&#39;        &#39;::::::::::M           M:::::::::::::::::::M:::::::::::::I:::::M                    M&#39;&#39;&#39;&#39;M&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;M&#39;&#39;&#39;&#39;&#39;M&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;M                               M&#39;&#39;&#39;M&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;MM::::::::::          ::::::::::M           &#39;H:::::::::::::::::M::::::::::::::::::::HM                   &#39;M&#39;&#39;&#39;&#39;M&#39;&#39;&#39;&#39;&#39;&#39;&#39;M&#39;&#39;&#39;&#39;&#39;M&#39;&#39;&#39;&#39;&#39;:&#39;&#39;&#39;M                               M&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;MM&#39;&#39;H:::::::M         :::::::::::M            M:::::::::::::::::M:::::::::::::::::::::HM                   M&#39;MMM:&#39;&#39;&#39;&#39;&#39;&#39;&#39;M&#39;&#39;&#39;&#39;&#39;M&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;M                               M&#39;&#39;O&#39;&#39;&#39;&#39;&#39;&#39;&#39;IM&#39;&#39; :M:::::::M         :::::::::::M            M:::::::::::::::::M::::::::::::::::::::::M:                  M&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;M&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;MMM                              M&#39;&#39;&#39;&#39; M&#39;&#39;&#39;&#39;&#39; &#39;&#39;&#39;&#39;MM:::::::M          M:::::::::M          MMH::::::::::::::::M:::::M::::::::::::::::::M                  MM&#39;&#39;&#39;M&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;M&#39;&#39;&#39;&#39;&#39;M&#39;&#39;&#39;&#39;M                              MM&#39;&#39;MM&#39;M&#39;&#39;&#39;&#39;M  M&#39;MM:::::::M          H:::::::::M       .M::::::::::::::::::::M::::M::::::::::::::::::::M                    M&#39;M:&#39;&#39;&#39;&#39;&#39;&#39;&#39;M&#39;&#39;&#39;&#39;MMMMMM                               MM&#39;&#39;:&#39;&#39;&#39;&#39;M&#39;.&#39;&#39;M:&#39;M:::::::M          ::::::::::M      ::::::::::::::::::::::H:::::H:::::::::::::::::::::M                    M&#39;M&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;M                                .M&#39;&#39;&#39;&#39;&#39;&#39;:M&#39;&#39;H&#39;&#39;&#39;M:::::::M MM:::::MMM:::::::::M    M:::::::::::::::::::::::M::::M::::::::::::::::::::::OM                   :M&#39;&#39;&#39;&#39;&#39;&#39;&#39;MMMMMM                                 HM&#39;&#39;&#39;MM&#39;M&#39;&#39;M&#39;&#39;&#39;M:::::::M::::::::::::::::::::M   M:::::::::::::::::::::::HM:::M::::::::::::::::::::::::MM                    :&#39;&#39;&#39;&#39;MM                                   MMMMMM&#39;&#39;M MMMM::::::::::::::::::::::::::::M MM::::::::::::::::::::::::M::::M:::::::::::::::::::::::::MM                   &#39;MMM                                                M::::::::::::::::::::::::::::MHH:::::::::::::::::::::::::M:::M:::::::::::::::::::::::::::M.                                               &#39;M::::::::::::::::::::::::::::MMMM:::::::::::::::::::::::M:::M:::::::::::::::::::::::::::::M                                               HM::::::::::::::::::::::::::::::MM:::::::::::::::::::::::M::OH::::::::::::::::::::::::::::::M                                               MH:::::::::::::::::::::::::::::::M::::::::::::::::::::::M:::M:::::::::::::::::::::::::::::::M                                               M::::::::::::::::::::::::::::::::M:::::::::::::::::::::OM::M::::::::::::::::::::::::::::::::M                                               M::::::::::::::::::::::::::::::::MM::::::::::::::::::::M::MH::::::::::::::::::::::::::::::::M                                               M::::::::::::::::::::::::::::::::OM::::::::::::::::::::M::M:::::::::::::::::::::::::::::::::MH&#39;                                               M::::M::::::::::::::::::::::::::::MM:::::::::::::::::::::M::::::::::::::::::::::::::::::::::M::M                                               M::::M::::::::::::::::::::::::::::MM::::::::::::::::::::M::::::::::::::::::::::::::::::::::MM:::M                                               M::::MH::::::::::::::::::::::::::::MH:::::::::::::::::::M::::::::::::::::::::::::::::::::::M::::I                                               M::::HM::::::::::::::::::::::::::::MM::::::::::::::::::::::::::::::::::::::::::::::::::::::M::::.                                              &#39;M:::::M::::::::::::::::::::::::::::M:::::::::::::::::::::::::::::::::::::::::::::::::::::::M:::H                                              MM:::::M:::::::::::::::::::::::::::::M::::::::::::::::::::::::::::::::::::::::::::::::::::::M:::OM                                              MM:::::MH::::::::::::::::::::::::::::HH::::::::::::::::::::::::::::::::::::::::::::::::::::MM:::MMM                                              MH::::::M::::::::::::::::::::::::::::MM::::::::::::::::::::::::::::::::::::::::::::::::::::M::::M:MM                                              MH::::::M::::::::::::::::::::::::::::IM::::::::::::::::::::::::::::::::::::::::::::::::::::M::::M::M                                              MH:::::::M:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::M::::M:::M:                                              MH:::::::M::::::::::::::::::::::::::::M:::::::::::::::::::::::::::::::::::::::::::::::::::MM:::MM:::IM&#39;                                             &#39;M::::::::HH:::::::::::::::::::::::::::.M::::::::::::::::::::::::::::::::::::::::::::::::::MH:::MM::::HMM                                             IM:::::::::M:::::::::::::::::::::::::::HM::::::::::::::::::::::::::::::::::::::::::::::::::M::::M::::::MM:                                             MM:::::::::H:::::::::::::::::::::::::::HM::::::::::::::::::::::::::::::::::::::::::::::::::M::::M::::::::M&#39;                                             MM::::::::::M:::::::::::::::::::::::::::M:::::::::::::::::::::::::::::::::::::::::::::::::HM::::M::::::::MM                                             MM::::::::::MM::::::::::::::::::::::::::M:::::::::::::::::::::::::::::::::::::::::::::::::MH::::M::::::::.MM                                             M::::::::::::M::::::::::::::::::::::::::MM::::::::::::::::::::::::::::::::::::::::::::::::M::::IM:::M:::::HMM                                             M:::::::::::::M::::::::::::::::::::::::::M::::::::::::::::::::::::::::::::::::::::::::::::M:::::M:::M:::::::M.                                            &#39;M:::::::::::::MM:::::::::::::::::::::::::M:::::::::::::::::::::::::::::::::::::::::::::::::::::M::::MI::::::MM                                            MH::::::::::::::MO::::::::::::::::::::::::M:::::::::::::::::::::::::::::::::::::::::::::::::::::M:::::M:::::::M                                            MM:::::::::::::::M::::::::::::::::::::::::H::::::::::::::::::::::::::::::::::::::::::::::::::::HM:::::M:::::::MM                                            M::::::::::::::::MM:::::::::::::::::::::::.::::::::::::::::::::::::::::::::::::::::::::::::::::M::::::M::::::::M                                            M:::::::::::::::::M:::::::::::::::::::::::HM::::::::::::::::::::::::::::::::::::::::::::::::::HM::::::M:::::::::M                                            M::::::::::::::::::MH::::::::::::::::::::::M::::::::::::::::::::::::::::::::::::::::::::::::::M:::::::M:::::::::M.                                           :M::::::::::::::::::::::::::::::::::::::::::M:::::::::::::::::::::::::::::::::::::::::::::::::MM:::::::M::::::::::M                                           &#39;M::::::::::::::::::::::::::::::::::::::::::M:::::::::::::::::::::::::::::::::::::::::::::::::M::::::::M::::::::::M                                            MH:::::::::::::::::::::::::::::::::::::::::M::::::::::::::::::::::::::::::::::::::::::::::::MM:::::::::::::::::::M                                             MM::::::::::::::::::::::::::::::::::::::::HM::::::::::::::::::::::::::::::::::::::::::::::HM:::::::::H:::::::::M                                              MM::::::::::::::::::::::::::::::::::::::::MM:::::::::::::::::::::::::::::::::::::::::::::MM::::::::M::::::::::M                                               HM::::::::::::::::::::::::::::::::::::::::HMH::::::::::::::::::::::::::::::::::::::::::MM:::::::::M::::::::::M                                                .MH:::::::::::::::::::::::::::::::::::::::HMM::::::::::::::::::::::::::::::::::::::::HMM:::::::::M:::::::::M                                                  MM::::::::::::::::::::::::::::::::::::::MMMMMM:::::::::::::::::::::::::::::::::::::MH::::::::::M:::::::::M                                                   MM::::::::::::::::::::::::::::::::::::MM:::MMMH::::::::::::::::::::::::::::::::::::::::::::::MM::::::::::                                                    MMH:::::::::::::::::::::::::::::::::MM:::::M: MM::::::::::::::::::::::::::::::::::::::::::::M:::::::::M                                                    MMMM::::::::::::::::::::::::::::::MMI::::::M  MMMM:::::::::::::::::::::::::::::::::::::::::M::::::::::M                                                   MM:MMM:::::::::::::::::::::::::::MMM::::::::M  &#39;M::MH:::::::::::::::::::::::::::::::::::::::M::::::::::H                                                   HM:::MMM:::::::::::::::::::::::IMM::::::::::M   M::::MM::::::::::::::::::::::::::::::::::::MM:::::::::M                                                   IM::::MMM:::::::::::::::::::::MM::::::MM:::M     ::::::MM::::::::::::::::::::::::::::::::::MO:::::::::M                                                   MM::::::MMM:::::::::::::::::MM:::::::M:M:::M     M:::::::MM:::::::::::::::::::::::::::::::MM:::::::::M                                                   MM::::::MOMM::::::::::::::MM::::::::M::::::M     M:::::::::HM:::::::::::::::::::::::::::::MM:::::::::M                                                   MM::::::M::IMM:::::::::MMM::::::::HM:::::::M     .:::::::::::MM::::M:::::::::::::::::::::HM:::::::::M                                                   MM::::::M::::MM::::::M:::::::::::MM::::::::M     I:::::::::::::MM::::M:::::::::::::::::::M::::::::::M                                                   MH::::::M:::::MM::::::::::::::::MM:::::::::M      O::::::::::::::M::::MM::::::::::::::::HM:::::::::M                                                   MM::::::MH:::::M:::::::::::::::MI::::::::OMH      &#39;M::::::::::::::MH::::MM::::::::::::::M:::::::::HM                                                   MM:::::::M:::::H::::::::::::::M::::::::HMH           MM::::::::::::H::::::M:::::::::::::::::::::::M&#39;                                                    MM::::::M::::::::::::::::::HM::::::::M&#39;               MM:::::::::::H::::::MM:::::::::::::::::::::M                                                     MM:::::H::::::::::::::::::M::::::MM                     MI:::::::::::::::::MM::::::::::::::::::MM                                                      MM:::::M::::::::::::::::M:::::MM                         MM::::::::::::::::MMM::::::::::::::::M                                                        MH::::M::::::::::::::M::HMMMM                            MMM:::::::::::::::MMM:::::::::::::MM&#39;                                                         MMMMMMMMMMMMMMMMMMMMMMMMMMMM                              &#39;MM::::::::::::::MMMMM:::::::::MMM                                                          MMMMMMMMMMMMMMMMMMMMMMMMMMM                                 MM:::::::::::::MMMM:::MMMMMMMMM                                                           MMMMMMMMMMMMMMMMMMMMMMM.M                                   :MMMMMMMMMMMMMMMMMMMMMMMMMMMM                                                            M&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;MM                                   MMMMMMMMMMMMMMMMMMMMMMMMMMM&#39;M                                                            M&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;M                                    MMMMMMMMMMMMMMMMMMMMMMM:&#39;&#39;&#39;&#39;&#39;                                                          O&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;                                     MMMMMMMMMM.I.&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;M                                                          H&#39;&#39;M&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;M                                     M&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;M                                                         MM&#39;&#39;&#39;&#39; :MM&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;M                                   &#39;M&#39;&#39;.MH:&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;M                                                      MM&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;HM                                   .M.&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;M                                                   MM:&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;MMMM                                  MM&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;M                                                MMMMMMM&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39; MMMMMM                                 &#39;M&#39;&#39;&#39;&#39;&#39;&#39;&#39;IHMMMMMMMM &#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;M                                             MMMMMMMMMMM:&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;HMMMMMMMMM                                 MH&#39;&#39;:MMMMMMMMMMMMMMMMM&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;M                                          &#39;MMMMMMMMMMMMMMMH&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;HMMMMMMMMMMMMMMMMMMM                               OM&#39;MMMMMMMMMMMMMMMMMMMMMH&#39;&#39;&#39;&#39;&#39;&#39;&#39;MM                                        MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM                               M&#39;MMMMMMMMMMMMMMMMMMMMMMMM &#39;&#39;&#39;&#39;&#39;MM                                     &#39;MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM                               MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM:                                     MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM                              MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM                                    MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM                               MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM                                    MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM.                                 MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM                                    MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM:                                     &#39;MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM                                     .MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM                                               HMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMH                                            &#39;MMMMMMMMMM:                                                             MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM                                                                                                                      MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM                                                                                                                      MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM// ----------------------------------------------------------------------------------------// 2. 佛祖镇楼                           _ooOoo_                          o8888888o                          88&quot; . &quot;88                          (| -_- |)                           O\ = /O                       ____/`---&#39;\____                     .   &#39; \\| |// `.                      / \\||| : |||// \                    / _||||| -:- |||||- \                      | | \\\ - /// | |                    | \_| &#39;&#39;\---/&#39;&#39; | |                     \ .-\__ `-` ___/-. /                  ___`. .&#39; /--.--\ `. . __               .&quot;&quot; &#39;&lt; `.___\_&lt;|&gt;_/___.&#39; &gt;&#39;&quot;&quot;.              | | : `- \`.;`\ _ /`;.`/ - ` : | |                \ \ `-. \_ __\ /__ _/ .-` / /        ======`-.____`-.___\_____/___.-`____.-&#39;======                           `H---C&#39;        .............................................// 佛祖 die， 真「我（卧）佛」 * _ooOoo_ * o8888888o * 88&quot; . &quot;88 * (| -_- |) *  O\ = /O * ___/`---&#39;\____ * .   &#39; \\| |// `. * / \\||| : |||// \ * / _||||| -:- |||||- \ * | | \\\ - /// | | * | \_| &#39;&#39;\---/&#39;&#39; | | * \ .-\__ `-` ___/-. / * ___`. .&#39; /--.--\ `. . __ * .&quot;&quot; &#39;&lt; `.___\_&lt;|&gt;_/___.&#39; &gt;&#39;&quot;&quot;. * | | : `- \`.;`\ _ /`;.`/ - ` : | | * \ \ `-. \_ __\ /__ _/ .-` / / * ======`-.____`-.___\_____/___.-`____.-&#39;====== * `H---C&#39; *          ............................................. *           佛曰：bug泛滥，我已瘫痪！// ----------------------------------------------------------------------------------------// 3. npm xmas                     ★                    ／＼                   ／⸮ ＼                  ／   &amp;＼                 ／⸛ ⸮   ＼                ／ ｡⸛     ＼               ／ @@ @ ⁂   ＼              ／⸛@｡   ⸛     ＼             ／｡ @ @ ⸛ @⁂    ＼            ／ ⁂i｡     @ i⁂   ＼           ／  ⸮    &amp; i@  @    ＼          ／i  &amp; ⸮ @i @   ⸮⸮@&amp;  ＼         ／     @i ｡ ⸛  &amp;  &amp;    ⸛＼        ／    ｡i     ⁂ ⸛    ⁂⁂    ＼       ／    ⁂ ⸮   ｡    ⸮   ｡ ｡    ＼      ／ ⸛  ⸮i@i    ｡   ⁂ ⸛  @ &amp;⸮ ⁂｡＼     ／  @     i｡ ⸛⁂   ⸮  &amp;  ⁂@i ⁂   ＼    ／⸮ i  @       ｡｡  ⁂ ⸮⁂i｡ i    @  ＼   ／    &amp;｡⸮   i    &amp;⸮ &amp; ⸮｡ &amp;  ⸮ &amp;  i⁂ ＼  ／ @ ⁂ &amp;｡&amp; ⸛ i⸛  ⸛        i  i &amp;  ｡ ⸛ ＼ ／  @i⁂  ⁂｡ ⸛   @    &amp;⸮  ⸛  ⸮｡⁂｡  ｡   i ＼ ^^^^^^^^^^^^^^^^^^^|  |^^^^^^^^^^^^^^^^^^                    |  |// ----------------------------------------------------------------------------------------// 4. 吐火//                                        $,  $,     ,//                                        &quot;ss.$ss. .s’//                                ,     .ss$$$$$$$$$$s,//                                $. s$$$$$$$$$$$$$$`$$Ss//                                &quot;$$$$$$$$$$$$$$$$$$o$$$       ,//                               s$$$$$$$$$$$$$$$$$$$$$$$$s,  ,s//                              s$$$$$$$$$&quot;$$$$$$&quot;&quot;&quot;&quot;$$$$$$&quot;$$$$$,//                              s$$$$$$$$$$s&quot;&quot;$$$$ssssss&quot;$$$$$$$$”//                             s$$$$$$$$$$&#39;         `&quot;&quot;&quot;ss&quot;$&quot;$s&quot;”//                             s$$$$$$$$$$,              `&quot;&quot;&quot;&quot;&quot;$  .s$$s//                             s$$$$$$$$$$$$s,...               `s$$&#39;  `//                         `ssss$$$$$$$$$$$$$$$$$$$$####s.     .$$&quot;$.   , s-//                           `&quot;&quot;&quot;&quot;$$$$$$$$$$$$$$$$$$$$#####$$$$$$&quot;     $.$’//                                 &quot;$$$$$$$$$$$$$$$$$$$$$####s&quot;&quot;     .$$$|//                                  &quot;$$$$$$$$$$$$$$$$$$$$$$$$##s    .$$&quot; $//                                   $$&quot;&quot;$$$$$$$$$$$$$$$$$$$$$$$$$$$$$&quot;   `//                                  $$&quot;  &quot;$&quot;$$$$$$$$$$$$$$$$$$$$S&quot;&quot;&quot;&quot;’//                             ,   ,&quot;     &#39;  $$$$$$$$$$$$$$$$####s//                             $.          .s$$$$$$$$$$$$$$$$$####”//                 ,           &quot;$s.   ..ssS$$$$$$$$$$$$$$$$$$$####”//                 $           .$$$S$$$$$$$$$$$$$$$$$$$$$$$$#####”//                 Ss     ..sS$$$$$$$$$$$$$$$$$$$$$$$$$$$######&quot;”//                  &quot;$$sS$$$$$$$$$$$$$$$$$$$$$$$$$$$########”//           ,      s$$$$$$$$$$$$$$$$$$$$$$$$#########&quot;&quot;’//           $    s$$$$$$$$$$$$$$$$$$$$$#######&quot;&quot;&#39;      s&#39;         ,//           $$..$$$$$$$$$$$$$$$$$$######&quot;&#39;       ....,$$....    ,$//            &quot;$$$$$$$$$$$$$$$######&quot;&#39; ,     .sS$$$$$$$$$$$$$$$$s$$//              $$$$$$$$$$$$#####&quot;     $, .s$$$$$$$$$$$$$$$$$$$$$$$$s.//   )          $$$$$$$$$$$#####&#39;        `$$$$$$$$H##O##O##P##E$$R$$$$$$.//  ((          $$$$$$$$$$$#####       $$$$$$$$###&quot;       &quot;####$$$$$$$$$$//  ) \         $$$$$$$$$$$$####.     $$$$$$###&quot;             &quot;###$$$$$$$$$   s’// (   )        $$$$$$$$$$$$$####.   $$$$$###&quot;                ####$$$$$$$$s$$’// )  ( (       $$&quot;$$$$$$$$$$$#####.$$$$$###&#39;                .###$$$$$$$$$$”// (  )  )   _,$&quot;   $$$$$$$$$$$$######.$$##&#39;                .###$$$$$$$$$$// ) (  ( \.         &quot;$$$$$$$$$$$$$#######,,,.          ..####$$$$$$$$$$$”//(   )$ )  )        ,$$$$$$$$$$$$$$$$$$####################$$$$$$$$$$$”//(   ($$  ( \     _sS&quot;  `&quot;$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$S$$,// )  )$$$s ) )  .      .   `$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$&quot;&#39;  `$$//  (   $$$Ss/  .$,    .$,,s$$$$$$##S$$$$$$$$$$$$$$$$$$$$$$$$S&quot;&quot;        ‘//    \)_$$$$$$$$$$$$$$$$$$$$$$$##&quot;  $$        `$$.        `$$.//        `&quot;S$$$$$$$$$$$$$$$$$#&quot;      $          `$          `$//            `&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&#39;         &#39;           &#39;           &#39;// ----------------------------------------------------------------------------------------// 5. 读书使我快乐                  .-~~~~~~~~~-._       _.-~~~~~~~~~-.              __.&#39;              ~.   .~              `.__            .&#39;//                  \./                  \\`.          .&#39;//                     |                     \\`.        .&#39;// .-~&quot;&quot;&quot;&quot;&quot;&quot;&quot;~~~~-._     |     _,-~~~~&quot;&quot;&quot;&quot;&quot;&quot;&quot;~-. \\`.      .&#39;//.-&quot;                 `-.  |  .-&#39;                 &quot;-.\\`.    .&#39;/H______.============-..   \ | /   ..-============.______\C`.  .&#39;______________________________\|/______________________________`.// ----------------------------------------------------------------------------------------// 6. 神兽 *　　　　　　　　┏┓　　　┏┓+ + *　　　　　　　┏┛┻━━━┛┻┓ + + *　　　　　　　┃　　　　　　　┃ 　 *　　　　　　　┃　　　━　　　┃ ++ + + + *　　　　　　 ████━████ ┃+ *　　　　　　　┃　　　　　　　┃ + *　　　　　　　┃　　　┻　　　┃ *　　　　　　　┃　　　　　　　┃ + + *　　　　　　　┗━┓　　　┏━┛ *　　　　　　　　　┃　　　┃ *　　　　　　　　　┃　　　┃ + + + + *　　　　　　　　　┃　　　┃　　　　Code is far away from bug with the animal protecting *　　　　　　　　　┃　　　┃ + 　　　　神兽保佑,代码无bug　　 *　　　　　　　　　┃　　　┃ *　　　　　　　　　┃　　　┃　　+ *　　　　　　　　　┃　 　　┗━━━┓ + + *　　　　　　　　　┃ 　　　　　　　┣┓ *　　　　　　　　　┃ 　　　　　　　┏┛ *　　　　　　　　　┗┓┓┏━┳┓┏┛ + + + + *　　　　　　　　　　┃┫┫　┃┫┫ *　　　　　　　　　　┗┻┛　┗┻┛+ + + +// ----------------------------------------------------------------------------------------// 7. 。。。//                             _______________________________________//                            /  ___________________________________  \//     _--&quot;&quot;&quot;&quot;--_            /  /_/_/_/_/_|_|_|_|_|_|_|_|_|_\_\_\_\_\  \//    /          \          /  /_/_/_/_J__L_L_L_|_|_|_J_J_J__L_\_\_\_\  \//   /\          /\        /  /_/_/_J__L_J__L_L_|_|_|_J_J__L_J__L_\_\_\  \//   L &quot;&quot;-____-&quot;&quot; J       /  /_/_J__L_J__L_J_J__L_|_J__L_L_J__L_J__L_\_\  \//   \            /      /  /_/__L_/__L_J__L_J__L_|_J__L_J__L_J__\_J__\_\  \//    \_        _/      /  /_J__/_J__/__L_J__|__L_|_J__|__L_J__\__L_\__L_\  \//  _--&quot;&quot;&quot;&quot;&quot;--_&quot;       /  /  F /  F J  J  |  F J  |  F J  |  F  F J  \ J  \  \// /           \      /  /--/-J--/--L--|--L-J--J--|--L--L-J--|--J--\--L-\--\  \///\           /\    /  /__/__L_J__J___L_J__J__|__|__|__L__L_J___L__L_J__\__\  \//L &quot;&quot;-_____-&quot;&quot; J   /  /  /  /  F  F  J  J  |  |  |  |  |  F  F  J  J  \  \  \  \//\             /  /  /--/--/--/--J---L--|--|--|--o--|--|--|--J---L--\--\--\--\  \// \_         _/  /  /__/__J__J___L__J___L__L__L__|__J__J__J___L__J___L__L__\__\  \//   &quot;--___--&quot;   /  /  /   F  F  J   F  J  J   F  |  J   F  F  J   F  J  J   \  \  \//              /  /--/---/--J---L--J---L--|--J---|---L--|--J---L--J---L--\---\--\  \//             /  /__J___/___L__/___L__J___L__J___|___L__J___L__J___\__J___\___L__\  \//            /  /   F  J   /  J   J   |  J   J   |   F   F  |   F   F  \   F  J   \  \//           /  /---/---L--J---L---L---L--|---|---|---|---|--J---J---J---L--J---\---\  \//          /  /___/___/___L__J___J___J___|___|___|___|___|___L___L___L__J___\___\___\  \//         /  /   /   /   /   F   F   H   O   O   |   P   E   R   J   J   \   \   \   \  \//        /  /___/___J___J___J___J___J____L___L___|___J___J____L___L___L___L___L___\___\  \//       /  /   /    F   F   F   |   |   J    F   |   J    F   |   |   J   J   J    \   \  \//      /  /___J____/___/___J____L___L___|___J____|____L___|___J___J____L___\___\____L___\  \//     /  /    F   /   J    F   J   J    |   J    |    F   |    F   F   J    F   \   J    \  \//    /  /____/___J____L___/____L___|____L___|____|____|___J____|___J____\___J____L___\____\  \//   /  /    /    F   /   J    J    F   J    F    |    J    F   J    F    F   \   J    \    \  \//  /  /____/____/___J____L____|____L___J____L____|____J____L___J____|____J____L___\____\____\  \// /                                                                                             \///_______________________________________________________________________________________________\//|                                                                                               |//| hs                                                                                            |//|_______________________________________________________________________________________________|// ----------------------------------------------------------------------------------------// 8. windows                ,-~¨^  ^¨-,           _,                /          / ;^-._...,¨/              /          / /         /              /          / /         /            /          / /         /            /,.-:&#39;&#39;-,_ / /         /            _,.-:--._ ^ ^:-._ __../          /^         / /¨:.._¨__.;        /          / /      ^  /        /          / /         /      /          / /         /      /_,.--:^-._/ /         /    ^            ^¨¨-.___.:^  (R) - G33K// ----------------------------------------------------------------------------------------// 9. google          ___                _         / __|___  ___  __ _| |___        | (_ / _ \/ _ \/ _` |   -_)         \___\___/\___/\__, |_\___|                       |___/// ----------------------------------------------------------------------------------------// 10. 悟空在哪里？                       _.---..._                   ./^         ^-._                 ./^C===.         ^\.   /\                .|&#39;     \\        _ ^|.^.|           ___.--&#39;_     ( )  .      ./ /||          /.---^T\      ,     |     / /|||         C&#39;   ._`|  ._ /  __,-/    / /-,||              \ \/    ;  /O  / _    |) )|,               i \./^O\./_,-^/^    ,;-^,&#39;                \ |`--/ ..-^^      |_-^                 `|  \^-           /|:                  i.  .--         / &#39;|.                   i   ==&#39;       /&#39;  |\._                 _./`._        //    |.  ^-ooo.._          _.oo../&#39;  |  ^-.__./X/   . `|    |#######b         d####     |&#39;      ^^^^   /   |    _\#######         #####b ^^^^^^^^--. ...--^--^^^^^^^_.d######         ######b._         Y            _.d#########         ##########H._     |        _.C#############                                        &quot;Piccolo&quot; no. 2                                           (from Dragonball Z)                                                --- Steven J. Simmons// 11. 一定是给我吓跑了                              /^_.-^  _  --^=_                           ./&#39;-^__    _&gt;=\^^==^-.                           |&#39;/^^_/  /^    \ \.^\\\/\                          ,|/| &#39;  /&#39;  _____\ `\|.^.|                          |&#39;/   /_--^^ .   ^^-./ /||                          |/,--^  ,     |     / /||&#39;                        ._|/   \ /  __,-/    / /-,||                        \ &#39;/    ;  /O  / _    |) )|,                         i \./^O\./_,-^/^    ,;-^,&#39;                          \ |`--/ ..-^^      |_-^                           `|  \^-_,/^Y\      | ^^\                           _i.  \&quot;.--V_/     /| \. ^\._____...--.&gt;^^^^^^-------...._                          /  i   ^--^^     /&#39;|&#39; |\. |./&#39;        |                  ;        ___...----/^^^^---|.  `._\  /^   /&#39; |&#39;_/&#39; \ `|         |&#39;               ,/&#39;                 |&#39;        \   _H^-.__./&#39;__.^C\     .|        ,|            _.-^                 `\       ,|`_./^^-----^^._    ` ./ /        /^        _.-^^/                          |&#39;  ^                  /-^                ./^    /        \                 `\_     __.-&lt;       _,/                 ./&#39;     |&#39;         `\.        `i       ^^--/._____...--^            .      ./       |.           `|        |                                   /       /        `|                                        &quot;Piccolo&quot;                                           (from Dragonball Z)                                                --- Steven J. Simmons// ----------------------------------------------------------------------------------------// 12. 台式电脑就是快, 13: 键盘                              ,----------------,              ,---------,                          ,-----------------------,          ,&quot;        ,&quot;|                        ,&quot;                      ,&quot;|        ,&quot;        ,&quot;  |                      +-----------------------+  |      ,&quot;        ,&quot;    |                      |  .-----------------.  |  |     +---------+      |                      |  |                 |  |  |     | -==----&#39;|      |                      |  |  I LOVE DOS!    |  |  |     |         |      |                      |  |  Bad command or |  |  |/----|`---=    |      |                      |  |  HC:\&gt;_          |  |  |   ,/|==== ooo |      ;                      |  |                 |  |  |  // |(((( [33]|    ,&quot;                      |  `-----------------&#39;  |,&quot; .;&#39;| |((((     |  ,&quot;                      +-----------------------+  ;;  | |         |,&quot;                          /_)______________(_/  //&#39;   | +---------+                    ___________________________/___  `,                    /  oooooooooooooooo  .o.  oooo /,   \,&quot;-----------                  / ==ooooooooooooooo==.o.  ooo= //   ,`\--&#123;)B     ,&quot;                  /_==__==========__==_ooo__ooo=_/&#39;   /___________,&quot;  ┌───┐   ┌───┬───┬───┬───┐ ┌───┬───┬───┬───┐ ┌───┬───┬───┬───┐ ┌───┬───┬───┐  │Esc│   │ F1│ F2│ F3│ F4│ │ F5│ F6│ F7│ F8│ │ F9│F10│F11│F12│ │P/S│S L│P/B│  ┌┐    ┌┐    ┌┐  └───┘   └───┴───┴───┴───┘ └───┴───┴───┴───┘ └───┴───┴───┴───┘ └───┴───┴───┘  └┘    └┘    └┘  ┌───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───────┐ ┌───┬───┬───┐ ┌───┬───┬───┬───┐  │~ `│! 1│@ 2│# 3│$ 4│% 5│^ 6│&amp; 7│* 8│( 9│) 0│_ -│+ =│ BacSp │ │Ins│Hom│PUp│ │H C│ / │ * │ - │  ├───┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─────┤ ├───┼───┼───┤ ├───┼───┼───┼───┤  │ Tab │ Q │ W │ E │ R │ T │ Y │ U │ I │ O │ P │&#123; [│&#125; ]│ | \ │ │Del│End│PDn│ │ 7 │ 8 │ 9 │   │  ├─────┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴─────┤ └───┴───┴───┘ ├───┼───┼───┤ + │  │ Caps │ A │ S │ D │ F │ G │ H │ J │ K │ L │: ;│&quot; &#39;│ Enter  │               │ 4 │ 5 │ 6 │   │  ├──────┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴────────┤     ┌───┐     ├───┼───┼───┼───┤  │ Shift  │ Z │ X │ C │ V │ B │ N │ M │&lt; ,│&gt; .│? /│  Shift   │     │ ↑ │     │ 1 │ 2 │ 3 │   │  ├─────┬──┴─┬─┴──┬┴───┴───┴───┴───┴───┴──┬┴───┼───┴┬────┬────┤ ┌───┼───┼───┐ ├───┴───┼───┤ E││  │ Ctrl│    │Alt │         Space         │ Alt│    │    │Ctrl│ │ ← │ ↓ │ → │ │   0   │ . │←─┘│  └─────┴────┴────┴───────────────────────┴────┴────┴────┴────┘ └───┴───┴───┘ └───────┴───┴───┘// ----------------------------------------------------------------------------------------// 14. 喷火~ 🔥🔥🔥🔥🔥                                                     __----~~~~~~~~~~~------___                                          .  .   ~~//====......          __--~ ~~                          -.            \_|//     |||\\  ~~~~~~:::C... /~                       ___-==_       _-~o~  \/    |||  \\            _/~~-               __---~~~.==~||\=_    -_--~/_-~|-   |\\   \\        _/~           _-~~     .H~    |  \\-_    &#39;-~7  /-   /  ||    \      /         .~       .~       |   \\ -_    /  /-   /   ||      \   /        /  ____  /         |     \\ ~-_/  /|- _/   .||       \ /        |~~    ~~|--~~~~--_ \     ~==-/   | \~--===~~        .\                 &#39;         ~-|      /|    |-~\~~       __--~~                             |-~~-_/ |    |   ~\_   _-~            /\                                  /  \     \__   \/~                \__                              _--~ _/ | .-~~____--~-/                  ~~==.                             ((-&gt;/~   &#39;.|||&#39; -_|    ~~-/ ,              . _||                                        -_     ~\      ~~---l__i__i__i--~~_/                                        _-~-__   ~)  \--______________--~~                                      //.-~~~-~_--~- |-------~~~~~~~~                                             //.-~~~--\// ----------------------------------------------------------------------------------------// 15 喷完火发会呆，乖巧站~~                 ___====-_  _-====___           _--^^^#####//      \\#####^^^--_        _-^##########// (    ) \\##########^-_       -############//  |\^^/|  \\############-     _/############//   (@::@)   \\############\_    /#############((     \\//     ))#############\   -###############\\    (oo)    //###############-  -#################\\  / VV \  //#################- -###################\\/      \//###################-_#/|##########/\######(   /\   )######/\##########|\#_|/ |#/\#/\#/\/  \H/\##\  |  |  /##/\C/  \/\#/\#/\#| \|`  |/  V  V  `   V  \#\| |  | |/#/  V   &#39;  V  V  \|  &#39;   `   `  `      `   / | |  | | \   &#39;      &#39;  &#39;   &#39;                    (  | |  | |  )                   __\ | |  | | /__                  (vvv(VVV)(VVV)vvv)// ----------------------------------------------------------------------------------------// 16. 旺旺旺                ii.                                         ;9ABH,               SA391,                                    .r9GG35&amp;G               &amp;#ii13Gh;                               i3X31i;:,rB1               iMs,:,i5895,                         .5G91:,:;:s1:8A                33::::,,;5G5,                     ,58Si,,:::,sHX;iH1                 Sr.,:;rs13BBX35hh11511h5Shhh5S3GAXS:.,,::,,1AG3i,GG                 .G51S511sr;;iiiishS8G89Shsrrsh59S;.,,,,,..5A85Si,h8                :SB9s:,............................,,,.,,,SASh53h,1G.             .r18S;..,,,,,,,,,,,,,,,,,,,,,,,,,,,,,....,,.1H315199,rX,           ;S89s,..,,,,,,,,,,,,,,,,,,,,,,,....,,.......,,,;r1ShS8,;Xi         i55s:.........,,,,,,,,,,,,,,,,.,,,......,.....,,....r9&amp;5.:X1        59;.....,.     .,,,,,,,,,,,...        .............,..:1;.:&amp;s       s8,..;53S5S3s.   .,,,,,,,.,..      i15S5h1:.........,,,..,,:99       93.:39s:rSGB@A;  ..,,,,.....    .SG3hhh9G&amp;BGi..,,,,,,,,,,,,.,83       G5.G8  9#@@@@@X. .,,,,,,.....  iA9,.S&amp;B###@@Mr...,,,,,,,,..,.;Xh       Gs.X8 S@@@@@@@B:..,,,,,,,,,,. rA1 ,A@@@@@@@@@H:........,,,,,,.iX:      ;9. ,8A#@@@@@@#5,.,,,,,,,,,... 9A. 8@@@@@@@@@@M;    ....,,,,,,,,S8      X3    iS8XAHH8s.,,,,,,,,,,...,..58hH@@@@@@@@@Hs       ...,,,,,,,:Gs     r8,        ,,,...,,,,,,,,,,.....  ,h8XABMMHX3r.          .,,,,,,,.rX:    :9, .    .:,..,:;;;::,.,,,,,..          .,,.               ..,,,,,,.59   .Si      ,:.i8HBMMMMMB&amp;5,....                    .            .,,,,,.sMr   SS       :: h@@@@@@@@@@#; .                     ...  .         ..,,,,iM5   91  .    ;:.,1&amp;@@@@@@MXs.                            .          .,,:,:&amp;S   hS ....  .:;,,,i3MMS1;..,..... .  .     ...                     ..,:,.99   ,8; ..... .,:,..,8Ms:;,,,...                                     .,::.83    s&amp;: ....  .sS553B@@HX3s;,.    .,;13h.                            .:::&amp;1     SXr  .  ...;s3G99XA&amp;X88Shss11155hi.                             ,;:h&amp;,      iH8:  . ..   ,;iiii;,::,,,,,.                                 .;irHA       ,8X5;   .     .......                                       ,;iihS8Gi          1831,                                                 .,;irrrrrs&amp;@            ;5A8r.                                            .:;iiiiirrss1H              :X@H3s.......                                .,:;iii;iiiiirsrh               r#h:;,...,,.. .,,:;;;;;:::,...              .:;;;;;;iiiirrss1              ,M8 ..,....,.....,,::::::,,...         .     .,;;;iiiiiirss11h              8B;.,,,,,,,.,.....          .           ..   .:;;;;iirrsss111h             i@5,:::,,,,,,,,.... .                   . .:::;;;;;irrrss111111             9Bi,:,,,,......                        ..r91;;;;;iirrsss1ss1111// ----------------------------------------------------------------------------------------// 17. bug ? 呵呵                .,,       .,:;;iiiiiiiii;;:,,.     .,,              rGB##HS,.;iirrrrriiiiiiiiiirrrrri;,s&amp;##MAS,             r5s;:r3AH5iiiii;;;;;;;;;;;;;;;;iiirXHGSsiih1,                .;i;;s91;;;;;;::::::::::::;;;;iS5;;;ii:              :rsriii;;r::::::::::::::::::::::;;,;;iiirsi,           .,iri;;::::;;;;;;::,,,,,,,,,,,,,..,,;;;;;;;;iiri,,.        ,9BM&amp;,            .,:;;:,,,,,,,,,,,hXA8:            ..,,,.       ,;&amp;@@#r:;;;;;::::,,.   ,r,,,,,,,,,,iA@@@s,,:::;;;::,,.   .;.        :ih1iii;;;;;::::;;;;;;;:,,,,,,,,,,;i55r;;;;;;;;;iiirrrr,..       .ir;;iiiiiiiiii;;;;::::::,,,,,,,:::::,,:;;;iiiiiiiiiiiiri       iriiiiiiiiiiiiiiii;;;::::::::::::::::;;;iiiiiiiiiiiiiiiir;      ,riii;;;;;;;;;;;;;:::::::::::::::::::::::;;;;;;;;;;;;;;iiir.      iri;;;::::,,,,,,,,,,:::::::::::::::::::::::::,::,,::::;;iir:     .rii;;::::,,,,,,,,,,,,:::::::::::::::::,,,,,,,,,,,,,::::;;iri     ,rii;;;::,,,,,,,,,,,,,:::::::::::,:::::,,,,,,,,,,,,,:::;;;iir.     ,rii;;i::,,,,,,,,,,,,,:::::::::::::::::,,,,,,,,,,,,,,::i;;iir.     ,rii;;r::,,,,,,,,,,,,,:,:::::,:,:::::::,,,,,,,,,,,,,::;r;;iir.     .rii;;rr,:,,,,,,,,,,,,,,:::::::::::::::,,,,,,,,,,,,,:,si;;iri      ;rii;:1i,,,,,,,,,,,,,,,,,,:::::::::,,,,,,,,,,,,,,,:,ss:;iir:      .rii;;;5r,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,sh:;;iri       ;rii;:;51,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,.:hh:;;iir,        irii;::hSr,.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,.,sSs:;;iir:         irii;;:iSSs:.,,,,,,,,,,,,,,,,,,,,,,,,,,,..:135;:;;iir:          ;rii;;:,r535r:...,,,,,,,,,,,,,,,,,,..,;sS35i,;;iirr:           :rrii;;:,;1S3Shs;:,............,:is533Ss:,;;;iiri,            .;rrii;;;:,;rhS393S55hh11HC5S3393Shr:,:;;;iirr:              .;rriii;;;::,:;is1h555555h1si;:,::;;;iirri:.                .:irrrii;;;;;:::,,,,,,,,:::;;;;iiirrr;,                   .:irrrriiiiii;;;;;;;;iiiiiirrrr;,.                      .,:;iirrrrrrrrrrrrrrrrri;:.                            ..,:::;;;;:::,,.// ----------------------------------------------------------------------------------------// 18. 别写代码了，来一发？ *                    .::::. *                  .::::::::. *                 :::::::::::  FUCK YOU *             ..:::::::::::&#39; *           &#39;::::::::::::&#39; *             .:::::::::: *        &#39;::::::::::::::.. *             ..::::::::::::. *           ``:::::::::::::::: *            ::::``:::::::::&#39;        .:::. *           ::::&#39;   &#39;:::::&#39;       .::::::::. *         .::::&#39;      ::::     .:::::::&#39;::::. *        .:::&#39;       :::::  .:::::::::&#39; &#39;:::::. *       .::&#39;        :::::.:::::::::&#39;      &#39;:::::. *      .::&#39;         ::::::::::::::&#39;         ``::::. *  ...:::           ::::::::::::&#39;              ``::. * ```` &#39;:.          &#39;:::::::::&#39;                  ::::.. *                    &#39;.:::::&#39;                    &#39;:&#39;````..// ----------------------------------------------------------------------------------------// 19. 楼上，你是认真的么？ *  _._ _..._ .-&#39;,     _.._(`)) * &#39;-. `     &#39;  /-._.-&#39;    &#39;,/ *    )         \            &#39;. *   / _    _    |             \ *  |  a    a    /              | *  \   .-.                     ; *   &#39;-(&#39;&#39; ).-&#39;       ,&#39;       ; *      &#39;-;           |      .&#39; *         \           \    / *         | 7  .__  _.-\   \ *         | |  |  ``/  /`  / *        /,_|  |   /,_/   / *           /,_/      &#39;`-&#39;// ----------------------------------------------------------------------------------------// 20. 微微一笑************************************************************** *                                                            * *   .=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-.       * *    |                     ______                     |      * *    |                  .-&quot;      &quot;-.                  |      * *    |                 /            \                 |      * *    |     _          |              |          _     |      * *    |    ( \         |,  .-.  .-.  ,|         / )    |      * *    |     &gt; &quot;=._     | )(__/  \__)( |     _.=&quot; &lt;     |      * *    |    (_/&quot;=._&quot;=._ |/     /\     \| _.=&quot;_.=&quot;\_)    |      * *    |           &quot;=._&quot;(_     ^^     _)&quot;_.=&quot;           |      * *    |               &quot;=\__|IIIIII|__/=&quot;               |      * *    |              _.=&quot;| \IIIIII/ |&quot;=._              |      * *    |    _     _.=&quot;_.=&quot;\          /&quot;=._&quot;=._     _    |      * *    |   ( \_.=&quot;_.=&quot;     `--------`     &quot;=._&quot;=._/ )   |      * *    |    &gt; _.=&quot;                            &quot;=._ &lt;    |      * *    |   (_/                                    \_)   |      * *    |                                                |      * *    &#39;-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=&#39;      * *                                                            * *           LASCIATE OGNI SPERANZA, VOI CH&#39;ENTRATE           * **************************************************************// ----------------------------------------------------------------------------------------// 21. 吓得我都变身了变什么身，耍会知乎|    |/:::/__\:::\   \:::\____\ * \::/    \:::\  /:::/    /\:::\  /:::/    \::/    /\::/   |::::\  /:::|____|\:::\   \:::\   \::/    / *  \/____/ \:::\/:::/    /  \:::\/:::/    / \/____/  \/____|:::::\/:::/    /  \:::\   \:::\   \/____/ *           \::::::/    /    \::::::/    /                 |:::::::::/    /    \:::\   \:::\    \ *            \::::/    /      \::::/____/                  |::|\::::/    /      \:::\   \:::\____\ *            /:::/    /        \:::\    \                  |::| \::/____/        \:::\   \::/    / *           /:::/    /          \:::\    \                 |::|  ~|               \:::\   \/____/ *          /:::/    /            \:::\    \                |::|   |                \:::\    \ *         /:::/    /              \:::\____\               \::|   |                 \:::\____\ *         \::/    /                \::/    /                \:|   |                  \::/    / *          \/____/                  \/____/                  \|___|                   \/____/// ----------------------------------------------------------------------------------------// 23. 阿里巴巴 /*                                 `:::::::::::, *                             `::;:::::::;:::::::,  ` *                          `::;;:::::::@@@@;:::::::` *                        ,:::::::::::::@    #@&#39;:::::` *                      :::::::::::::::&#39;@@      @;:::: *                    ::::::::::::&#39;@@@@&#39;```      .+:::` *                  ::::::::::;@@@#.              ,:::, *                .::::::::+@#@`                   :::: *               :::::::+@@&#39;                       :::: *             `:::::&#39;@@:                         `:::. *            ,::::@@:  `                         :::: *           ;::::::@                            .:::; *          :;:::::;@`        `                  :::; *         :::::::::@`        @                 ;:::: *        :::::::::#`          @`              ,:::: *       :::::::::@`         +@ @             .::::` *      .::::::&#39;H@`       `@C&#39;  @             ::::, *      :::::::++@@@@@@@@@@.                 ::::; *     ;:::::::+,   `..`                    ::::: *    ,::::::::&#39;,                          ::::: *    :::::::::+,                         :::::` *   :::::::::+@.                        ,::::.`                     `, *   ::::::;;@+                         .::;::                     `; *  :::::::@@                          `:::;:                   `::`` *  ::::::@@                           ;::::                  .::` *  :::::;@                           :::::`               .;::` *  :::::@                           `:;:::            `::::; *  :::::#                           :::::.        `,;::::: *  ::::::                    `      ::::::,.,::::::::::. *  ,::::::`              .::        ::::::::::::::::;` *   ;::::::::,````.,:::::,          ::::::::::::::. *    :::::::::::::::::: `           `::::::::::` *     `::::::::::::,                  .:::. *         `..` */// ----------------------------------------------------------------------------------------// 看源码？ 不存在的。/* *         又看源码， 看你妹妹呀！ *                                         ,s555SB@@&amp; *                                      :9H####@@@@@Xi *                                     1@@@@@@@@@@@@@@8 *                                   ,8@@@@@@@@@B@@@@@@8 *                                  :B@@@@X3hi8Bs;B@@@@@Ah, *             ,8i                  r@@@B:     1S ,M@@@@@@#8; *            1AB35.i:               X@@8 .   SGhr ,A@@@@@@@@S *            1@h31MX8                18Hhh3i .i3r ,A@@@@@@@@@5 *            ;@&amp;i,58r5                 rGSS:     :B@@@@@@@@@@A *             1#i  . 9i                 hX.  .: .5@@@@@@@@@@@1 *              sG1,  ,G53s.              9#Xi;hS5 3B@@@@@@@B1 *               .h8h.,A@@@MXSs,           #@H1:    3ssSSX@1 *               s ,@@@@@@@@@@@@Xhi,       r#@@X1s9M8    .GA981 *               ,. rS8H#@@@@@@@@@@#HG51;.  .h31i;9@r    .8@@@@BS;i; *                .19AXXXAB@@@@@@@@@@@@@@#MHXG893hrX#XGGXM@@@@@@@@@@MS *                s@@MM@@@hsX#@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@&amp;, *              :GB@#3G@@Brs ,1GM@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@B, *            .hM@@@#@@#MX 51  r;iSGAM@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@8 *          :3B@@@@@@@@@@@&amp;9@h :Gs   .;sSXH@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@: *      s&amp;HA#@@@@@@@@@@@@@@M89A;.8S.       ,r3@@@@@@@@@@@@@@@@@@@@@@@@@@@r *   ,13B@@@@@@@@@@@@@@@@@@@5 5B3 ;.         ;@@@@@@@@@@@@@@@@@@@@@@@@@@@i *  5#@@#&amp;@@@@@@@@@@@@@@@@@@9  .39:          ;@@@@@@@@@@@@@@@@@@@@@@@@@@@; *  9@@@X:MM@@@@@@@@@@@@@@@#;    ;31.         H@@@@@@@@@@@@@@@@@@@@@@@@@@: *   SH#@B9.rM@@@@@@@@@@@@@B       :.         3@@@@@@@@@@@@@@@@@@@@@@@@@@5 *     ,:.   9@@@@@@@@@@@#HB5                 .M@@@@@@@@@@@@@@@@@@@@@@@@@B *           ,ssirhSM@&amp;1;i19911i,.             s@@@@@@@@@@@@@@@@@@@@@@@@@@S *              ,,,rHAri1h1rHC@#353Sh:          8@@@@@@@@@@@@@@@@@@@@@@@@@#: *            .A3hH@#5S553&amp;@@#h   i:i9S          #@@@@@@@@@@@@@@@@@@@@@@@@@A. * */</code></pre>]]></content>
      
      
      <categories>
          
          <category> 注释 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 注释 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>12个花里胡哨的CSS炫酷案例！（附源码）</title>
      <link href="2020/12/05/12-ge-hua-li-hu-shao-de-css-xuan-ku-an-li-fu-yuan-ma/"/>
      <url>2020/12/05/12-ge-hua-li-hu-shao-de-css-xuan-ku-an-li-fu-yuan-ma/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>上个礼拜看了许多关于平面构成的资料，我就边用 CSS 画了一些类似背景图案的玩意儿。这里给大家选了 12 种，从观察者的角度由易到难的给大家解一下思路。</p><p>*<strong>*预警，本文没有对基础知识的详解，不过推荐一边看文章实践一边学习，效率更高。**</strong></p><h2 id="效果图展示"><a href="#效果图展示" class="headerlink" title="效果图展示"></a>效果图展示</h2><p><strong>图片下载 : 右键此图片另存为可保存此图片</strong></p><p><img src="/images/640.gif"></p><h2 id="分析顺序介绍"><a href="#分析顺序介绍" class="headerlink" title="分析顺序介绍"></a>分析顺序介绍</h2><p>粗略看过效果之后，我们按照图案种元素的多少及元素变异程度、动画难易程度、有无头绪等因素给文章小节排一个序，顺序见下图。每小节都有源码，你可以通过标题直接跳转到你想看的图案。</p><p><strong>图片下载 : 右键此图片另存为可保存此图片</strong><br><img src="/images/640.jpg"></p><h3 id="1-圆环变形"><a href="#1-圆环变形" class="headerlink" title="1.圆环变形"></a>1.圆环变形</h3><p><strong>图片下载 : 右键此图片另存为可保存此图片</strong></p><p><img src="/images/yuanhuan.gif"></p><pre><code>  &lt;div class=&quot;card&quot;&gt;    &lt;div class=&quot;node&quot; v-for=&quot;item in 100&quot;&gt;&lt;/div&gt;  &lt;/div&gt;  &lt;style&gt;    // 其余所有图案的 card 类标签都套用了这段样式，为了减少文章长度，下略。    .card &#123;      width: 200px;      height: 200px;      display: flex;      flex-wrap: wrap;      justify-content: center;      align-items: center;    &#125;&lt;/style&gt;</code></pre><p><strong>图片下载 : 右键此图片另存为可保存此图片</strong></p><p><img src="/images/yuanhuan.jpg"></p><p>通过图片动画效果，我们大致得出动画变化的模式。</p><ul><li><p>有部分圆环变形成两个圆环的长度，并改变了底色。</p><p>观察变长圆环的顺序，能发现“每逢三就变长”这种规律，推测使用了 :nth-child(3) 选择器。</p></li></ul><p>下面是 CSS 源码。</p><pre><code>.card &#123;    justify-content: flex-start;    overflow: hidden;    cursor: pointer;    // 每逢三个元素，则执行动画，源代码和我们分析的动画的顺序相反，圆环是从长变短，不过不影响    .node &#123;      border: solid 5px #F29338;      border-radius: 50%;      &amp;:nth-child(3n) &#123;        width: 40px;        flex-basis: 40px;        background: #F8C798;        animation: change-circle-width 2s ease alternate infinite;      &#125;    &#125;  &#125;  @keyframes change-circle-width &#123;    from &#123;      width: 40px;      flex-basis: 40px;      background: #F8C798;    &#125;    60% &#123;      width: 20px;      flex-basis: 20px;      background: transparent;    &#125;    // 动画 60% - 100% 这段时间，属性没有变动，所以图案看起来像是静止的。    to &#123;      width: 20px;      flex-basis: 20px;      background: transparent;    &#125;  &#125;</code></pre><h3 id="2-厕所里的瓷砖"><a href="#2-厕所里的瓷砖" class="headerlink" title="2. 厕所里的瓷砖"></a><strong>2. 厕所里的瓷砖</strong></h3><p><strong>图片下载 : 右键此图片另存为可保存此图片</strong></p><p><img src="/images/cesuo.gif"></p><pre><code>&lt;div class=&quot;card&quot;&gt;    &lt;div class=&quot;node&quot; v-for=&quot;item in 100&quot;&gt;&lt;/div&gt;  &lt;/div&gt;</code></pre><p>和上一张图思路类似，只是多出了一些圆形小球。</p><ul><li><p>小球的动画应该包含位置的偏移和颜色、透明度的改变。</p></li><li><p>当鼠标悬浮时（注意图片右下角的鼠标手势），图中多了一排小圆球，样式和行为和前一排原球几乎一样。</p><p>推测第二排圆球使用了 animation-delay 效果。</p></li><li><p>观察小球的个数，欸？貌似有些问题，圆形小球数量和瓷砖数量对不上。应该是对小球的显隐的顺序做了特殊处理。</p></li></ul><p>下面是 CSS 源码。</p><pre><code> .card &#123;    cursor: pointer;    // 鼠标悬浮时显示第二排的小圆球    &amp;:hover &#123;      .node &#123;        &amp;:nth-child(2n)::after &#123;          visibility: unset;        &#125;      &#125;    &#125;    .node &#123;      background: #71A2DB;      outline: solid 1px white;      // 3n-1，3n+1 一起使用时等价于 3n      &amp;:nth-child(3n-1),      &amp;:nth-last-child(3n+1) &#123;        background: #C2D7F0;      &#125;      // 去除末行及每行末尾的伪元素      &amp;:nth-child(10n)::after,      &amp;:nth-last-child(-n+10)::after &#123;        display: none;      &#125;      &amp;::after &#123;        left: 75%;        top: 75%;        width: 50%;        height: 50%;        border-radius: 50%;        background: white;        animation: card-4-circle-move 1s linear alternate infinite;      &#125;      &amp;:nth-child(2n)::after &#123;        animation: card-4-circle-move-delay 1s linear alternate infinite;        animation-delay: .3s;        visibility: hidden;      &#125;    &#125;  &#125;  @keyframes card-4-circle-move &#123;    from &#123;      left: 45%;      top: 45%;      opacity: 1;      background: white;    &#125;    to &#123;      left: 130%;      top: 130%;      opacity: 0;      background: #F2C07D;    &#125;  &#125;  @keyframes card-4-circle-move-delay &#123;    from &#123;      left: 45%;      top: 45%;      opacity: 1;      background: #F2C07D;      z-index: 2;    &#125;    to &#123;      left: 130%;      top: 130%;      opacity: 0;      background: white;    &#125;  &#125;</code></pre><h3 id="3-三角与圆球印花"><a href="#3-三角与圆球印花" class="headerlink" title="3.三角与圆球印花"></a>3.三角与圆球印花</h3><pre><code>&lt;div class=&quot;card&quot;&gt;    &lt;div class=&quot;node&quot; v-for=&quot;item in 100&quot;&gt;&lt;/div&gt;  &lt;/div&gt;</code></pre><p>乍一眼看，用每个节点的伪元素画一个圆形和一个三角形就完成了这张图。</p><p>其实并不对，先别往下翻答案，想想为什么。</p><p>答案分割线，小心越界：</p><hr><p>观察图案和 HTML 代码：</p><ul><li><p>从每行来看，每行有 10 个三角形，但是每行有 9 个圆+2 个半圆。</p><p>猜测圆形是由半圆组装的，再结合纵向观测，可以推测圆形是由 4 个 1/4 圆组成的。</p><p>但是用伪元素没有办法画 1/4 圆。思路不对，再换个思路。</p><p>猜测伪元素是一个整圆，利用 Box-Shadow 复制了 4 份，分别放在了正方形四个角落。.card 或是 .node 使用 overflow 裁剪掉多余元素。</p></li><li><p>再看三角形。</p><p>三角形的画法比较常见，可以用透明 Border + 带颜色的 Border 绘制。</p><p>三角形的角度变化很有规律，可以大致推测，旋转角度和列数有关。</p></li></ul><pre><code>.card &#123;    overflow: hidden;    cursor: pointer;    // 根据三角形的序号与10的模来确定旋转角度    @for $i from 0 through 9 &#123;    .node:nth-child(10n - #&#123;$i&#125;)::before &#123;        transform: rotate((-19 + $i) + unquote(&#39;deg&#39;));    &#125;    &#125;    // 上面那串函数编译出来就成了下面这一长串模样    // .node:nth-child(10n)::before &#123;    //   transform: rotate(-19deg);    // &#125;    // .node:nth-child(10n-1)::before &#123;    //   transform: rotate(-18deg);    // &#125;    // .node:nth-child(10n-2)::before &#123;    //   transform: rotate(-17deg);    // &#125;    // .node:nth-child(10n-3)::before &#123;    //   transform: rotate(-16deg);    // &#125;    // .node:nth-child(10n-4)::before &#123;    //   transform: rotate(-15deg);    // &#125;    // .node:nth-child(10n-5)::before &#123;    //   transform: rotate(-14deg);    // &#125;    // .node:nth-child(10n-6)::before &#123;    //   transform: rotate(-13deg);    // &#125;    // .node:nth-child(10n-7)::before &#123;    //   transform: rotate(-12deg);    // &#125;    // .node:nth-child(10n-8)::before &#123;    //   transform: rotate(-11deg);    // &#125;    // .node:nth-child(10n-9)::before &#123;    //   transform: rotate(-10deg);    // &#125;    .node &#123;    background: #F5C1CB;    filter: saturate(1.6);    // 通过伪元素 Border 绘制的三角形    &amp;::before &#123;        left: 0;        top: -8px;        border: solid 10px transparent;        border-bottom-color: #D2F3BF;        z-index: 1;    &#125;    // 使用 Box-Shadow 属性，将圆形复制了额外的三份    &amp;::after &#123;        left: -5px;        top: -5px;        width: 9px;        height: 9px;        border-radius: 50%;        background: #FBF5C5;        z-index: 0;        box-shadow: 20px 0 #FBF5C5, 20px 20px #FBF5C5, 0 20px #FBF5C5;    &#125;    &#125;&#125;</code></pre><h3 id="4-瓷砖变异"><a href="#4-瓷砖变异" class="headerlink" title="4.瓷砖变异"></a>4.瓷砖变异</h3><p><strong>图片下载 : 右键此图片另存为可保存此图片</strong></p><p><img src="/images/cizhuan.gif"></p><pre><code> &lt;div class=&quot;card&quot;&gt;    &lt;div class=&quot;node&quot; v-for=&quot;item in 100&quot;&gt;&lt;/div&gt;  &lt;/div&gt;</code></pre><p>这张图应该大体上来说比较简单。需要额外注意的是，那些特殊颜色的圆出现的位置。</p><ul><li><p>观察鼠标移动时格子的缩放，可以推测每个格子由 4 个 1/4 圆和一个十字组成。</p><p>十字好处理，由 2*2 像素的伪元素通过 Box-Shadow 复制即可完成。</p><p>根据 1/4 圆可推测每个格子都有 overflow: hidden 样式。</p></li><li><p>特殊颜色的圆有多种可能的实现方法。</p><p>第一，在 Scss 编译时，调用随机函数，给这些随机位置圆改变颜色就好。</p><p>第二，使用蝉原则或类似方式实现 CSS 伪随机。</p></li></ul><p>害~ 这里直接上源码。</p><pre><code> card &#123;    .node &#123;      background: #EE92A5;      overflow: hidden;      transition: .3s;      cursor: pointer;      // 鼠标在格子上悬浮时的放大效果      &amp;:hover &#123;        transform: scale(1.4);      &#125;      // 十字线的构成      &amp;::before &#123;        left: 8px;        top: 8px;        width: 2px;        height: 2px;        background: white;        z-index: 0;        box-shadow: 0 2px white, 2px 0 white, -2px 0 white, 0 -2px white;      &#125;      // 圆形的构成      &amp;::after &#123;        left: -8px;        top: -8px;        width: 15px;        height: 15px;        border-radius: 50%;        background: #F8C798;        z-index: 0;        box-shadow: 20px 0 #F8C798, 20px 20px #F8C798, 0 20px #F8C798;      &#125;      // CSS 伪随机给特定元素设置特殊色。在实践时，可以自己调整以下参数，以达到想要的效果。      &amp;:nth-child(2n)::after &#123;        background: #E03A5C;      &#125;      &amp;:nth-child(3n-1)::after,      &amp;:nth-child(3n)::after,      &amp;:nth-child(5n)::after,      &amp;:nth-child(6n)::after,      &amp;:nth-child(7n-3)::after &#123;        background: #F8C798      &#125;    &#125;  &#125;</code></pre><h3 id="5-山与云"><a href="#5-山与云" class="headerlink" title="5. 山与云"></a>5. 山与云</h3><p><strong>图片下载 : 右键此图片另存为可保存此图片</strong></p><p><img src="/images/shanyuyun.gif"></p><pre><code>  &lt;div class=&quot;card&quot;&gt;    &lt;div class=&quot;node&quot; v-for=&quot;item in 100&quot;&gt;&lt;/div&gt;  &lt;/div&gt;</code></pre><p>这个图案，嘛… 讲道理，这谁看的出来是啥玩意儿嘛！其实我心里想，要不是玩意儿是自己画的，我估摸着自己也看不透这图案<del>（红尘）</del>，不过下面还是正经扒一下。</p><ul><li><p>三角形，好办，用伪元素画。至于颜色么，可以仿照上一张图片的 CSS 伪随机的思路。至于山的动画，不好确定是山在动还是说山在跟随其它元素动。</p></li><li><p>再看横线，欸不对，这图里怎么有这么多横线竖线，到底哪一个伪元素哪一个又不是，害…</p><p>猜测，横线竖线是格子的 Outline。不对，Outline 只能是正方形的。</p><p>那会不会是 Border 呢？能从观察得出，这些横线的边缘又半透明像素，再结合三角形可有 Border 绘制而成，推测，横线竖线是圆角矩形格子的 Border，被形成三角形的伪元素的白色 Border 遮挡而消失了一部分。</p></li><li><p>继续观察线条，发现有的横线会消失，有的横线只会缩短而不会消失，所有竖线都只会缩短不会消失。</p><p>根据竖线变长时，一定伴随着横线的缩短或消失，推测，格子在经历高度的变化，而不是位移。继续推测，三角形可能是跟随格子一起运动。</p><p>再根据垂直方向两座山之间的横线和山的运动趋势是一样的，推测，图中横线是格子的上边而不是下边，下边都被遮住了。</p><p>猜测山把格子的下边遮住了，但这与实际观察不符，因为，山在向上运动时，竖线的伸缩有伸缩。格子的边的一部分的消失并不是构成山的伪元素的 Border 遮挡而成的，而是另一个伪元素，大致也是矩形。</p></li><li><p>我们可以大概构成这副图案了：格子被束缚在了 align-items: center 的 Flex 布局中，三角形以及另一个类似矩形的伪元素随着格子的运动而运动。</p></li></ul><p>嘛… 长吁一口气，要是上面没看懂的话，还是看下面这张图构好了。这是去掉白色遮罩物的样子。</p><p><strong>图片下载 : 右键此图片另存为可保存此图片</strong></p><p><img src="/images/shanyuyun.jpg"></p><p>（谁帮我命个名儿）</p><p>以下是 CSS 源码。</p><pre class=" language-.card"><code class="language-.card">.card &#123;    cursor: pointer;    // 横线与竖线并不是节点的 Border，而是背景色+遮罩形成的    // 格子会根据动画在高度上变化    .node &#123;      background: #A45963;      border-radius: 90%;      animation: card-1 .4s ease alternate infinite;      // 格子动画延迟处理      &:nth-child(2n) &#123;        animation-delay: .2s;      &#125;      &:nth-child(3n) &#123;        animation-delay: .3s;      &#125;      &:nth-child(4n) &#123;        animation-delay: .3s;      &#125;      // 山的颜色处理      &:nth-child(2n)::before &#123;        border-bottom-color: #F5CB6C;      &#125;      &:nth-child(3n)::before &#123;        border-bottom-color: #F5856C;      &#125;      &:nth-child(4n)::before,      &:nth-child(5n)::before,      &:nth-child(6n)::before,      &:nth-child(7n)::before,      &:nth-child(8n)::before,      &:nth-child(9n)::before,      &:nth-child(10n)::before &#123;        border-bottom-color: #D2F3BF;      &#125;      // 山的构成      &::before &#123;        left: 0;        top: -5px;        border: solid 10px transparent;        border-bottom-color: #D2F3BF;        z-index: 2;      &#125;      // 白色遮罩      &::after &#123;        left: 1px;        top: 1px;        width: 19px;        height: 18px;        background: white;      &#125;      // 这是一个特殊处理，为了让白色遮罩长度减少1像素以显示每行格子的背景颜色的最后一列像素      &:nth-child(10n)::after &#123;        width: 18px;      &#125;    &#125;  &#125;  @keyframes card-1 &#123;    from &#123;      height: 19px;    &#125;    to &#123;      height: 8px;    &#125;  &#125;</code></pre><h3 id="6-冰崖上生长的仙人掌"><a href="#6-冰崖上生长的仙人掌" class="headerlink" title="6. 冰崖上生长的仙人掌"></a>6. 冰崖上生长的仙人掌</h3><p><strong>图片下载 : 右键此图片另存为可保存此图片</strong></p><p><img src="/images/bingyashangshengzhangdexianrenzhang.gif"></p><pre><code>&lt;div class=&quot;card&quot;&gt;    &lt;div class=&quot;node&quot; v-for=&quot;item in 100&quot;&gt;&lt;/div&gt;  &lt;/div&gt;</code></pre><p>这张图比较简单。</p><ul><li><p>易知格子由横线和虚线及背景颜色组成。</p><p>易知圆柱状的“仙人掌”是每个格子单独控制裁切得来。</p><p>半圆形到正方形变化的动画可以由 Clip-Path 属性裁切得来，推测竖线和横线分别是一种伪元素绘制。</p></li></ul><p>以下是 CSS 源码。</p><pre><code>.card &#123;    .node &#123;      background: #71A2DB;      // 部分仙人掌添加动画      &amp;:nth-child(3n)::after,      &amp;:nth-child(3n+2)::after,      &amp;:nth-child(5n-3)::after,      &amp;:nth-child(6n-2)::after,      &amp;:nth-child(7n+1)::after &#123;        animation: card-7-grow .6s ease alternate infinite;      &#125;      // 一部分仙人掌不需要添加动画      &amp;:nth-child(3n-1)::after,      &amp;:nth-child(3n)::after,      &amp;:nth-child(5n)::after,      &amp;:nth-child(6n)::after,      &amp;:nth-child(7n-3)::after &#123;        clip-path: circle(75% at 0 50%);        animation: none;      &#125;      // 这里使用的是背景色 + Box-Shadow 画线。也可以使用 Border + Box-Shadow 画线      &amp;::before &#123;        top: 1px;        left: 0px;        width: 100%;        height: 1px;        background: white;        box-shadow: 0 2px white, 0 4px white, 0 6px white, 0 8px white, 0 10px white, 0 12px white, 0 14px white, 0 16px white, 0 18px white;      &#125;      &amp;::after &#123;        top: 0;        left: 1px;        width: 1px;        height: 100%;        background: white;        box-shadow: 2px 0 white, 4px 0 white, 6px 0 white, 8px 0 white, 10px 0 white, 12px 0 white, 14px 0 white, 16px 0 white, 18px 0 white;        transition: .6s;      &#125;    &#125;    // 鼠标悬浮时显示所有的线条（为了使 Clip-Path 有过渡效果，这里不能直接去掉属性，而是要换一个较大的值）    &amp;:hover &#123;      .node &#123;        &amp;::after &#123;          animation: none;          clip-path: circle(150% at 0% 50%);        &#125;      &#125;    &#125;  &#125;  @keyframes card-7-grow &#123;    from &#123;      clip-path: circle(50% at 0 50%);    &#125;    50% &#123;      clip-path: circle(50% at 0 50%);    &#125;    to &#123;      clip-path: circle(150% at 0 50%);    &#125;  &#125;</code></pre><h3 id="7-No-Name-2"><a href="#7-No-Name-2" class="headerlink" title="7. No Name 2"></a><strong>7. No Name 2</strong></h3><p><strong>图片下载 : 右键此图片另存为可保存此图片</strong></p><p><img src="/images/noName.jpg"></p><p>这个玩意儿是上一张图的升级版本，误导可能在会猜测伪元素是点，而不是线，然后用空出的一个伪元素去构造菱形格子内其它东西。</p><pre><code>.card:nth-child(8) &#123;    .node &#123;      border: solid 8px #71A2DB;      border-top: 0;      border-left: 0;      background: #71A2DB;      clip-path: polygon(50% 0, 100% 50%, 50% 100%, 0% 50%);      transition: .3s;      cursor: pointer;      // 给一部分格子去掉 Border      &amp;:nth-child(3n-1),      &amp;:nth-child(3n),      &amp;:nth-child(5n),      &amp;:nth-child(6n),      &amp;:nth-child(7n-3) &#123;        border: none;        clip-path: circle(50%);        &amp;:hover &#123;          clip-path: circle(30%);        &#125;      &#125;      // 将一部分格子裁剪为菱形区域。Clip-Path 四个值对应菱形四个顶点位置。      &amp;:nth-child(2n),      &amp;:nth-child(3n) &#123;        border: solid 8px #CCDDF2;        clip-path: polygon(50% 0, 100% 50%, 50% 100%, 0% 50%);      &#125;      &amp;::before &#123;        top: 1px;        left: 0px;        width: 100%;        height: 1px;        background: white;        box-shadow: 0 2px white, 0 4px white, 0 6px white, 0 8px white, 0 10px white, 0 12px white, 0 14px white, 0 16px white, 0 18px white;      &#125;      &amp;::after &#123;        top: 0;        left: 1px;        width: 1px;        height: 100%;        background: white;        box-shadow: 2px 0 white, 4px 0 white, 6px 0 white, 8px 0 white, 10px 0 white, 12px 0 white, 14px 0 white, 16px 0 white, 18px 0 white;      &#125;    &#125;  &#125;</code></pre><h3 id="8-挤冰淇淋"><a href="#8-挤冰淇淋" class="headerlink" title="8. 挤冰淇淋"></a>8. 挤冰淇淋</h3><p><strong>图片下载 : 右键此图片另存为可保存此图片</strong></p><p><img src="/images/jibingqilin.gif"></p><p>(⊙﹏⊙)，我不是故意画这么恶心的，是因为他要用到 CSS contrast 滤镜，这个滤镜会增加对比度，提亮亮色。</p><p>融合效果的原理是这样的：在父元素使用一个 contrast 滤镜，在子元素使用 blur 滤镜，会发现，子元素在互相接近时，会产生融合效果。</p><p>图片边框的处理方法应该很常见了，用 Background-Image 就能搞定，此外，《CSS Secret》还提到一种使用 Background 渐变叠加的方式产生图片边框，</p><p>下面就直接给代码了。</p><pre><code>// 可以看到父元素用到了 filter: contrast 滤镜  .card &#123;    position: relative;    box-sizing: border-box;    flex-direction: column;    justify-content: flex-end;    align-items: center;    border: solid .5em transparent;    border-image: 8 repeating-linear-gradient(-45deg, #F5E66C 0, #F5E66C .5em, transparent 0, transparent 1em, #DA60D2 0, #DA60D2 1.5em, transparent 0, transparent 2em);    background: white;    cursor: pointer;    filter: contrast(10);    // 给每个格子分别设定背景颜色和动画延迟    $background:(#DA60D2, #E7667E, #E7667E, #F5866C, #F5866C, #F5E66C);    @for $i from 1 through 6 &#123;      .node:nth-child(#&#123;$i&#125;) &#123;        width: (80-(10 * ($i - 1)))+unquote(&#39;px&#39;);        animation: card-6 .8s ease-in (0.1*$i)+unquote(&#39;s&#39;) alternate infinite, card-6-margin .8s ease-in alternate infinite;        background: nth($background, $i);      &#125;    &#125;    // 格子使用了 blur 滤镜    .node &#123;      flex-basis: 30px;      margin-top: -15px;      width: 30px;      height: 50px;      filter: blur(5px);    &#125;    // 鼠标悬浮时暂停动画，因为子元素的融化效果，所以需要把字体调粗一些    &amp;:hover &#123;      &amp;::before &#123;        content: &quot;Paused&quot;;        position: absolute;        left: 5px;        top: 5px;        font-weight: bolder;      &#125;      .node &#123;        animation-play-state: paused;      &#125;    &#125;    @keyframes card-6 &#123;      from &#123;        border-radius: 50%;      &#125;      to &#123;        width: 80px;        border-radius: 0;      &#125;    &#125;    @keyframes card-6-margin &#123;      from &#123;        margin-top: -13px;      &#125;      to &#123;        margin-top: 0px;      &#125;    &#125;  &#125;</code></pre><h3 id="9-Lionad"><a href="#9-Lionad" class="headerlink" title="9. Lionad"></a><strong>9. Lionad</strong></h3><p><strong>图片下载 : 右键此图片另存为可保存此图片</strong></p><p><img src="/images/Lionad.gif"></p><p>马上就到胜利的尾声了，坚持住！w(ﾟ Д ﾟ)w</p><pre><code>&lt;div class=&quot;card 5&quot;&gt;    &lt;div class=&quot;node&quot; /&gt;  &lt;/div&gt;</code></pre><p>这是我们第一次碰上背景移动的情况，不过这张图片组成简单，以下是分析。</p><ul><li><p>背景的移动不外乎都是 CSS Animation + Background-* 属性完成的。此图的背景渐变是一个简单的 45deg 的两条纹理渐变，推测背景使用了 Animation + Background-Position 进行平移。</p></li><li><p>再看文字部分，易得文字是由一个带 180deg 渐变的背景 + Text-Shadow 组成。</p><p>文字可以使用渐变背景？对，通过 Background-Clip 可以实现文字对背景图案裁剪功能。</p><p>由于 Text-Shadow 的颜色比渐变深，但是观察发现 Text-Shadow 并没有被裁剪进入字体中，推断文字应该是由两个伪元素组成的，使用 Background-Clip 属性的伪元素层级要比使用 Text-Shadow 的伪元素高。</p></li><li><p>最后是文字下面两道横线。这个的画实现方法太多了，双伪元素 Border 也可，Box-Shadow 也可，Border-Image 也可，Background-Image 也可…</p></li></ul><p>下面看源码。</p><pre><code>.card &#123;    background: linear-gradient(45deg, #F5CB6C 0%,#F5CB6C 20%,#F5856C 20%, #F5856C 45%,#F5CB6C 45%,#F5CB6C 70%,#F5856C 70%, #F5856C 95%,#F5CB6C 95%,#F5CB6C 100%);    background-size:30px 30px;    background-position:0 0;    animation: card-5 1s infinite linear;    cursor: pointer;    .node &#123;      // 使用 Background-Clip 的伪元素      &amp;::before &#123;        content: &quot;Lionad&quot;;        left: -1.5em;        top: -.7em;        font-size: 50px;        font-family: didot;        font-weight: bolder;        color: transparent;        background: linear-gradient(180deg, #F5CB6C, #F5856C);        background-size: 1px 2px;        background-clip: text;        -webkit-background-clip: text;        z-index: 2;      &#125;      // 生产 Text-Shadow 的伪元素      &amp;::after &#123;        content: &quot;Lionad&quot;;        left: -1.5em;        top: -.7em;        font-size: 50px;        font-family: didot;        font-weight: bolder;        color: transparent;        text-shadow: 4px 4px 0px #F5856C;        box-shadow: 0 5px 0px #F5CB6C, 0 12px 0px #F5856C;      &#125;    &#125;    @keyframes card-5 &#123;      0%&#123;        background-position: 0 0;      &#125;      100%&#123;        background-position: 30px 0;      &#125;    &#125;  &#125;</code></pre><h3 id="10-amp-11-万花筒"><a href="#10-amp-11-万花筒" class="headerlink" title="10.&amp;11.万花筒"></a>10.&amp;11.万花筒</h3><p><strong>图片下载 : 右键此图片另存为可保存此图片</strong></p><p><img src="/images/10wanhuatong.gif"></p><pre><code>&lt;div class=&quot;card 10&quot;&gt;&lt;/div&gt;&lt;div class=&quot;card 11&quot;&gt;&lt;/div&gt;</code></pre><p>把这两个图案放到一起是因为思路是一样的。实话说，第一次见到这种花纹，我也对这莫名其妙的色彩变化一脸懵逼，所以这里就直接讲原理了。</p><ul><li><p>两张图片都是用渐变画的，仔细观察能发现左边和右边的图案都是三层渐变的叠加。</p><p>不同的地方在于，左图最小的那层渐变是辐射渐变（Radial-Gradient），右图的则是圆锥渐变（英文叫 Conic-Gradient，饼图就可以用这玩意儿画）</p></li><li><p>莫名其妙的颜色变换（如左图中心点）使用的是 CSS 混合模式（CSS Blend-Mode）效果，它负责计算当两种色彩层叠在一起时最终显示的颜色，可以理解为滤镜。</p></li><li><p>背景移动之前看过，左图是变换 Background-Position，右图是变换 Background-Size</p></li></ul><p>以下是源码。</p><pre><code> // 右图的样式代码  .card &#123;    // 这里使用了三层背景渐变，两层圆锥渐变和一层辐射渐变    background-image:      repeating-conic-gradient(red 50%, #E1F5C4 60%),      repeating-conic-gradient(red 50%, #E1F5C4 60%),      radial-gradient(        gold 0%, gold 35%,        red 35%, red 40%,        orangered 40%, orangered 50%,        gold 50%, gold 60%,        yellowgreen 60%, yellowgreen 70%,        skyblue 70%, skyblue 80%,        steelblue 80%, steelblue 90%,        violet 90%      );    // 对每一层被渐变分别设置混合模式    background-blend-mode:      lighten,      overlay,      lighten;    // 对每一层被渐变分别设置背景大小（40px 是因为正好能被 200px 的盒子整除）    background-size:      40px 40px,      6em 6em,      8em 8em;    background-position: 50% 50%;    transition: .45s ease-in;    cursor: pointer;    // 鼠标悬浮时，变换渐变大小    &amp;:hover &#123;      background-size:        40px 40px,        4em 4em,        12em 12em;    &#125;  &#125;</code></pre><h3 id="12-トラ酱（Tiger）"><a href="#12-トラ酱（Tiger）" class="headerlink" title="12. トラ酱（Tiger）"></a><strong>12. トラ酱（Tiger）</strong></h3><p><strong>图片下载 : 右键此图片另存为可保存此图片</strong></p><p><img src="/images/Tiger.jpg"></p><p>一整图片而已，有啥了不起的？</p><p>不，这不是图片。</p><p>你以为有外链么？不，没有。这是仅用 Box-Shadow 绘制成的トラ酱。</p><p>它的 CSS 代码长这样：</p><pre><code> // 灰色 Border  .card &#123;    justify-content: flex-start;    align-items: flex-start;    border: solid 10px #eee;    box-sizing: border-box;    overflow: hidden;    // トラ酱    .node &#123;      width: 1px;      height: 1px;      box-shadow: ????? 你猜，使劲儿猜这后面有多长    &#125;  &#125;</code></pre><hr><h2 id="练习题"><a href="#练习题" class="headerlink" title="练习题"></a>练习题</h2><p>最后，这里有几个需要稍微思考的练习，给尚存斗志的同学实践<del>（我不是白嫖！）</del>。</p><ol><li>《トラ酱》，利用 Box-Shadow + CSS Animation 实现 GIF 的播放</li><li>《冰崖上生长的仙人掌》，能不能让这些横着长的仙人掌生长的长度超过两格？</li></ol><p>哦对了，千万别问我这些练习题有啥用。</p><p>这些练习题的作用就和我画的这些图案一样——我也不知道有啥用，只是好玩。</p>]]></content>
      
      
      <categories>
          
          <category> css </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 源码 </tag>
            
            <tag> css </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>史上最全前端面试题</title>
      <link href="2020/12/05/shi-shang-zui-quan-qian-duan-mian-shi-ti/"/>
      <url>2020/12/05/shi-shang-zui-quan-qian-duan-mian-shi-ti/</url>
      
        <content type="html"><![CDATA[<h2 id="Vue-面试题"><a href="#Vue-面试题" class="headerlink" title="Vue 面试题"></a><strong>Vue 面试题</strong></h2><p><strong>生命周期函数面试题</strong></p><ul><li>1.什么是 vue 生命周期</li><li>2.vue 生命周期的作用是什么</li><li>3.第一次页面加载会触发哪几个钩子</li><li>4.简述每个周期具体适合哪些场景</li><li>5.created 和 mounted 的区别</li><li>6.vue 获取数据在哪个周期函数</li><li>7.请详细说下你对 vue 生命周期的理解？</li></ul><p><strong>vue 路由面试题</strong></p><ul><li>1.mvvm 框架是什么？</li><li>2.vue-router 是什么?它有哪些组件</li><li>3.active-class 是哪个组件的属性？</li><li>4.怎么定义 vue-router 的动态路由? 怎么获取传过来的值</li><li>5.vue-router 有哪几种导航钩子?</li><li>6.route 和 router 的区别</li><li>7.vue-router 响应路由参数的变化</li><li>8.vue-router 传参</li><li>9.vue-router 的两种模式</li><li>10.vue-router 实现路由懒加载（ 动态加载路由 ）</li></ul><p><strong>vue 常见面试题</strong></p><ul><li>1.vue 优点</li><li>2.vue 父组件向子组件传递数据？</li><li>3.子组件像父组件传递事件</li><li>4.v-show 和 v-if 指令的共同点和不同点</li><li>5.如何让 CSS 只在当前组件中起作用</li><li>6.的作用是什么?</li><li>7.如何获取 dom</li><li>8.说出几种 vue 当中的指令和它的用法？</li><li>9.vue-loader 是什么？使用它的用途有哪些？</li><li>10.为什么使用 key</li><li>11.axios 及安装</li><li>12.axios 解决跨域</li><li>13.v-modal 的使用</li><li>14.scss 的安装以及使用</li><li>15.请说出 vue.cli 项目中 src 目录每个文件夹和文件的用法？</li><li>16.分别简述 computed 和 watch 的使用场景</li><li>17.v-on 可以监听多个方法吗</li><li>18.$nextTick 的使用</li><li>19.vue 组件中 data 为什么必须是一个函数</li><li>20.vue 事件对象的使用</li><li>21 组件间的通信</li><li>22.渐进式框架的理解</li><li>23.Vue 中双向数据绑定是如何实现的</li><li>24.单页面应用和多页面应用区别及优缺点</li><li>25.vue 中过滤器有什么作用及详解</li><li>26.v-if 和 v-for 的优先级</li><li>27.assets 和 static 的区别</li><li>28.列举常用的指令</li><li>29.vue 常用的修饰符</li><li>30.数组更新检测</li><li>31.Vue.set 视图更新</li><li>32.自定义指令详解</li><li>33.vue 的两个核心点</li><li>34.vue 和 jQuery 的区别</li><li>35 引进组件的步骤</li><li>36.Vue-cli 打包命令是什么？打包后悔导致路径问题，应该在哪里修改</li><li>37.三大框架的对比</li><li>38.跨组件双向数据绑定</li><li>39.delete 和 Vue.delete 删除数组的区别</li><li>40.SPA 首屏加载慢如何解决</li><li>41.Vue-router 跳转和 location.href 有什么区别</li><li>42.vue slot</li><li>43.你们 vue 项目是打包了一个 js 文件，一个 css 文件，还是有多个文件？</li><li>44.vue 遇到的坑，如何解决的？</li><li>45.Vue 里面 router-link 在电脑上有用，在安卓上没反应怎么解决？</li><li>46.Vue2 中注册在 router-link 上事件无效解决方法</li><li>47.RouterLink 在 IE 和 Firefox 中不起作用（路由不跳转）的问题</li><li>48.axios 的特点有哪些</li><li>49.请说下封装 vue 组件的过程？</li><li>50.vue 各种组件通信方法（父子 子父 兄弟 爷孙 毫无关系的组件）</li><li>51.params 和 query 的区别</li><li>52.vue mock 数据</li><li>53 vue 封装通用组件</li><li>54.vue 初始化页面闪动问题</li><li>55.vue 禁止弹窗后的屏幕滚动</li><li>56.vue 更新数组时触发视图更新的方法</li><li>57.vue 常用的 UI 组件库</li><li>58.vue 如何引进本地背景图片</li><li>59.vue 如何引进 sass</li><li>60.vue 修改打包后静态资源路径的修改</li></ul><p><strong>vuex 常见面试题</strong></p><ul><li>1.vuex 是什么？怎么使用？哪种功能场景使用它？</li><li>2.vuex 有哪几种属性</li><li>3.不使用 Vuex 会带来什么问题</li><li>4.Vue.js 中 ajax 请求代码应该写在组件的 methods 中还是 vuex 的 actions 中？</li><li>5.vuex 一个例子方法</li><li>6.Vuex 中如何异步修改状态</li><li>7.Vuex 中 actions 和 mutations 的区别</li></ul><p><strong>vue 项目实战</strong></p><ul><li>1.顶部悬停效果</li><li>2.电话本列表效果（ 右边字母分类 上下滑动 旁边字母显示高亮）</li><li>3.vue 做代理</li><li>4.Vue 路由切换时的左滑和右滑效果示例</li></ul><h2 id="ES6-面试题"><a href="#ES6-面试题" class="headerlink" title="ES6 面试题"></a><strong>ES6 面试题</strong></h2><p><strong>ES6 新增方法面试题</strong></p><ul><li>1.let const var 比较</li><li>2.反引号（`）标识</li><li>3.函数默认参数</li><li>4.箭头函数</li><li>5.属性简写</li><li>6.方法简写</li><li>7.Object.keys()方法，获取对象的所有属性名或方法名</li><li>8.Object.assign ()原对象的属性和方法都合并到了目标对象</li><li>9.for…of 循环</li><li>10.import 和 export</li><li>11.Promise 对象</li><li>12.解构赋值</li><li>13.set 数据结构（可用于快速去重）</li><li>14.Spread Operator 展开运算符(…)</li><li>15.字符串新增方法</li></ul><p><strong>ES6 数组面试题</strong></p><ul><li>1.forEach()</li><li>2.map()</li><li>3.filter()</li><li>4.reduce()</li><li>5.some()</li><li>6.every()</li><li>7.all()方法</li></ul><p><strong>ES6 编程题</strong></p><ul><li>1.使用解构，实现两个变量的值的交换</li><li>2.利用数组推导，计算出数组 [1,2,3,4] 每一个元素的平方并组成新的数组。</li><li>3.使用 ES6 改下面的模板</li><li>4.把以下代码使用两种方法，来依次输出 0 到 9？</li></ul><h2 id="react-面试题"><a href="#react-面试题" class="headerlink" title="react 面试题"></a><strong>react 面试题</strong></h2><p><strong>react 生命周期面试题</strong></p><ul><li>1.react 生命周期函数</li><li>2.react 生命周期中，最适合与服务端进行数据交互的是哪个函数</li><li>3.运行阶段生命周期调用顺序</li><li>4.shouldComponentUpdate 是做什么的，（react 性能优化是哪个周期函数？）</li><li>5.指出(组件)生命周期方法的不同</li></ul><p><strong>react 基础面试题</strong></p><ul><li>1.React 中 keys 的作用是什么？</li><li>2.React 中 refs 的作用是什么？</li><li>3.React 中有三种构建组件的方式</li><li>4.调用 setState 之后发生了什么？</li><li>5.react diff 原理（常考，大厂必考）</li><li>6.为什么建议传递给 setState 的参数是一个 callback 而不是一个对象</li><li>7.除了在构造函数中绑定 this，还有其它方式吗</li><li>8.setState 第二个参数的作用</li><li>9.(在构造函数中)调用 super(props) 的目的是什么</li><li>10.简述 flux 思想</li><li>11.在 React 当中 Element 和 Component 有何区别？</li><li>12.描述事件在 React 中的处理方式。</li><li>13.createElement 和 cloneElement 有什么区别？</li><li>14.如何告诉 React 它应该编译生产环境版本？</li><li>15.Controlled Component 与 Uncontrolled Component 之间的区别是什么？</li></ul><p><strong>react 组件面试题</strong></p><ul><li>1.展示组件(Presentational component)和容器组件(Container component)之间有何不同</li><li>2.类组件(Class component)和函数式组件(Functional component)之间有何不同</li><li>3.(组件的)状态(state)和属性(props)之间有何不同</li><li>4.何为受控组件(controlled component)</li><li>5.何为高阶组件(higher order component)</li><li>6.应该在 React 组件的何处发起 Ajax 请求</li><li>7.react 中组件传值</li><li>8.什么时候在功能组件( Class Component )上使用类组件( Functional Component )？</li><li>9.受控组件( controlled component )与不受控制的组件( uncontrolled component )有什么区别？</li><li>10.react 组件的划分业务组件技术组件？</li></ul><p><strong>redux 面试题</strong></p><ul><li>1.redux 中间件</li><li>2.redux 有什么缺点</li><li>3.了解 redux 么，说一下 redux 把</li></ul><p><strong>react 性能比较面试题</strong></p><ul><li>1.vue 和 react 的区别</li><li>2.react 性能优化的方案</li><li>3.React 项目用过什么脚手架</li><li>4.介绍一下 webpack webpack</li><li>5.如果你创建了类似于下面的 Twitter 元素，那么它相关的类定义是啥样子的？</li><li>6.为什么我们需要使用 React 提供的 Children API 而不是 JavaScript 的 map？</li></ul><h2 id="js-面试题"><a href="#js-面试题" class="headerlink" title="js 面试题"></a><strong>js 面试题</strong></h2><ul><li>1.简述同步和异步的区别</li><li>2.怎么添加、移除、复制、创建、和查找节点</li><li>3.实现一个函数 clone 可以对 Javascript 中的五种主要数据类型（Number、string、Object、Array、Boolean）进行复制</li><li>4.如何消除一个数组里面重复的元素</li><li>5.写一个返回闭包的函数</li><li>6.使用递归完成 1 到 100 的累加</li><li>7.Javascript 有哪几种数据类型</li><li>8.如何判断数据类型</li><li>9.console.log(1+’2’)和 console.log(1-‘2’)的打印结果</li><li>10.Js 的事件委托是什么，原理是什么</li><li>11.如何改变函数内部的 this 指针的指向</li><li>12.列举几种解决跨域问题的方式，且说明原理</li><li>13.谈谈垃圾回收机制的方式及内存管理</li><li>14.写一个 function ，清除字符串前后的空格</li><li>15.js 实现继承的方法有哪些</li><li>16.判断一个变量是否是数组，有哪些办法</li><li>17.let ，const ，var 有什么区别</li><li>18.箭头函数与普通函数有什么区别</li><li>19.随机取 1-10 之间的整数</li><li>20.new 操作符具体干了什么</li><li>21.Ajax 原理</li><li>22.模块化开发怎么做</li><li>23.异步加载 Js 的方式有哪些</li><li>24.xml 和 json 的区别</li><li>25.webpack 如何实现打包的</li><li>26.常见 web 安全及防护原理</li><li>27.用过哪些设计模式</li><li>28.为什么要同源限制</li><li>29.offsetWidth/offsetHeight,clientWidth/clientHeight 与 scrollWidth/scrollHeight 的区别</li><li>30.javascript 有哪些方法定义对象</li><li>31.说说你对 promise 的了解</li><li>32.谈谈你对 AMD、CMD 的理解</li><li>33.web 开发中会话跟踪的方法有哪些</li><li>34.介绍 js 有哪些内置对象？</li><li>35.说几条写 JavaScript 的基本规范？</li><li>36.javascript 创建对象的几种方式？</li><li>37.eval 是做什么的？</li><li>38.null，undefined 的区别？</li><li>39.[“1”, “2”, “3”].map(parseInt) 答案是多少？</li><li>40.javascript 代码中的”use strict”;是什么意思 ? 使用它区别是什么？</li><li>41.js 延迟加载的方式有哪些？</li><li>42.defer 和 async</li><li>43.说说严格模式的限制</li><li>44.attribute 和 property 的区别是什么？</li><li>45.ECMAScript6 怎么写 class 么，为什么会出现 class 这种东西?</li><li>46.常见兼容性问题</li><li>47.函数防抖节流的原理</li><li>48.原始类型有哪几种？null 是对象吗？</li><li>49.为什么 console.log(0.2+0.1==0.3) //false</li><li>50.说一下 JS 中类型转换的规则？</li><li>51.深拷贝和浅拷贝的区别？如何实现</li><li>52.如何判断 this？箭头函数的 this 是什么</li><li>53.== 和 ===的区别</li><li>54.什么是闭包</li><li>55.JavaScript 原型，原型链 ? 有什么特点？</li><li>56.typeof()和 instanceof()的用法区别</li><li>57.什么是变量提升</li><li>58.all、apply 以及 bind 函数内部实现是怎么样的</li><li>59.为什么会出现 setTimeout 倒计时误差？如何减少</li><li>60.谈谈你对 JS 执行上下文栈和作用域链的理解</li><li>61.new 的原理是什么？通过 new 的方式创建对象和通过字面量创建有什么区别？</li><li>62.prototype 和 proto 区别是什么？</li><li>63.使用 ES5 实现一个继承？</li><li>64.取数组的最大值（ES5、ES6）</li><li>65.ES6 新的特性有哪些？</li><li>66.promise 有几种状态, Promise 有什么优缺点 ?</li><li>67.Promise 构造函数是同步还是异步执行，then 呢 ?promise 如何实现 then 处理 ?</li><li>68.Promise 和 setTimeout 的区别 ?</li><li>69.如何实现 Promise.all ?</li><li>70.如何实现 Promise.finally ?</li><li>71.如何判断 img 加载完成</li><li>72.如何阻止冒泡？</li><li>73.如何阻止默认事件？</li><li>74.ajax 请求时，如何解释 json 数据</li><li>75.json 和 jsonp 的区别?</li><li>76.如何用原生 js 给一个按钮绑定两个 onclick 事件？</li><li>77.拖拽会用到哪些事件</li><li>78.document.write 和 innerHTML 的区别</li><li>79.jQuery 的事件委托方法 bind 、live、delegate、on 之间有什么区别？</li><li>80.浏览器是如何渲染页面的？</li><li>81.$(document).ready()方法和 window.onload 有什么区别？</li><li>82.jquery 中.get()提交和 post()提交有区别吗？</li><li>83.对前端路由的理解？前后端路由的区别？</li><li>84.手写一个类的继承</li><li>85.XMLHttpRequest：XMLHttpRequest.readyState;状态码的意思</li></ul><p><strong>正则表达式常见面试题</strong></p><ul><li>1.给一个连字符串例如：get-element-by-id 转化成驼峰形式。</li><li>2.匹配二进制数字</li><li>3.非零的十进制数字 (有至少一位数字, 但是不能以 0 开头)</li><li>4.匹配一年中的 12 个月</li><li>5.匹配 qq 号最长为 13 为</li><li>6.匹配常见的固定电话号码</li><li>7.匹配 ip 地址</li><li>8.匹配用尖括号括起来的以 a 开头的字符串</li><li>9.分割数字每三个以一个逗号划分</li><li>10.判断字符串是否包含数字</li><li>11.判断电话号码</li><li>12.判断是否符合指定格式</li><li>13.判断是否符合 USD 格式</li><li>14.JS 实现千位分隔符</li><li>15.获取 url 参数</li><li>16.验证邮箱</li><li>17.验证身份证号码</li><li>18.匹配汉字</li><li>19.去除首尾的’/‘</li><li>20.判断日期格式是否符合 ‘2017-05-11’的形式，简单判断，只判断格式</li><li>21.判断日期格式是否符合 ‘2017-05-11’的形式，严格判断（比较复杂）</li><li>22.IPv4 地址正则</li><li>23.十六进制颜色正则</li><li>24.车牌号正则</li><li>25.过滤 HTML 标签</li><li>26.密码强度正则，最少 6 位，包括至少 1 个大写字母，1 个小写字母，1 个数字，1 个特殊字符</li><li>27.URL 正则</li><li>28.匹配浮点数</li></ul><p><strong>浏览器/html/css 面试题</strong></p><p>1.什么是盒模型</p><p>2.行内元素有哪些？块级元素有哪些？ 空(void)元素有那些？行内元素和块级元素有什么区别？</p><p>3.简述 src 和 href 的区别</p><p>4.什么是 css Hack</p><p>5.什么叫优雅降级和渐进增强</p><p>6.px 和 em 的区别</p><p>7.HTML5 为什么只写</p><p>8.Http 的状态码有哪些</p><p>9.一次完整的 HTTP 事务是怎么一个过程</p><p>10.HTTPS 是如何实现加密</p><p>11.浏览器是如何渲染页面的</p><p>12.浏览器的内核有哪些？分别有什么代表的浏览器</p><p>13.页面导入时，使用 link 和@import 有什么区别</p><p>14.如何优化图像，图像格式的区别</p><p>15.列举你了解 Html5. Css3 新特性</p><p>16.可以通过哪些方法优化 css3 animation 渲染</p><p>17.列举几个前端性能方面的优化</p><p>18.如何实现同一个浏览器多个标签页之间的通信</p><p>19.浏览器的存储技术有哪些</p><p>20.css 定位方式</p><p>21.尽可能多的写出浏览器兼容性问题</p><p>22.垂直上下居中的方法</p><p>23.响应式布局原理</p><p>25.清除浮动的方法</p><p>26.http 协议和 tcp 协议</p><p>27.刷新页面，js 请求一般会有哪些地方有缓存处理</p><p>28.如何对网站的文件和资源进行优化</p><p>29.你对网页标准和 W3C 重要性的理解</p><p>30.Http 和 https 的区别</p><p>31.data-属性的作用</p><p>32.如何让 Chrome 浏览器显示小于 12px 的文字</p><p>33.哪些操作会引起页面回流（Reflow）</p><p>34.CSS 预处理器的比较 less sass</p><p>35.如何实现页面每次打开时清除本页缓存</p><p>36.什么是 Virtual DOM,为何要用 Virtual DOM</p><p>37.伪元素和伪类的区别</p><p>38.http 的几种请求方法和区别</p><p>39.前端需要注意哪些 SEO</p><p>40.的 title 和 alt 有什么区别</p><p>41.从浏览器地址栏输入 url 到显示页面的步骤</p><p>42.如何进行网站性能优化</p><p>43.语义化的理解</p><p>44.HTML5 的离线储存怎么使用，工作原理能不能解释一下？</p><p>45.浏览器是怎么对 HTML5 的离线储存资源进行管理和加载的呢</p><p>46.iframe 有那些缺点？</p><p>47.WEB 标准以及 W3C 标准是什么?</p><p>48.Doctype 作用? 严格模式与混杂模式如何区分？它们有何意义?</p><p>49.HTML 全局属性(global attribute)有哪些</p><p>50.Canvas 和 SVG 有什么区别？</p><p>51.如何在页面上实现一个圆形的可点击区域？</p><p>52.网页验证码是干嘛的，是为了解决什么安全问题</p><p>53.请描述一下 cookies，sessionStorage 和 localStorage 的区别？</p><p>54.CSS 选择器有哪些？哪些属性可以继承？</p><p>55.CSS 优先级算法如何计算？</p><p>56.CSS3 有哪些新特性？</p><p>57.请解释一下 CSS3 的 flexbox（弹性盒布局模型）,以及适用场景？</p><p>58.用纯 CSS 创建一个三角形的原理是什么？</p><p>59.常见的兼容性问题？</p><p>60.为什么要初始化 CSS 样式</p><p>61.absolute 的 containing block 计算方式跟正常流有什么不同？</p><p>62.CSS 里的 visibility 属性有个 collapse 属性值？在不同浏览器下以后什么区别？</p><p>63.display:none 与 visibility：hidden 的区别？</p><p>64.position 跟 display、overflow、float 这些特性相互叠加后会怎么样？</p><p>65.对 BFC 规范(块级格式化上下文：block formatting context)的理解？</p><p>66.为什么会出现浮动和什么时候需要清除浮动？清除浮动的方式？</p><p>67.上下 margin 重合的问题</p><p>68.设置元素浮动后，该元素的 display 值是多少？</p><p>69.移动端的布局用过媒体查询吗？</p><p>70.CSS 优化、提高性能的方法有哪些？</p><p>71.浏览器是怎样解析 CSS 选择器的？</p><p>72.在网页中的应该使用奇数还是偶数的字体？为什么呢？</p><p>73.margin 和 padding 分别适合什么场景使用？</p><p>74.元素竖向的百分比设定是相对于容器的高度吗？</p><p>75.全屏滚动的原理是什么？用到了 CSS 的哪些属性？</p><p>76.什么是响应式设计？响应式设计的基本原理是什么？如何兼容低版本的 IE？</p><p>77.视差滚动效果？</p><p>78.::before 和 :after 中双冒号和单冒号有什么区别？解释一下这 2 个伪元素的作用</p><p>79.让页面里的字体变清晰，变细用 CSS 怎么做？</p><p>80.position:fixed;在 android 下无效怎么处理？</p><p>81.如果需要手动写动画，你认为最小时间间隔是多久，为什么？</p><p><a href="https://link.zhihu.com/?target=http://82.xn--lili-jb5fd32bwa86hl07a2vimuze9ufxcqx2ggdah43vi90a275ejkqr67bha459a/">82.li 与 li 之间有看不见的空白间隔是什么原因引起的</a>？有什么解决办法？</p><p>83.display:inline-block 什么时候会显示间隙？</p><p>84.有一个高度自适应的 div，里面有两个 div，一个高度 100px，希望另一个填满剩下的高度</p><p>85.png、jpg、gif 这些图片格式解释一下，分别什么时候用。有没有了解过 webp？</p><p>86.style 标签写在 body 后与 body 前有什么区别？</p><p>87.CSS 属性 overflow 属性定义溢出元素内容区的内容会如何处理?</p><p>88.阐述一下 CSS Sprites</p><h2 id="微信小程序开发"><a href="#微信小程序开发" class="headerlink" title="微信小程序开发"></a><strong>微信小程序开发</strong></h2><p><strong>初识小程序</strong></p><ul><li><p>1.注册小程序</p></li><li><p>2.微信开发者工具</p></li><li><p>3.小程序与普通网页开发的区别</p></li><li><p>4.小程序尺寸单位 rpx</p></li><li><p>5.样式导入（WeUI for）</p></li><li><p>6.选择器</p></li><li><p>7.小程序 image 高度自适应及裁剪问题</p></li><li><p>8.微信小程序长按识别二维码</p></li><li><p>9.给页面加背景色</p></li><li><p>10.微信小程序获取用户信息</p></li><li><p>11.代码审核和发布</p></li><li><p>12.小程序微信认证</p></li><li><p>13.小程序申请微信支付</p></li><li><p>14.小程序的目录解构及四种文件类型</p></li><li><p>15.小程序文件的作用域</p></li><li><p>16.小程序常用组件</p><ul><li>1.view</li><li>2.scroll-view</li><li>3.swiper 组件</li><li>4.movable-view</li><li>5.cover-view</li><li>6.cover-image</li></ul></li></ul><p><strong>小程序基础</strong></p><ul><li><p>17.授权得到用户信息</p></li><li><p>18.数据绑定</p></li><li><p>19.列表渲染</p></li><li><p>20.条件渲染</p></li><li><p>21.公共模板建立</p></li><li><p>22.事件及事件绑定</p></li><li><p>23.引用</p></li><li><p>24.页面跳转</p><ul><li>1.wx.switchTab</li><li>2.wx.reLaunch</li><li>3.wx.redirectTo</li><li>4.wx.navigateTo</li><li>5.wx.navigateBack</li></ul></li><li><p>25.设置 tabBar</p></li><li><p>26.页面生命周期</p></li><li><p>27.转发分享</p></li></ul><p><strong>小程序高级</strong></p><ul><li>28.request 请求后台接口</li><li>29.http-promise 封装</li><li>30.webview</li><li>31.获取用户收货地址</li><li>32.获取地里位置</li><li>33.自定义组件</li><li>34.微信小程序支付问题</li></ul><p><strong>小程序项目实战</strong></p><ul><li>35.微信小程序本地数据缓存</li><li>36.下拉刷新和下拉加载</li><li>37.列表页向详情页跳转（动态修改 title）</li><li>38.客服电话</li><li>39.星级评分组件</li><li>40.小程序插槽的使用 slot</li><li>41.模糊查询</li><li>42.wxs 过滤</li><li>43.小程序动画</li><li>44.列表根据索引值渲染</li><li>45.小程序动态修改 class</li><li>46.小程序常用框架</li><li>47.参数传值的方法</li><li>48.提高小程序的应用速度</li><li>49.微信小程序的优劣势</li><li>50.小程序的双向绑定和 vue 的区别</li><li>51.微信小程序给按钮添加动画</li><li>52.微信小程序的 tab 按钮的转换</li><li>53.微信小程序引进 echarts</li><li>54.APP 打开小程序流程</li><li>55.小程序解析富文本编辑器</li></ul><p><strong>小程序常见 bug</strong></p><ul><li>1.域名必须是 HTTPS</li><li>2.input 组件 placeholder 字体颜色</li><li>3.wx.navigateTo 无法跳转到带 tabbar 的页面</li><li>4.tabbar 在切换时页面数据无法刷新</li><li>5.如何去掉自定义 button 灰色的圆角边框</li><li>6.input textarea 是 APP 的原生组件，z-index 层级最高</li><li>7.一段文字如何换行</li><li>8.设置最外层标签的 margin-bottom 在 IOS 下不生效</li><li>9.小程序中 canvas 的图片不支持 base64 格式</li><li>10.回到页面顶部</li><li>11.wx.setStorageSync 和 wx.getStorageSync 报错问题</li><li>12.如何获取微信群名称？</li><li>13.new Date 跨平台兼容性问题</li><li>14.wx.getSystemInfoSync 获取 windowHeight 不准确</li><li>15.图片本地资源名称，尽量使用小写命名</li></ul><h2 id="移动端热点问题"><a href="#移动端热点问题" class="headerlink" title="移动端热点问题"></a><strong>移动端热点问题</strong></h2><ul><li>px border 问题</li><li>2.2X 图 3X 图适配</li><li>3.图片在安卓上，有些设备模糊问题</li><li>4.固定定位布局 键盘挡住输入框内容</li><li>5.click 的 300ms 延迟问题和点击穿透问题</li><li>6.phone 及 ipad 下输入框默认内阴影</li><li>7.防止手机中页面放大和缩小</li><li>8.flex 布局</li><li>9.px、em、rem、%、vw、vh、vm 这些单位的区别</li><li>10.移动端适配- dpr 浅析</li><li>11.移动端扩展点击区域</li><li>12 上下拉动滚动条时卡顿、慢</li><li>13 长时间按住页面出现闪退</li><li>14.ios 和 android 下触摸元素时出现半透明灰色遮罩</li><li>15.active 兼容处理 即 伪类：active 失效</li><li>16.webkit mask 兼容处理</li><li>17.pc 端与移动端字体大小的问题</li><li>18.transiton 闪屏</li><li>19.圆角 bug</li><li>20.如何解决禁用表单后移动端样式不统一问题 ?</li></ul>]]></content>
      
      
      <categories>
          
          <category> 面试题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面试题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript装逼指南</title>
      <link href="2020/11/30/javascript-zhuang-bi-zhi-nan/"/>
      <url>2020/11/30/javascript-zhuang-bi-zhi-nan/</url>
      
        <content type="html"><![CDATA[<blockquote><p>如何写JavaScript才能逼格更高呢？怎样才能组织JavaScript才能让别人一眼看出你不简单呢？是否很期待别人在看完你的代码之后感叹一句“原来还可以这样写”呢？下面列出一些在JavaScript时的装逼技巧。</p></blockquote><h3 id="1-匿名函数的N种写法"><a href="#1-匿名函数的N种写法" class="headerlink" title="1. 匿名函数的N种写法"></a>1. 匿名函数的N种写法</h3><p>你知道“茴”的四种写法吗？ε=(･д･｀*)ﾊｧ… 扯淡，但你或许不知道匿名函数的好几种写法。一般情况下写匿名函数是这样的：<code> (function()&#123;&#125;)();</code></p><p>但下面几种写法也是可以的：</p><ul><li><code>!function()&#123;&#125;();</code></li><li><code>+function()&#123;&#125;();</code></li><li><code>-function()&#123;&#125;();</code></li><li><code>~function()&#123;&#125;();</code></li><li><code>~(function()&#123;&#125;)();</code></li><li><code>void function()&#123;&#125;();</code></li><li><code>(function()&#123;&#125;());</code></li></ul><p>当然，这样的写法，没有什么区别，纯粹看装逼程度。</p><h3 id="2-另外一种undefined"><a href="#2-另外一种undefined" class="headerlink" title="2. 另外一种undefined"></a>2. 另外一种undefined</h3><p>从来不需要声明一个变量的值是undefined，因为JavaScript会自动把一个未赋值的变量置为undefined。所有如果你在代码里这么写，会被鄙视的：</p><pre><code>var data = undefined;</code></pre><p>但是如果你就是强迫症发作，一定要再声明一个暂时没有值的变量的时候赋上一个undefined。那你可以考虑这么做：</p><pre><code>var data = void 0; // undefined</code></pre><p>void在JavaScript中是一个操作符，对传入的操作不执行并且返回undefined。void后面可以跟<code>()</code>来用，例如<code>void(0)</code>，看起来是不是很熟悉？没错，在HTML里阻止带href的默认点击操作时，都喜欢把href写成<code>javascript:void(0)</code>，实际上也是依靠void操作不执行的意思。</p><p>当然，除了出于装逼的原因外，实际用途上不太赞成使用void，因为void的出现是为了兼容早起ECMAScript标准中没有undefined属性。<code>void 0</code>的写法让代码晦涩难懂。</p><h3 id="3-抛弃你的if和else"><a href="#3-抛弃你的if和else" class="headerlink" title="3. 抛弃你的if和else"></a>3. 抛弃你的if和else</h3><p>当JS代码里有大量的条件逻辑判断时，那代码看起来多可怕：</p><pre><code>if () &#123;    // ...&#125; else if () &#123;    // ...&#125; else if () &#123;    // ...&#125; else &#123;    // ...&#125;</code></pre><p>不用我说你都猜到用什么语法来简化if-else了。没错，用<code>||</code>和<code>&amp;&amp;</code>，很简单的原理就不用说啦。值得一提的是，有时候用<code>!!</code>操作符也能简化if-else模式。例如这样：</p><pre><code>// 普通的if-else模式var isValid = false;if (value &amp;&amp; value !== &#39;error&#39;) &#123;    isValid = true;&#125;// 使用!!符号var isValid = !!(value &amp;&amp; value !== &#39;error&#39;);</code></pre><p>“!”是取反操作，两个“!”自然是负负得正了。</p><h3 id="4-不加分号"><a href="#4-不加分号" class="headerlink" title="4. 不加分号"></a>4. 不加分号</h3><p>关于JavaScript要不要加分号的争论已经吵了好几年。Google的JavaScript语法指南告诉我们要加分号，很多JavaScript语法书籍也告诉我们加上分号更安全。然而，分号加不加，全靠个人对代码的写法，你确信写得足够安全的话，不加分号显得更加高大上。</p><h3 id="5-添加AMD模块支持"><a href="#5-添加AMD模块支持" class="headerlink" title="5. 添加AMD模块支持"></a>5. 添加AMD模块支持</h3><p>给你写的代码声明一下AMD模块规范，这样别人就可以直接通过AMD的规范来加载你的模块了，如果别人没有通过规范来加载你的模块，你也可以优雅地返回一个常规的全局对象。来看看jQueryUI的写法：</p><pre><code>(function( factory ) &#123;    if ( typeof define === &quot;function&quot; &amp;&amp; define.amd ) &#123;        // AMD. Register as an anonymous module.        define( [ &quot;jquery&quot; ], factory );    &#125; else &#123;        // Browser globals        factory( jQuery );    &#125;&#125;(function( $ ) &#123;    // 这里放模块代码    return $.widget;&#125;));</code></pre><p>就用它来包裹你的实际代码吧，保证别人一看代码就知道你是个专业的开发者。</p><h3 id="6-Function构造函数"><a href="#6-Function构造函数" class="headerlink" title="6.Function构造函数"></a>6.Function<strong>构造函数</strong></h3><p>很多JavaScript教程都告诉我们，不要直接用内置对象的构造函数来创建基本变量，例如<code>var arr = new Array(2);</code> 的写法就应该用<code>var arr = [1, 2];</code>的写法来取代。但是，Function构造函数（注意是大写的Function）有点特别。Function构造函数接受的参数中，第一个是要传入的参数名，第二个是函数内的代码（用字符串来表示）。</p><pre><code>var f = new Function(&#39;a&#39;, &#39;alert(a)&#39;);f(&#39;test&#39;); // 将会弹出窗口显示test</code></pre><p>或许大家疑惑了，你这样绕着写，跟<code>function f(a) &#123;alert(a);&#125;</code>比有什么好处呢？<br>事实上在某种情况下是有好处的，比如不能用eval的时候，你需要传入字符串内容来创建一个函数的时候。在一些JavaScript模板语言的解析，和字符串转换json对象的时候比较实用。</p><h3 id="7-用原生Dom接口不用jQuery"><a href="#7-用原生Dom接口不用jQuery" class="headerlink" title="7.用原生Dom接口不用jQuery"></a>7.用原生Dom接口不用jQuery</h3><p>一个傲娇的前端工程师是不需要jQuery的，前提是你经得起折腾。实际上，几乎所有的jQuery方法都可以用同样的Dom原生接口来实现，因为这货本来就是用原生接口实现的嘛，哈哈。怎样做到不用jQuery（也叫jQuery-free）呢？阮老师的博文<a href="http://www.ruanyifeng.com/blog/2013/05/jquery-free.html">《如何做到 jQuery-free？》</a> 给我们很好的讲解了做法。依赖于querySelector和querySelectorAll这两个现代浏览器的接口，可以实现跟jQuery同样方便和同样效率的Dom查找，而且其他的类似Ajax和CSS的接口同样也可以把原生方法做一些兼容方面的包装即可做到jQuery-free。</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>上述所有的JavaScript装逼写法，一些是为了程序易懂或者效率提高的语法糖，这样的做法是比较可取的，比如前面所说的省略if-else的做法；而有些写法则容易造成代码晦涩难懂或者效率偏低，例如上面说的<code>void 0</code>的写法，实际上不可取。JavaScript语法上灵活，让大家对同一个功能有很多种不同的写法，写法上的优化是对程序结构和代码维护有很大帮助的。所以，装逼得装得好看。</p>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> JS手记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue相关面试题</title>
      <link href="2020/11/24/vue-xiang-guan-mian-shi-ti/"/>
      <url>2020/11/24/vue-xiang-guan-mian-shi-ti/</url>
      
        <content type="html"><![CDATA[<h3 id="1-库和框架的区别"><a href="#1-库和框架的区别" class="headerlink" title="1.库和框架的区别"></a>1.库和框架的区别</h3><pre><code>答:    库: 本质上是一个函数的几何,每一次调用函数,实现一个特定的功能,使用库的时候,把库当成工具使用,需要自己控制代码的执行逻辑    框架: 是一套完整的解决方案,使用框架的时候,框架实现了大部分的功能,我们只需要按照框架的规则书写代码即可,使用框架开发比库开发效率更高,更容易维护</code></pre><h3 id="2-MVC和MVVM的区别"><a href="#2-MVC和MVVM的区别" class="headerlink" title="2. MVC和MVVM的区别"></a>2. MVC和MVVM的区别</h3><pre><code>答:    MVVM        M Model 模型 指的是数据层        V View  视图 指的是用户页面        VM ViewModel 视图模型        视图模型是MVVM模式的核心,它是连接view和model的桥梁,MVVM实现了view和model的自动同步,当model的属性改变时,我们不用自己手动操作DOM元素,来改变view的显示,反之亦然,我们称之为数据的双向绑定    MVC        M Model 模型 指的是数据层        V View  视图 指的是用户页面        C controller 控制器 指的是页面业务逻辑        view传送指令到controller,controller完成业务逻辑后,要求model改变状态,model将型的数据发送给view,用户得到反馈,所有通信都是单向的</code></pre><h3 id="3-v-if和v-show的区别-使用场景"><a href="#3-v-if和v-show的区别-使用场景" class="headerlink" title="3. v-if和v-show的区别,使用场景"></a>3. v-if和v-show的区别,使用场景</h3><pre><code>答:    v-if是通过创建和删除DOM元素来控制元素的显示和隐藏,适用于不需要频繁切换元素显示和隐藏的情况    v-show是通过css的display: block和display: none来控制元素的显示和隐藏,适用于需要频繁切换元素的显示和隐藏的场景</code></pre><h3 id="4-v-for和v-if的优先级哪个更高"><a href="#4-v-for和v-if的优先级哪个更高" class="headerlink" title="4. v-for和v-if的优先级哪个更高"></a>4. v-for和v-if的优先级哪个更高</h3><pre><code>答:    v-for优先级高于v-if    如果两个同时出现,无论判断条件是否成立,都会执行一遍v-for循环,这样浪费性能,所以要尽可能的避免两者一起使用</code></pre><h3 id="5-vue中的事件修饰符有哪些-分别作用是什么"><a href="#5-vue中的事件修饰符有哪些-分别作用是什么" class="headerlink" title="5. vue中的事件修饰符有哪些,分别作用是什么"></a>5. vue中的事件修饰符有哪些,分别作用是什么</h3><pre><code>答:    .prevent   阻止事件默认行为    .stop      阻止事件冒泡    .capture   设置事件捕获机制    .self      只有点击元素自身才能触发事件    .once      事件只触发一次</code></pre><h3 id="6-v-model的修饰符有哪些-分别作用是什么"><a href="#6-v-model的修饰符有哪些-分别作用是什么" class="headerlink" title="6. v-model的修饰符有哪些,分别作用是什么"></a>6. v-model的修饰符有哪些,分别作用是什么</h3><pre><code>答:    .trim   去除首尾空格    .lazy   只在输入框失去焦点或按回车键时更新内容,不是实时更新    .number 将数据转换成number类型(原本是字符串类型)</code></pre><h3 id="7-vue中的按键修饰符有哪些"><a href="#7-vue中的按键修饰符有哪些" class="headerlink" title="7. vue中的按键修饰符有哪些"></a>7. vue中的按键修饰符有哪些</h3><pre><code>答:    .tob    .enter    .esc    .space    .delete(捕获&quot;删除&quot;和&quot;空格&quot;键)    .up    .down    .left    .right</code></pre><h3 id="8-v-for中为什么要加key-原理是什么"><a href="#8-v-for中为什么要加key-原理是什么" class="headerlink" title="8. v-for中为什么要加key,原理是什么"></a>8. v-for中为什么要加key,原理是什么</h3><pre><code>答:    原理:         1. vue实现了一套虚拟DOM,使我们可以不直接操作DOM元素只操作数据,就可以重新渲染页面,而隐藏在背后的原理是高效的Diff算法        2. 当页面数据发生改变时,Diff算法只会比较同一层级的节点        3. 如果节点类型不同,直接干掉前面的节点,再创建并插入新的节点,不会再比较这个节点后面的子节点           如果节点类型相同,则会重新设置该节点属性,从而实现节点更新        4. 使用key给每个节点做一个唯一标识,Diff算法就可以正确失败此节点,&quot;就地更新&quot;找到正确的位置插入新的节点    作用:         1. key的作用主要是为了高效的更新虚拟DOM,提高渲染性能        2. key属性可以避免数据混乱的情况出现</code></pre><h3 id="9-computed和watch的区别"><a href="#9-computed和watch的区别" class="headerlink" title="9. computed和watch的区别"></a>9. computed和watch的区别</h3><pre><code>答:    1. 概念:        computed是计算属性,它会根据所依赖的数据动态显示新的计算结果,通过计算出来的属性不需要调用,可以直接在DOM中使用        watch是监视对象,键是data对应的数据,值是对应的回调函数,值也可以包含选项的对象,当data数据发生改变时,就会发生一个回调,它有两个参数,val(修改后的data函数), oldval(原来的data数据), vue实例会在实例化的时候调用$watch(), 变量watch对象的每个属性,deep属性可以实现深度监听    2. 缓存        computed具有缓存属性,只有依赖的数据发生改变,才会重新进行计算,如果所依赖的数据没有发生改变,就调用缓存    3. 使用场景        当一个属性受多个属性影响的时候使用computed, 比如: 购物车商品结算        当一条数据影响多条数据的时候,使用watch, 比如: 贷款金额的判断</code></pre><h3 id="10-自己实现一个v-model的效果"><a href="#10-自己实现一个v-model的效果" class="headerlink" title="10. 自己实现一个v-model的效果"></a>10. 自己实现一个v-model的效果</h3><pre><code>答:    &lt;input type=&quot;text&quot;&gt;    &lt;script&gt;     // vue2.0    let data = &#123;      msg: &#39;hello vue&#39;    &#125;    let input = document.querySelector(&#39;input&#39;)    input.value = data.msg    input.addEventListener(&#39;input&#39;, function () &#123;      data.msg = this.value    &#125;)    let temp = data.msg    Object.defineProperty(data, &#39;msg&#39;, &#123;      get() &#123;        return temp      &#125;,      set(value) &#123;        input.value = value        return (temp = value)      &#125;    &#125;)    // vue3.0    let data = &#123;      msg: &#39;hello vue&#39;    &#125;    let input = document.querySelector(&#39;input&#39;)    input.value = data.msg    input.addEventListener(&#39;input&#39;, function () &#123;      obj.msg = this.value    &#125;)    const obj = new Proxy(data, &#123;      get(target, key) &#123;        return target[key]      &#125;,      set(target, key, value) &#123;        target[key] = value        input.value = value      &#125;    &#125;)   &lt;/script&gt;</code></pre><h3 id="11-Object-defineProperty和proxy的区别"><a href="#11-Object-defineProperty和proxy的区别" class="headerlink" title="11. Object.defineProperty和proxy的区别"></a>11. Object.defineProperty和proxy的区别</h3><pre><code>1. Object.defineProperty  用于监听对象的数据变化    缺点:        1) 无法监听数组变化        2) 只能劫持对象的属性,属性值也是对象那么需要深度遍历2. proxy 可以理解为 在被劫持的对象之前 加了一层拦截   proxy返回的是一个新对象, 可以通过操作返回的新的对象达到目的总结:    当使用defineProperty 时, 我们修改原来的 obj 对象就可以触发拦截    而使用 proxy, 就必须修改代理对象,即 proxy 的实例才可以触发拦截</code></pre><h3 id="12-怎么理解VUE的生命周期"><a href="#12-怎么理解VUE的生命周期" class="headerlink" title="12. 怎么理解VUE的生命周期"></a>12. 怎么理解VUE的生命周期</h3><pre><code>答:    vue的生命周期: vue实例从创建到销毁的全过程,这个过程可以分为3个阶段    第一阶段: 初始化阶段  创建vue实例,准备数据,准备模板,渲染视图    第二阶段: 数据更新阶段 当数据改变时,会进行新旧DOM的对比,对比出差异的部分,进行差异化更新    第三阶段: 实例销毁阶段 当vm.$destroy()被调用,vue实例就会被销毁,释放相关资源,此时再更新数据,视图不会再变化</code></pre><h3 id="13-vue钩子函数有哪些-有哪些使用的场景"><a href="#13-vue钩子函数有哪些-有哪些使用的场景" class="headerlink" title="13. vue钩子函数有哪些,有哪些使用的场景"></a>13. vue钩子函数有哪些,有哪些使用的场景</h3><pre><code>答:    beforeCreate  当data数据注入到vm实例之前,此时vm身上没有数据    created       当data数据注入到vm实力之前,此时vm身上有数据    beforeMount   生成的结构替换视图之前,此时DOM还没更新    mounted       生成的结构替换视图之前,此时DOM已经更新完成    beforeUpdate  数据变化了,dom更新之前    updated       数据变化了,dom更新之后    beforeDestroy 实例销毁,是否资源之前    destroyed     实例销毁,是否资源之后    这些钩子函数会在vue的生命周期的不同阶段,自动被vue调用    常用的钩子函数使用场景    beforeCreate   做loading的一些渲染    created        结束loading,发送数据的请求,拿数据    mounted        可以对dom进行操作    updated        监听数据的更新    beforeDestroy  销毁非vue资源,防止内存泄漏,例如清除定时器</code></pre><h3 id="14-vue中怎么给data添加数据-为什么要这样写"><a href="#14-vue中怎么给data添加数据-为什么要这样写" class="headerlink" title="14. vue中怎么给data添加数据,为什么要这样写"></a>14. vue中怎么给data添加数据,为什么要这样写</h3><pre><code>答:    1. 官方文档定义: 如果vue实例创建之后添加新的属性到实例上,他不会触发视图更新    2. 原因: 受现代JavaScript的限制,vue不能检测到对象属性的添加或删除,由于vue会在初始化实例是对属性执行getter/setter转换过程(使用Object.defineProperty进行数据的劫持).所以属性必须在data对象上存在才能让vue转换他,这样才能让他是响应的    方法:         1. this.$set(对象名,属性,值)或Vue.set(对象名,属性,值)        2. Object.assign(target,soutce)添加多个属性        例如            const target = &#123;a:1,b:2&#125;            const source = &#123;b:4,d:5&#125;            const returnedTarget = Object.assign(target,source)            console.log(returnTarget); //&#123;a : 1, b : 4, c: 5&#125;</code></pre><h3 id="15-nextTick的原理和使用的场景"><a href="#15-nextTick的原理和使用的场景" class="headerlink" title="15. $nextTick的原理和使用的场景"></a>15. $nextTick的原理和使用的场景</h3><pre><code>答:    1.使用原理        1) vue是异步执行dom更新的,一旦观察到数据变化,vue就会开启一个队列,然后把同一事件循环当中观察到数据变化的watcher推送进这个队列,如果这个watcher被触发多次,只会被推送到队列一次,这种缓冲行为可以有效地去掉重复数据造成的不必要的计算和dom操作,这样可以提高渲染效率        2) 如果要获取更新后的dom元素, 可以使用vue内置的$nextTick方法,参数是一个函数,它的作用类似于setTimeout,进行执行异步的操作    2. 应用: vue中的nextTick主要用于处理数据动态变化后,DOM还未及时更新的问题,用nextTick可以获取数据更新后最新dom的变化    3. 场景:        1) 第三方插件,在vue生成的某些dom动态发生变化时重新应用该插件        2) 视图更新之后,基于新的视图进行操作</code></pre><h3 id="16-vue中组件如何进行通信"><a href="#16-vue中组件如何进行通信" class="headerlink" title="16. vue中组件如何进行通信"></a>16. vue中组件如何进行通信</h3><pre><code>答:    1. 父传子        1) 给子组件以添加属性的方式传值(属性名全小写)        2) 在子组件中通过props接收传递的参数    2. 子传父        1) 在子组件中,通过触发事件的同时传值           this.$emit(事件名,参数1, 参数2...)        2)  在父组件中,给子组件注册响应的事件,接收参数           @事件名 = &quot;fatherFn&quot;    3. 非父子        1) 创建一个都能访问到的事件总线(bus),本质上是一个空的vue实例            const bus = new Vue()        2) 在A组件中,触发bus事件,触发的同时传值            bus.$emit(事件名, 参数1, 参数2...)        3) 在B组件中给bus注册对应的事件,接收参数            bus.$on(事件名,事件处理函数)</code></pre><h3 id="17-vue组件中data为什么必须是一个函数"><a href="#17-vue组件中data为什么必须是一个函数" class="headerlink" title="17. vue组件中data为什么必须是一个函数"></a>17. vue组件中data为什么必须是一个函数</h3><pre><code>答:    vue组件是可复用的vue实例,组件中的data写成一个函数,并且以函数返回值的显示定义,函数形成局部作用域,这样每次复用组件,就会返回一个新的data,确保data数据的独立性,各个组件之间修改不会相互影响,如果data使用对象,对象是引用类型,会导致复用组件中的data都指向同一块内存,那么各组件的数据就会相互响应,不能保持独立性了</code></pre><h3 id="18-组件化和模块化的区别"><a href="#18-组件化和模块化的区别" class="headerlink" title="18. 组件化和模块化的区别"></a>18. 组件化和模块化的区别</h3><pre><code>答:    组件化: 主要是从界面上进行划分,是对于结构.样式.行为的整体拆分,方便调用和复用    模块化: 主要是从代码逻辑的焦点进行划分,是对js功能的拆分和封装,方便代码分成开发.保证每个功能模块职责单一    组件化和模块化的优点: 开发调试效率高,可维护性强,避免阻塞,版本管理更容易</code></pre><h3 id="19-怎么理解vue中的虚拟DOM"><a href="#19-怎么理解vue中的虚拟DOM" class="headerlink" title="19.怎么理解vue中的虚拟DOM"></a>19.怎么理解vue中的虚拟DOM</h3><pre><code>答:    虚拟DOM其实就是一颗以JavaScript对象(VNode)作为基础的树,用对象属性来描述阶段,实际上它只是一层对真实DOM的抽象,最终可以通过一系列操作使这棵树映射到真实环境上. 简单理解可以把虚拟DOM理解为一个简单的JS对象,并且最少包含标签(tag),属性(attrs)和子元素对象(children)三个属性,不同的框架对这三个属性的命名会有差别,vue的虚拟DOM是将多次DOM操作保存在一个JS对象(虚拟DOM对象)中,然后用这个JS对象一次性的去更新DOM操作,这样就避免了很多无效的计算</code></pre><h3 id="20-vue-loader是做什么的"><a href="#20-vue-loader是做什么的" class="headerlink" title="20.vue-loader是做什么的"></a>20.vue-loader是做什么的</h3><pre><code>答:    概念: vue-loader是基于webpack的一个loader,解析和转换.vue文件,提取出其中的逻辑代码script,样式代码style,以及HTML模板template,再分别把他们交给对应的loader去处理    用途: JS可以写es6,style样式可以是less或scss等</code></pre><h3 id="21-vue中怎么操作DOM"><a href="#21-vue中怎么操作DOM" class="headerlink" title="21. vue中怎么操作DOM"></a>21. vue中怎么操作DOM</h3><pre><code>答:    要在mounted中使用,在执行mounted的时候,vue已经渲染了dom节点,可以获取DOM节点    方法:         1) 在标签中添加ref=&quot;name&quot;        2) 在方法中用this.$ref.name拿到这个元素</code></pre><h3 id="22-router和route的区别"><a href="#22-router和route的区别" class="headerlink" title="22. router和route的区别"></a>22. router和route的区别</h3><pre><code>答:    router是VueRouter的实例,是一个全局的路由对象,它包含了所有的路由和许多关键字的对象和属性    route是当前正在跳转的路由对象,是一个局部路由对象,里面包含当前路由的信息,比如: name,path,params,query等</code></pre><h3 id="23-路由传参的方式和区别"><a href="#23-路由传参的方式和区别" class="headerlink" title="23. 路由传参的方式和区别"></a>23. 路由传参的方式和区别</h3><pre><code>答:    方式: params 和 query    区别: params用的是name,传送的参数在地址栏不会显示,类似于post          query用的是path,传递的参数会在地址栏显示出来,类似于get    举例:        1. params传参        传: this.$router.push(&#123;            name: &#39;particulars&#39;,            params:&#123;                id: id            &#125;        &#125;)        接: this.$route.params.id        2. query传参        传: this.$router.push(&#123;            path: &#39;/particulars&#39;,            query: &#123;                id: id            &#125;        &#125;)        接: this.$route.query.id</code></pre><h3 id="24-导航钩子有几种-导航守卫-具体怎么用的"><a href="#24-导航钩子有几种-导航守卫-具体怎么用的" class="headerlink" title="24. 导航钩子有几种(导航守卫) 具体怎么用的"></a>24. 导航钩子有几种(导航守卫) 具体怎么用的</h3><pre><code>答:    分类:        1. 全局守卫: router.beforeEach        2. 全局解析守卫: router.beforeResolve        3. 全局后置钩子: router.afterEach        4. 路由独享的守卫: beforeEnter        5. 组件内的守卫: beforeRouteEnter,beforeRouteUpdate(2.2新增),beforeRouteLeave    使用:        1. 全局守卫: router.beforeEach            const router = new VueRouter(&#123; ... &#125;)                router,beforeEach((to, from, next) =&gt; &#123;                    // ...                &#125;)        2. 全局解析守卫: router.beforeResolve            可以用 router.beforeResolve 注册一个全局守卫,这和 router.beforeEach 类似,区别是: 在导航被确认之前,同时在所有组件内守卫和异步路由组件被解析之后,解析守卫就被调用        3. 全局后置钩子: router.afterEach            router.afterEach((to,from) =&gt; &#123;                // ...            &#125;)        4. 路由独享的守卫: beforeEnter            const router = new VueRouter(&#123;                routes: [                    &#123;                        path: &#39;/foo&#39;,                        component: Foo,                        beforeEnter: (to, from, next) =&gt; &#123;                            // ...                        &#125;                    &#125;                ]            &#125;)        5. 组件内的守卫: beforeRouteEnter,beforeRouteUpdate(2.2新增),beforeRouteLeave            const Foo = &#123;                template: `...`,                beforeRouteEnter (to, from, next) &#123;                    // 在渲染该组件的对应路由被 confirm 钱调用                    // 不能获取组件实例 `this`                    // 因为当守卫执行前, 组件实例还没被创建                &#125;,                beforeRouteUpdate (to, from, next) &#123;                    // 在当前路由改变,但是该组件被复用时调用                    // 举例来说, 对于一个带有动态参数的路径 /foo/:id, 在 /foo/1 和 /foo/2 之间跳转的时候,                    // 由于会渲染同样的Foo组件,因此组件实例会被复用,而这个钩子就会在这个情况下被调用                    // 可以访问组件实例 `this`                &#125;,                beforeRouteLeave (to, from, next) &#123;                    // 导航离开该组件的对用路由时调用                    // 可以访问组件实例 `this`                &#125;            &#125;</code></pre><h3 id="25-keep-alive的理解"><a href="#25-keep-alive的理解" class="headerlink" title="25. keep-alive的理解"></a>25. keep-alive的理解</h3><pre><code>答:    1. keep-alive是Vue.js的一个内置组件, vue2.0提供了一个keep-alive组件用来缓存组件,避免多次加载响应的组件,减少性能消耗    2. 它有两个生命周期:        activated: keep-alive组件激活时调用        deactivated: keep-alive组件停用时调用    它提供了include与exclude两个属性, 允许组件有条件地进行缓存    3. 实例:         &lt;!-- keep-alive代码可以结合v-if进行包裹,如果meta中的keepAlive为true进行缓存,否则不进行缓存,这样可以更灵活一些 --&gt;        &lt;keep-alive&gt;            &lt;router-view v-if=&quot;$route.meta.keepAlive&quot; /&gt;        &lt;/keep-alive&gt;        &lt;router-view v-if=&quot;!$route.meta.keepAlive&quot; /&gt;        &lt;template&gt;            &lt;div id=&quot;app&quot;&gt;                // 1. 将缓存 name为test 的组件                &lt;keep-alive include=&quot;test&quot;&gt;                    &lt;router-view/&gt;                &lt;/keep-alive&gt;                // 2. 将缓存 name 为 a 或者 b 的组件,结合动态组件使用                &lt;keep-alive include=&#39;a,b&#39;&gt;                    &lt;router-view /&gt;                &lt;/keep-alive&gt;                // 3. 使用正则表达式 需使用 v-bind                &lt;keep-alive include=&#39;/a|b/&#39;&gt;                    &lt;router-view /&gt;                &lt;/keep-alive&gt;                // 4. 动态判断                &lt;keep-alive include=&#39;includeComponents&#39;&gt;                    &lt;router-view /&gt;                &lt;/keep-alive&gt;                // 5. 将不缓存 name 为test的组件                &lt;keep-alive exclude=&#39;test&#39;&gt;                    &lt;router-view /&gt;                &lt;/keep-alive&gt;            &lt;/div&gt;        &lt;/template&gt;        &lt;script&gt;        export default &#123;            name: &#39;App&#39;        &#125;        &lt;/script&gt;    4. 原理:        首先,你要知道Vue.js内部将DOM节点抽象成了一个个的VNode(虚拟DOM)节点,所以,keep-alive的缓存也是基于VNode几点的而不是直接存储DOM结构        其实就是将需要缓存的VNode节点保存在this.cache中,在render时,如果VNode的name符合在缓存条件(可以用include以及exclude控制), 则会从this.cache中取出之前缓存的VNode实例进行渲染</code></pre>]]></content>
      
      
      <categories>
          
          <category> 面试题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面试题 </tag>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JS使用技巧</title>
      <link href="2020/11/14/js-shi-yong-ji-qiao/"/>
      <url>2020/11/14/js-shi-yong-ji-qiao/</url>
      
        <content type="html"><![CDATA[<h2 id="JS-使用技巧"><a href="#JS-使用技巧" class="headerlink" title="JS 使用技巧"></a>JS 使用技巧</h2><blockquote><p>有些代码，需要的时候能写的出来，但是也需要时间。同时，如果有的东西长时间不接触，再次看的时候也会感觉很陌生，本文章旨在记录一些实用的 javascript 技巧，既可以作为一个知识的积累，又可以作为闲暇时打发时间写写代码的记录。同时也方便日后翻阅~</p></blockquote><h3 id="1-“金钱”-格式转换"><a href="#1-“金钱”-格式转换" class="headerlink" title="1. “金钱” 格式转换"></a>1. “金钱” 格式转换</h3><p>所谓的金钱格式转换就是把数字转换成三位数加一个逗号的格式，使数据变得很直观明了~</p><p><strong>例子:</strong> 就像赞功能<img src="/images/zan.jpg">，点击之后加 1，再次点击减 1，很简单实现。但是数据是字符串的，加减钱需要用正则转换成数字，但是再显示最后结果时，也需要再次转换成金钱的格式，再通过 ajax 实现数据的交互。下面来看下怎么实现的 这个是正则，把字符串转换成数字之后，能直接进行运算:如把 1,561,124 转换成 1561124</p><pre><code>var sLove=document.getElementById(&quot;love&quot;);  //slove = 1,561,124var reg=sLove1.innerHTML.replace(/,/g,&quot;&quot;);  //reg = 1561124</code></pre><p>下面的这个是数字转换成金钱格式的函数，也很容易理解</p><pre><code>function formatCash(cash)&#123;        var str_cash = cash + &quot;&quot;;//转换成字符串        var ret_cash = &quot;&quot;;        var counter = 0;        for(var i=str_cash.length-1;i&gt;=0;i--)&#123;            ret_cash = str_cash.charAt(i) + ret_cash;            counter++;            if(counter==3)&#123;                counter = 0;                if(i!=0)&#123;                ret_cash = &quot;,&quot; + ret_cash;                &#125;            &#125;&#125;        return ret_cash;    &#125;// demo:var num = 1012145;formatCash(num);   //1,012,145</code></pre><h3 id="2-window-onload-使用多次"><a href="#2-window-onload-使用多次" class="headerlink" title="2.window.onload 使用多次"></a>2.window.onload 使用多次</h3><p>运用点：window.onload 只能使用一次，而不像 JQ 那样能只用多次，下面的这个函数就可以实现多次使用 onload 的功能</p><pre><code>function addLoadEvent(func) &#123;    var oldonload = window.onload;    if (typeof window.onload != &#39;function&#39;) &#123;        window.onload = func;    &#125; else &#123;        window.onload = function() &#123;            oldonload();            func();        &#125;    &#125;&#125;// demo：addLoadEvent(fnName);  //可使用多次</code></pre><h3 id="3-insertafter-在结点后面插入内容"><a href="#3-insertafter-在结点后面插入内容" class="headerlink" title="3.insertafter 在结点后面插入内容"></a>3.insertafter 在结点后面插入内容</h3><p>运用点：js 给我们提供了 insertbefore，没有 before，下面这个函数就实现了这个功能</p><pre><code>// insertAfterfunction insertAfter(newElement,targetElement)&#123;  var parent=targetElement.parentNode;  if(parent.lastChild==targetElement)&#123;    parent.appendChild(newElement);    &#125; else&#123;      parent.insertBefore(newElement,targetElement.nextSibling);      &#125;  &#125;</code></pre><h3 id="4-随机数生成"><a href="#4-随机数生成" class="headerlink" title="4.随机数生成"></a>4.随机数生成</h3><pre><code>var rnd = Math.random(); //返回0-1之间的任意小数var rnd = Math.floor(Math.random() * n); //返回0-n之间的任意整数(不包括n)</code></pre><h3 id="5-X-进制数字的转换"><a href="#5-X-进制数字的转换" class="headerlink" title="5. X 进制数字的转换"></a>5. X 进制数字的转换</h3><pre><code>var i = parseInt(&quot;0x1f&quot;,16); //31var i = parseInt(i,10); //31var i = parseInt(&quot;11010011&quot;,2); //211</code></pre><h3 id="6-格式化显示数字"><a href="#6-格式化显示数字" class="headerlink" title="6. 格式化显示数字"></a>6. 格式化显示数字</h3><pre><code>var i = 3.14159;//格式化为两位小数的浮点数var str = i.toFixed(2); //结果: &quot;3.14&quot;//格式化为五位数字的浮点数(从左到右五位数字,不够补零)var str = i.toPrecision(5); //结果: &quot;3.1415&quot;</code></pre><h3 id="7-小数转整数"><a href="#7-小数转整数" class="headerlink" title="7. 小数转整数"></a>7. 小数转整数</h3><pre><code>var f = 1.5;var i = Math.round(f); //结果:2 (四舍五入)var i = Math.ceil(f); //结果:2 (返回大于f的最小整数)var i = Math.floor(f); //结果:1 (返回小于f的最大整数)</code></pre><h3 id="8-异常捕获"><a href="#8-异常捕获" class="headerlink" title="8. 异常捕获"></a>8. 异常捕获</h3><pre><code>try&#123; expression &#125; catch(e)&#123; &#125; finally&#123;&#125;//不处理任何异常window.onerror = doNothing;function doNothing()&#123; return true; &#125;//异常类可用的属性description : 异常描述(IE,NN)fileName : 异常页面URI(NN)lineNumber : 异常行数(NN)message : 异常描述(IE,NN)name : 错误类型(IE,NN)number : 错误代码(IE)//错误信息(兼容所有浏览器)try&#123;&#125;catch(e)&#123;    var msg = (e.message) ? e.message : e.description;    alert(msg);&#125;</code></pre><h3 id="9-延迟函数调用"><a href="#9-延迟函数调用" class="headerlink" title="9. 延迟函数调用"></a>9. 延迟函数调用</h3><pre><code>var tId = setTimeout(&quot;myFun()&quot;,1000); //延迟1000毫秒后再调用myFun()函数fucntion myFun()&#123;    //do something    clearTimeout(tId); //销毁对象&#125;</code></pre><h3 id="10-字符串与数字间的转换"><a href="#10-字符串与数字间的转换" class="headerlink" title="10. 字符串与数字间的转换"></a>10. 字符串与数字间的转换</h3><pre><code>var i = 1;var str = i.toString(); //结果: &quot;1&quot;var str = new String(i); //结果: &quot;1&quot;i = parseInt(str); //结果: 1i = parseFloat(str); //结果: 1.0//注意: parseInt,parseFloat会把一个类似于&quot;32G&quot;的字符串,强制转换成32</code></pre><h3 id="11-实现字符串长度截取并在结尾添加…"><a href="#11-实现字符串长度截取并在结尾添加…" class="headerlink" title="11.实现字符串长度截取并在结尾添加…"></a>11.实现字符串长度截取并在结尾添加…</h3><pre><code>function cutstr(str, len) &#123;    var temp;    var icount = 0;    var patrn = /[^\x00-\xff]/;  //表示汉字或者全角，即ASCII 编码不在0-255的字符    var strre = &quot;&quot;;    for (var i = 0; i &lt; str.length; i++) &#123;        if (icount &lt; len) &#123;            // 每次截取一个字符            temp = str.substr(i, 1);            if (patrn.exec(temp) == null) &#123;                // 如果是英文、半角                icount = icount + 1            &#125; else &#123;                // 如果是中文、全角                icount = icount + 2            &#125;            // 字符串连接            strre += temp        &#125; else &#123;            break        &#125;    &#125;    return strre + &quot;...&quot;&#125;// demo:cutstr(&quot;Charles&quot;, 2)  //Charles...cutstr(&quot;博客&quot;, 3)    //博客...</code></pre><h3 id="12-获取主域名"><a href="#12-获取主域名" class="headerlink" title="12. 获取主域名"></a>12. 获取主域名</h3><pre><code>function getHost(url) &#123;    var host = &quot;null&quot;;    if(typeof url == &quot;undefined&quot;|| null == url) &#123;        url = window.location.href;    &#125;    var regex = /^\w+\:\/\/([^\/]*).*/;    var match = url.match(regex);    if(typeof match != &quot;undefined&quot; &amp;&amp; null != match) &#123;        host = match[1];    &#125;    return host;&#125;// demo:getHost(&quot;http://www.hellozhb.top/page/2&quot;)   //www.hellozhb.top</code></pre><h3 id="13-清除左右空格"><a href="#13-清除左右空格" class="headerlink" title="13.清除左右空格"></a>13.清除左右空格</h3><pre><code>String.prototype.trim=function()&#123;　　return this.replace(/(^\s*)|(\s*$)/g, &quot;&quot;);&#125;String.prototype.ltrim=function()&#123;　　return this.replace(/(^\s*)/g,&quot;&quot;);&#125;String.prototype.rtrim=function()&#123;　　return this.replace(/(\s*$)/g,&quot;&quot;);&#125;</code></pre><h3 id="14-替换全部"><a href="#14-替换全部" class="headerlink" title="14.替换全部"></a>14.替换全部</h3><pre><code>String.prototype.replaceAll = function(s1, s2) &#123;    return this.replace(new RegExp(s1, &quot;gm&quot;), s2)&#125;// demo:&quot;哈哈哈&quot;.replaceAll(&#39;哈&#39;,&#39;呵&#39;)   //呵呵呵</code></pre><h3 id="15-转义-html-标签"><a href="#15-转义-html-标签" class="headerlink" title="15. 转义 html 标签"></a>15. 转义 html 标签</h3><pre><code>function HtmlEncode(text) &#123;    return text.replace(/&amp;/g, &#39;&amp;amp&#39;).replace(/\&quot;/g, &#39;&amp;quot;&#39;).replace(/&lt;/g, &#39;&amp;lt;&#39;).replace(/&gt;/g, &#39;&amp;gt;&#39;)&#125;// demo:HtmlEncode(&quot;&lt;html&gt;&lt;/html&gt;&quot;);    //&amp;lt;html&amp;gt;&amp;lt;/html&amp;gt;</code></pre><h3 id="16-还原-html-标签"><a href="#16-还原-html-标签" class="headerlink" title="16.还原 html 标签"></a>16.还原 html 标签</h3><pre><code>function HtmlDecode(text) &#123;    return text.replace(/&amp;amp;/g, &#39;&amp;&#39;).replace(/&amp;quot;/g, &#39;\&quot;&#39;).replace(/&amp;lt;/g, &#39;&lt;&#39;).replace(/&amp;gt;/g, &#39;&gt;&#39;)&#125;// demo:HtmlDecode(&quot;&amp;lt;html&amp;gt;&amp;lt;/html&amp;gt;&quot;);    //&lt;html&gt;&lt;/html&gt;</code></pre><h3 id="17-时间日期格式转换"><a href="#17-时间日期格式转换" class="headerlink" title="17.时间日期格式转换"></a>17.时间日期格式转换</h3><pre><code>Date.prototype.Format = function(formatStr) &#123;    var str = formatStr;    var Week = [&#39;日&#39;, &#39;一&#39;, &#39;二&#39;, &#39;三&#39;, &#39;四&#39;, &#39;五&#39;, &#39;六&#39;];    str = str.replace(/yyyy|YYYY/, this.getFullYear());    str = str.replace(/yy|YY/, (this.getYear() % 100) &gt; 9 ? (this.getYear() % 100).toString() : &#39;0&#39; + (this.getYear() % 100));    str = str.replace(/MM/, (this.getMonth() + 1) &gt; 9 ? (this.getMonth() + 1).toString() : &#39;0&#39; + (this.getMonth() + 1));    str = str.replace(/M/g, (this.getMonth() + 1));    str = str.replace(/w|W/g, Week[this.getDay()]);    str = str.replace(/dd|DD/, this.getDate() &gt; 9 ? this.getDate().toString() : &#39;0&#39; + this.getDate());    str = str.replace(/d|D/g, this.getDate());    str = str.replace(/hh|HH/, this.getHours() &gt; 9 ? this.getHours().toString() : &#39;0&#39; + this.getHours());    str = str.replace(/h|H/g, this.getHours());    str = str.replace(/mm/, this.getMinutes() &gt; 9 ? this.getMinutes().toString() : &#39;0&#39; + this.getMinutes());    str = str.replace(/m/g, this.getMinutes());    str = str.replace(/ss|SS/, this.getSeconds() &gt; 9 ? this.getSeconds().toString() : &#39;0&#39; + this.getSeconds());    str = str.replace(/s|S/g, this.getSeconds());    return str;&#125;// demo:var date = new Date();date.Format(&quot;YYYY-M-D&quot;);    //2013-5-8date.Format(&quot;YYYY-MM-DD&quot;);  //2013-11-08</code></pre><h3 id="18-判断是否为数字类型"><a href="#18-判断是否为数字类型" class="headerlink" title="18.判断是否为数字类型"></a>18.判断是否为数字类型</h3><pre><code>function isDigit(value) &#123;    var patrn = /^[0-9]*$/;    if (patrn.exec(value) == null || value == &quot;&quot;) &#123;        return false    &#125; else &#123;        return true    &#125;&#125;// demo:isDigit(&quot;sdf&quot;);     //falseisDigit(12);        //true</code></pre><h3 id="19-设置-cookie-值"><a href="#19-设置-cookie-值" class="headerlink" title="19.设置 cookie 值"></a>19.设置 cookie 值</h3><pre><code>function setCookie(name, value, Hours) &#123;    var d = new Date();    var offset = 8;    var utc = d.getTime() + (d.getTimezoneOffset() * 60000);    var nd = utc + (3600000 * offset);    var exp = new Date(nd);    exp.setTime(exp.getTime() + Hours * 60 * 60 * 1000);    document.cookie = name + &quot;=&quot; + escape(value) + &quot;;path=/;expires=&quot; + exp.toGMTString() + &quot;;domain=xuanfengge.com;&quot;&#125;</code></pre><h3 id="20-设置-cookie-值"><a href="#20-设置-cookie-值" class="headerlink" title="20.设置 cookie 值"></a>20.设置 cookie 值</h3><pre><code>function getCookie(name) &#123;    var arr = document.cookie.match(new RegExp(&quot;(^| )&quot; + name + &quot;=([^;]*)(;|$)&quot;));    if (arr != null) return unescape(arr[2]);    return null&#125;</code></pre><h3 id="21-用户判断给定的对象是否是数组"><a href="#21-用户判断给定的对象是否是数组" class="headerlink" title="21 用户判断给定的对象是否是数组"></a>21 用户判断给定的对象是否是数组</h3><pre><code>function isArray(o)&#123;    return Object.prototype.toString.call(o)===&#39;[object Array]&#39;;&#125;// demo：isArray(&quot;str&quot;);  //falseisArray([1,2]);  //true</code></pre><h3 id="22-判断检查数组中是否存在某个值"><a href="#22-判断检查数组中是否存在某个值" class="headerlink" title="22.判断检查数组中是否存在某个值"></a>22.判断检查数组中是否存在某个值</h3><pre><code>Array.prototype.inArray = function(e) &#123;    for(i=0;i &lt; this.length;i++)    &#123;        if(this[i] == e)        return true;    &#125;    return false;&#125;// demo:[1,2].inArray(1);  //true</code></pre><h3 id="23-用来显示或隐藏一个-DOM-元素"><a href="#23-用来显示或隐藏一个-DOM-元素" class="headerlink" title="23. 用来显示或隐藏一个 DOM 元素"></a>23. 用来显示或隐藏一个 DOM 元素</h3><pre><code>function toggle(obj)&#123;    var el = document.getElementById(obj);    if ( el.style.display != &#39;none&#39; ) &#123;        el.style.display = &#39;none&#39;;    &#125;    else &#123;        el.style.display = &#39;&#39;;    &#125;&#125;// demo:oDiv.onclick = toggle(&quot;id&quot;);</code></pre><h3 id="24-加载样式文件"><a href="#24-加载样式文件" class="headerlink" title="24. 加载样式文件"></a>24. 加载样式文件</h3><pre><code>function LoadStyle(url) &#123;    try &#123;        document.createStyleSheet(url)    &#125; catch(e) &#123;        var cssLink = document.createElement(&#39;link&#39;);        cssLink.rel = &#39;stylesheet&#39;;        cssLink.type = &#39;text/css&#39;;        cssLink.href = url;        var head = document.getElementsByTagName(&#39;head&#39;)[0];        head.appendChild(cssLink)    &#125;&#125;// demo:LoadStyle(&quot;css/style.css&quot;);</code></pre><h3 id="25-清除脚本内容"><a href="#25-清除脚本内容" class="headerlink" title="25. 清除脚本内容"></a>25. 清除脚本内容</h3><pre><code>function stripscript(s) &#123;    return s.replace(/&lt;script.*?&gt;.*?&lt;\/script&gt;/ig, &#39;&#39;);&#125;</code></pre><h3 id="26-解析获取-URL-参数"><a href="#26-解析获取-URL-参数" class="headerlink" title="26. 解析获取 URL 参数"></a>26. 解析获取 URL 参数</h3><pre><code>function getUrlParm(url, parm)&#123;    var thisUrl=url;    var parmValue=&quot;&quot;;    var re=new RegExp(parm+&quot;=.*&quot;, &quot;i&quot;);    var mResult=re.exec(thisUrl);    if(mResult!=null)&#123;        mResult=mResult[0];        alert(mResult);        if(mResult.indexOf(&quot;&amp;&quot;)!=-1)            mResult=mResult.split(&quot;&amp;&quot;)[0];        alert(parm+&quot; value is &quot;+mResult.split(&quot;=&quot;)[1]);  //return mResult.split(&quot;=&quot;)[1];    &#125;&#125;// demo:getUrlParm(&quot;http://www.xuanfeng.com/login?user=chris&quot;,&quot;user&quot;);// user=chris// user value is chris</code></pre><h3 id="27-判断是否为有效的数字"><a href="#27-判断是否为有效的数字" class="headerlink" title="27. 判断是否为有效的数字"></a>27. <strong>判断是否为有效的数字</strong></h3><pre><code>var i = 123; var str = &quot;string&quot;;if( typeof i == &quot;number&quot; )&#123; &#125; //true//某些方法(如:parseInt,parseFloat)会返回一个特殊的值NaN(Not a Number)//请注意第2点中的[注意],此方法不完全适合判断一个字符串是否是数字型!!i = parseInt(str);if( isNaN(i) )&#123; &#125;  //true</code></pre><h3 id="28-获取时间的某部份"><a href="#28-获取时间的某部份" class="headerlink" title="28. 获取时间的某部份"></a>28. 获取时间的某部份</h3><pre><code>var myDate = new Date();myDate.getYear(); //获取当前年份(2位)myDate.getFullYear(); //获取完整的年份(4位,1970-????)myDate.getMonth(); //获取当前月份(0-11,0代表1月)myDate.getDate(); //获取当前日(1-31)myDate.getDay(); //获取当前星期X(0-6,0代表星期天)myDate.getTime(); //获取当前时间(从1970.1.1开始的毫秒数)myDate.getHours(); //获取当前小时数(0-23)myDate.getMinutes(); //获取当前分钟数(0-59)myDate.getSeconds(); //获取当前秒数(0-59)myDate.getMilliseconds(); //获取当前毫秒数(0-999)myDate.toLocaleDateString(); //获取当前日期myDate.toLocaleTimeString(); //获取当前时间myDate.toLocaleString( ); //获取日期与时间</code></pre><h3 id="29-事件源对象"><a href="#29-事件源对象" class="headerlink" title="29. 事件源对象"></a>29. 事件源对象</h3><pre><code>event.srcElement.tagNameevent.srcElement.type// 捕获释放event.srcElement.setCapture();event.srcElement.releaseCapture();// 事件按键event.keyCodeevent.shiftKeyevent.altKeyevent.ctrlKey// 事件返回值event.returnValue// 鼠标位置event.xevent.y</code></pre><h3 id="30-元素显示的通用方法"><a href="#30-元素显示的通用方法" class="headerlink" title="30 . 元素显示的通用方法"></a>30 . 元素显示的通用方法</h3><pre><code>function $(id) &#123;    return !id ? null : document.getElementById(id);&#125;function display(id) &#123;    var obj = $(id);    if(obj.style.visibility) &#123;        obj.style.visibility = obj.style.visibility == &#39;visible&#39; ? &#39;hidden&#39; : &#39;visible&#39;;    &#125; else &#123;        obj.style.display = obj.style.display == &#39;&#39; ? &#39;none&#39; : &#39;&#39;;    &#125;&#125;</code></pre><h3 id="31-将字符串转换成-URL-编码"><a href="#31-将字符串转换成-URL-编码" class="headerlink" title="31. 将字符串转换成 URL 编码"></a>31. 将字符串转换成 URL 编码</h3><pre><code>var myString = &quot;hello all&quot;;var code = encodeURI(myString); //结果: &quot;hello%20all&quot;var str = decodeURI(code); //结果: &quot;hello all&quot;</code></pre><p><code>相应的还有: encodeURIComponent() decodeURIComponent()</code></p><h3 id="32-将字符转换成-Unicode-编码"><a href="#32-将字符转换成-Unicode-编码" class="headerlink" title="32. 将字符转换成 Unicode 编码"></a>32. 将字符转换成 Unicode 编码</h3><pre><code>var myString = &quot;hello&quot;;var code = myString.charCodeAt(3); //返回&quot;l&quot;的Unicode编码(整型)var char = String.fromCharCode(66); //返回Unicode为66的字符</code></pre><h3 id="33-光标停在文字的后面，文本框获得焦点时调用"><a href="#33-光标停在文字的后面，文本框获得焦点时调用" class="headerlink" title="33. 光标停在文字的后面，文本框获得焦点时调用"></a>33. 光标停在文字的后面，文本框获得焦点时调用</h3><pre><code>function focusLast()&#123;    var e = event.srcElement;    var r =e.createTextRange();    r.moveStart(&#39;character&#39;,e.value.length);    r.collapse(true);    r.select();&#125;</code></pre><h3 id="34-检验-URL-链接是否有效"><a href="#34-检验-URL-链接是否有效" class="headerlink" title="34. 检验 URL 链接是否有效"></a>34. 检验 URL 链接是否有效</h3><pre><code>function getUrlState(URL)&#123;    var xmlhttp = new ActiveXObject(&quot;microsoft.xmlhttp&quot;);    xmlhttp.Open(&quot;GET&quot;,URL, false);    try&#123;        xmlhttp.Send();    &#125;catch(e)&#123;    &#125;finally&#123;        var result = xmlhttp.responseText;        if(result)&#123;            if(xmlhttp.Status==200)&#123;                return(true);            &#125;else&#123;                return(false);            &#125;        &#125;else&#123;            return(false);        &#125;    &#125;&#125;</code></pre><h3 id="35-格式化-CSS-样式代码"><a href="#35-格式化-CSS-样式代码" class="headerlink" title="35. 格式化 CSS 样式代码"></a>35. 格式化 CSS 样式代码</h3><pre><code>function formatCss(s)&#123;//格式化代码    s = s.replace(/\s*([\&#123;\&#125;\:\;\,])\s*/g, &quot;$1&quot;);    s = s.replace(/;\s*;/g, &quot;;&quot;); //清除连续分号    s = s.replace(/\,[\s\.\#\d]*&#123;/g, &quot;&#123;&quot;);    s = s.replace(/([^\s])\&#123;([^\s])/g, &quot;$1 &#123;\n\t$2&quot;);    s = s.replace(/([^\s])\&#125;([^\n]*)/g, &quot;$1\n&#125;\n$2&quot;);    s = s.replace(/([^\s]);([^\s\&#125;])/g, &quot;$1;\n\t$2&quot;);    return s;&#125;</code></pre><h3 id="36-压缩-CSS-样式代码"><a href="#36-压缩-CSS-样式代码" class="headerlink" title="36. 压缩 CSS 样式代码"></a>36. 压缩 CSS 样式代码</h3><pre><code>function yasuoCss (s) &#123;//压缩代码    s = s.replace(/\/\*(.|\n)*?\*\//g, &quot;&quot;); //删除注释    s = s.replace(/\s*([\&#123;\&#125;\:\;\,])\s*/g, &quot;$1&quot;);    s = s.replace(/\,[\s\.\#\d]*\&#123;/g, &quot;&#123;&quot;); //容错处理    s = s.replace(/;\s*;/g, &quot;;&quot;); //清除连续分号    s = s.match(/^\s*(\S+(\s+\S+)*)\s*$/); //去掉首尾空白    return (s == null) ? &quot;&quot; : s[1];&#125;</code></pre><h3 id="37-获取当前路径"><a href="#37-获取当前路径" class="headerlink" title="37. 获取当前路径"></a>37. 获取当前路径</h3><pre><code>var currentPageUrl = &quot;&quot;;if (typeof this.href === &quot;undefined&quot;) &#123;    currentPageUrl = document.location.toString().toLowerCase();&#125;else &#123;    currentPageUrl = this.href.toString().toLowerCase();&#125;</code></pre><h3 id="38-IP-转成整型"><a href="#38-IP-转成整型" class="headerlink" title="38. IP 转成整型"></a>38. IP 转成整型</h3><pre><code>function _ip2int(ip)&#123;    var num = 0;    ip = ip.split(&quot;.&quot;);    num = Number(ip[0]) * 256 * 256 * 256 + Number(ip[1]) * 256 * 256 + Number(ip[2]) * 256 + Number(ip[3]);    num = num &gt;&gt;&gt; 0;    return num;&#125;</code></pre><h3 id="39-整型解析为-IP-地址"><a href="#39-整型解析为-IP-地址" class="headerlink" title="39. 整型解析为 IP 地址"></a>39. 整型解析为 IP 地址</h3><pre><code>function _int2iP(num)&#123;    var str;    var tt = new Array();    tt[0] = (num &gt;&gt;&gt; 24) &gt;&gt;&gt; 0;    tt[1] = ((num &lt;&lt; 8) &gt;&gt;&gt; 24) &gt;&gt;&gt; 0;    tt[2] = (num &lt;&lt; 16) &gt;&gt;&gt; 24;    tt[3] = (num &lt;&lt; 24) &gt;&gt;&gt; 24;    str = String(tt[0]) + &quot;.&quot; + String(tt[1]) + &quot;.&quot; + String(tt[2]) + &quot;.&quot; + String(tt[3]);    return str;&#125;</code></pre><h3 id="40-实现-checkbox-全选与全不选"><a href="#40-实现-checkbox-全选与全不选" class="headerlink" title="40. 实现 checkbox 全选与全不选"></a>40. 实现 checkbox 全选与全不选</h3><pre><code>function checkAll() &#123;    var selectall = document.getElementById(&quot;selectall&quot;);    var allbox = document.getElementsByName(&quot;allbox&quot;);    if (selectall.checked) &#123;        for (var i = 0; i &lt; allbox.length; i++) &#123;            allbox[i].checked = true;        &#125;    &#125; else &#123;        for (var i = 0; i &lt; allbox.length; i++) &#123;            allbox[i].checked = false;        &#125;    &#125;&#125;</code></pre><p>来源:<a href="https://www.xuanfengge.com/">轩枫阁</a></p>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> JS手记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue面试题整理</title>
      <link href="2020/11/11/vue-mian-shi-ti-zheng-li/"/>
      <url>2020/11/11/vue-mian-shi-ti-zheng-li/</url>
      
        <content type="html"><![CDATA[<h4 id="1-vue的核心是什么，解决了什么问题，实现原理是什么"><a href="#1-vue的核心是什么，解决了什么问题，实现原理是什么" class="headerlink" title="1.vue的核心是什么，解决了什么问题，实现原理是什么"></a>1.vue的核心是什么，解决了什么问题，实现原理是什么</h4><ul><li>核心：数据驱动视图  组件化  组件响应原理</li><li>解决问题：相对于jquery来说，可以进来避免操作DOM元素，vue中主要是操作数据的</li><li>实现原理：vue的实现主要是双向数据绑定，在vue2.0双向数据绑定的原理使用的是ES5的object.defineProperty来进行数据劫持，vue3.0主要采用的是ES6的proxy来实现数据劫持的</li></ul><h4 id="2-object-defineProperty和proxy的区别"><a href="#2-object-defineProperty和proxy的区别" class="headerlink" title="2.object.defineProperty和proxy的区别"></a>2.object.defineProperty和proxy的区别</h4><p> object.defineProperty用于监听对象数据的改变</p><p>   优点：兼容IE9，兼容性好</p><p>   缺点：只能监听一层，如果对象中的属性还是对象，需要深度遍历才能监听</p><p>​      不能遍历数组，在vue中数组的方法被重写了所以才能用数组的方法</p><p> proxy：可以理解为在被劫持的对象之间加了一层拦截</p><p>   优点：劫持了整个对象，不需要像object.defineProperty遍历整个对象</p><p>​      可以监听数组的变化，不需要重写数组的方法</p><p>​      支持13中拦截操作是object.defineProperty不具备的</p><p>​      能够达到操作新对象的目的</p><p>   缺点：兼容性不好，不兼容IE浏览器</p><h4 id="3-单页面应用和多页面应用的区别"><a href="#3-单页面应用和多页面应用的区别" class="headerlink" title="3.单页面应用和多页面应用的区别"></a>3.单页面应用和多页面应用的区别</h4><ul><li><p>单页面应用：只用一个主页面的应用，一开始只需要加载一次js  css等相关资源，所有内容都包含在主页面上，对于每一个功能组件化。单页面应用实际上就是切换组件，刷新局部资源。</p></li><li><p>多页面应用：指的是多个独立的页面应用，每个页面必须重复加载js  css等相关资源。多页面跳转需要整个资源刷新。</p></li><li><h5 id="比较"><a href="#比较" class="headerlink" title="比较"></a>比较</h5><ul><li><p>结构：</p><ul><li>SPA：一个页面 + 许多模块组件</li><li>MPA:许多完整的页面</li></ul></li><li><p>体验：</p><ul><li>SPA：页面切换快、体验佳，初次加载文件过多时可以做相关的性能优化</li><li>MPA: 页面切换慢，网速慢的时候体验非常不好</li></ul></li><li><p>资源文件</p><ul><li>SPA：组件公用的资源只需要加载一次</li><li>MPA：每个页面都需要加载公用的资源</li></ul></li><li><p>使用场景</p><ul><li>SPA：对体验度和流畅度要求高的应用，缺点是不利于SEO优化</li><li>适用于SEO优化较高的应用</li></ul></li><li><p>内容更新</p><ul><li>SPA：相关组件切换，局部更新</li><li>重复http请求，整体HTML结构切换</li></ul></li><li><p>路由模式</p><ul><li>SPA：可以使用hash和history实现单页面应用</li><li>普通的链接跳转</li></ul></li><li><p>数据传递：</p><ul><li>使用状态存储工具（vuex  redux）</li><li>通过本地存储，url参数等</li></ul></li></ul></li></ul><h4 id="4-单页面应用实现—前端路由"><a href="#4-单页面应用实现—前端路由" class="headerlink" title="4.单页面应用实现—前端路由"></a>4.单页面应用实现—前端路由</h4><h5 id="前端路由实现的核心：改变视图不会向后端发送请求"><a href="#前端路由实现的核心：改变视图不会向后端发送请求" class="headerlink" title="前端路由实现的核心：改变视图不会向后端发送请求"></a>前端路由实现的核心：改变视图不会向后端发送请求</h5><p> vue-router路由的两种模式：<code>hash</code> 和 <code>history</code></p><ul><li><h5 id="hash模式"><a href="#hash模式" class="headerlink" title="hash模式"></a>hash模式</h5><ul><li><p>原理：使用onhashchange事件,通过 <code>window.location.hash</code> 属性获取和设置 <code>hash</code> 值。</p><pre class=" language-js"><code class="language-js">window<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'hashchange'</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>oldURL<span class="token punctuation">)</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>newURL<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">)</span></code></pre><p>由于hash发生变化的url都会被浏览器记录下来，所以浏览器的前进后退是可以使用的，尽管浏览器没有请求服务器，但是页面状态仍和url关联起来的</p></li><li><p>hash的特点：hash会出现在url中，但是不会被包括在http请求中，对后端没有影响，也不会重新加载页面</p></li></ul></li><li><h5 id="history模式"><a href="#history模式" class="headerlink" title="history模式"></a>history模式</h5><ul><li>利用H5 History Interface中新增的<code>pushState()</code>和<code>replaceState()</code>方法，他们提供了对历史记录进行修改的功能</li></ul></li><li><h5 id="两种模式的比较"><a href="#两种模式的比较" class="headerlink" title="两种模式的比较"></a>两种模式的比较</h5><ul><li>hash模式使用URL的hash来模拟一个完整的URL，因此URL改变的时候页面并不会重载</li><li>History模式会改变URL，所以在路由跳转的时候回丢失一些地址信息，在刷新或者直接访问路由地址的时候可能会匹配不到静态资源，因此需要在服务器上配置一些信息，让服务器增加一个覆盖所有情况的候选资源</li></ul></li><li><h5 id="hash路由的优缺点"><a href="#hash路由的优缺点" class="headerlink" title="hash路由的优缺点"></a>hash路由的优缺点</h5><ul><li>优点：<ul><li>实现简单，兼容性好</li><li>绝大多数框架均提供了hash路由的实现</li><li>不需要服务器端进行任何的设置和开发</li><li>除了资源加载和ajax请求，不会发起其他的请求</li></ul></li><li>缺点<ul><li>服务器无法准备的跟踪前端路由信息</li><li>对于需要锚点跳转功能的需求会与目前的路由机制起冲突</li></ul></li></ul></li><li><p>history路由的优缺点</p><ul><li>优点<ul><li>重定向过程中不会丢失url参数，后端可以拿到这部分数据</li><li>后端可以准确跟踪路由信息</li><li>可以使用<code>history.state</code>来获取当前<code>url</code>对应的状态信息</li></ul></li><li>缺点<ul><li>兼容性不如<code>hash</code>路由(只兼容到<code>IE10</code>)</li><li>需要后端支持，每次返回<code>html</code>文档</li></ul></li></ul></li></ul><h5 id="第三种模式"><a href="#第三种模式" class="headerlink" title="第三种模式"></a>第三种模式</h5><h5 id="abstract模式：一个不依赖于浏览器的浏览历史虚拟管理后端"><a href="#abstract模式：一个不依赖于浏览器的浏览历史虚拟管理后端" class="headerlink" title="abstract模式：一个不依赖于浏览器的浏览历史虚拟管理后端"></a>abstract模式：一个不依赖于浏览器的浏览历史虚拟管理后端</h5><p> 不写 mode 配置在移动端原生环境中使用 abstract 模式，在 Weex 环境中只支持使用 abstract 模式</p><h4 id="5-对于MVVM的理解"><a href="#5-对于MVVM的理解" class="headerlink" title="5.对于MVVM的理解"></a>5.对于MVVM的理解</h4><ul><li>M指的是model，代表的是数据模型</li><li>V指的是View，代表的是页面视图，也可以是说是展示页面</li><li>VM指的是ViewModel，代表的是数据模型，主要是连接model和view的桥梁</li></ul><p>MVVM框架实现了数据的双向绑定：</p><p> 在vue.js框架中，我们就可以认为vue就是ViewModel，当V层改变的时候通过vue会通知M层改变数据，当M型改变的时候通过vue会检测到数据变化通知V层改变页面</p><h4 id="6-Vue的生命周期"><a href="#6-Vue的生命周期" class="headerlink" title="6.Vue的生命周期"></a>6.Vue的生命周期</h4><ul><li><p>beforeCreate:实例初始化之前，数据和时间还为被调用</p></li><li><p>created：实例初始化完成，但是还没有挂载数据</p></li><li><p>beforeMount：实例挂载之前，render函数首次被调用</p><p><strong>注意：该钩子函数在服务端渲染是不被调用</strong></p></li><li><p>mounted：实例挂载之后调用，此时el被新创建的vm.$el替换了，可以在mounted中使用vue.nextTick</p></li><li><p>beforeUpdate:数据更新之前调用</p></li><li><p>updated：数据更新之后调用</p></li><li><p>beforeDestroyed：实例销毁之前调用</p></li><li><p>destroyed：实例销毁之后调用</p></li></ul><h4 id="7-什么是vue的生命周期"><a href="#7-什么是vue的生命周期" class="headerlink" title="7.什么是vue的生命周期"></a>7.什么是vue的生命周期</h4><p> Vue的生命周期指的就是vue从创建到销毁的过程，其中包括创建、初始化数据、编译模板、挂载DOM元素、渲染、更新、销毁等一系列的过程</p><h4 id="8-vue生命周期的作用是什么"><a href="#8-vue生命周期的作用是什么" class="headerlink" title="8.vue生命周期的作用是什么"></a>8.vue生命周期的作用是什么</h4><p> 生命周期中有多个钩子函数，当我们在操作vue的时候能够形成更好的逻辑，每个钩子函数都有对应能做的事情</p><h4 id="9-第一次加载页面会触发哪几个钩子函数"><a href="#9-第一次加载页面会触发哪几个钩子函数" class="headerlink" title="9.第一次加载页面会触发哪几个钩子函数"></a>9.第一次加载页面会触发哪几个钩子函数</h4><p> beforeCreate  created  beforeMount mounted</p><h4 id="10-父子组件在第一次渲染时会触发哪几个钩子函数"><a href="#10-父子组件在第一次渲染时会触发哪几个钩子函数" class="headerlink" title="10.父子组件在第一次渲染时会触发哪几个钩子函数"></a>10.父子组件在第一次渲染时会触发哪几个钩子函数</h4><p> 父：beforeCreate  created  beforeMount</p><p> 子：beforeCreate  created  beforeMount mounted</p><p> 父：mounted</p><h4 id="7-keep-alive：保存当前组件的状态"><a href="#7-keep-alive：保存当前组件的状态" class="headerlink" title="7.keep-alive：保存当前组件的状态"></a>7.keep-alive：保存当前组件的状态</h4><p> keep-alive包括组件被切换是有两个生命周期钩子函数</p><p> activated：</p><p> deactivated</p><h4 id="8-Vue-mixin混入"><a href="#8-Vue-mixin混入" class="headerlink" title="8.Vue.mixin混入"></a>8.Vue.mixin混入</h4><p> 混入(mixin)提供一种非常灵活的方式，来分发vue组件中可复用的功能</p><p>简单理解为，如果一个方法需要多个组件共用，可以在根组件使用mixin混入，mixin也可以看做一个组件，里面也有钩子函数相关的东西</p><h4 id="9-v-if和v-for哪个优先级高：v-for"><a href="#9-v-if和v-for哪个优先级高：v-for" class="headerlink" title="9.v-if和v-for哪个优先级高：v-for"></a>9.v-if和v-for哪个优先级高：v-for</h4><h4 id="10-Vue-delete和delete的区别"><a href="#10-Vue-delete和delete的区别" class="headerlink" title="10.Vue.delete和delete的区别"></a>10.Vue.delete和delete的区别</h4><p> Vue.delete直接删除了数组或对象的值，也删除了在内存中占得位置</p><p> delete只是删除了值，但是在内存中还保留位置</p><h4 id="11-vue中的自定义指令：Vue-directive"><a href="#11-vue中的自定义指令：Vue-directive" class="headerlink" title="11.vue中的自定义指令：Vue.directive"></a>11.vue中的自定义指令：Vue.directive</h4><pre class=" language-javascript"><code class="language-javascript">Vue<span class="token punctuation">.</span><span class="token function">directive</span><span class="token punctuation">(</span><span class="token string">'my-bind'</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 只调用一次，指令第一次绑定到元素是调用，可以进行初始化设置</span> <span class="token function">bind</span><span class="token punctuation">(</span>el<span class="token punctuation">,</span>binding<span class="token punctuation">,</span>vnode<span class="token punctuation">,</span>oldVnode<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//el:指定绑定的原江苏</span>    <span class="token comment" spellcheck="true">//binding:包含指令名、指令值等相关信息</span>    <span class="token comment" spellcheck="true">//vnode:编译生成的虚拟节点</span>    <span class="token comment" spellcheck="true">//oldVnode:上一个虚拟节点</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">// 插入父节点是调用，主要保证父节点存在，父节点一定被插入文档中</span>  <span class="token function">inserted</span><span class="token punctuation">(</span>el<span class="token punctuation">,</span>binding<span class="token punctuation">,</span>vnode<span class="token punctuation">,</span>oldVnode<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//所以的Vnode更新的时候调用,但是可能发生在子Vnode更新之前</span>  <span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 指令所在的Vnode和子Vnode全部更新之后调用</span>  <span class="token function">componentUpdated</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//只调用一次，指令与元素解绑时调用</span>  <span class="token function">unbind</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span></code></pre><h4 id="12-过滤器：Vue-filter"><a href="#12-过滤器：Vue-filter" class="headerlink" title="12.过滤器：Vue-filter"></a>12.过滤器：Vue-filter</h4><h4 id="13-Vue-use的原理"><a href="#13-Vue-use的原理" class="headerlink" title="13.Vue.use的原理"></a>13.Vue.use的原理</h4><p> 使用Vue.use必须在new Vue()之前调用</p><p> 主要是在开发Vue插件的时候暴露了一个install的方法，当外界使用use这个插件的时候，就会调用install的方法，同时这个方法的第一个参数是Vue实例，第二个是可选的选项对象</p><p> Element-ui能够直接使用use就是有install的方法，axios没有install的方法，因此只能挂在到vue的原型中才能全局使用</p><h4 id="14-Vue-compile的理解"><a href="#14-Vue-compile的理解" class="headerlink" title="14.Vue.compile的理解"></a>14.Vue.compile的理解</h4><p> 简单来说就是讲一个模板字符串编译成render函数</p><h4 id="15-vue中的data"><a href="#15-vue中的data" class="headerlink" title="15.vue中的data"></a>15.vue中的data</h4><p>  当一个组件被定义，data必须是一个函数，如果是一个对象的话，多有的实例将共享这个对象，这样数据之间会相互影响</p><h4 id="16-vue中的props"><a href="#16-vue中的props" class="headerlink" title="16.vue中的props"></a>16.vue中的props</h4><p> props可以是数组也可以是对象，用来接收父组件传递过来的数据</p><p> 可以设置类型检测，自定义验证和设置默认值</p><p> type：props的设置类型</p><p> default：设置默认值</p><p> required：设置必填项</p><p> validator：设置自定义验证</p><h4 id="17-propsData"><a href="#17-propsData" class="headerlink" title="17.propsData"></a>17.propsData</h4><p> propsData只用于new创建实例是，创建时传递props，主要作用是方便测试</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> Comp <span class="token operator">=</span> Vue<span class="token punctuation">.</span><span class="token function">extend</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  props<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'msg'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  template<span class="token punctuation">:</span> <span class="token string">'&lt;div>&amp;#123;&amp;#123; msg &amp;#125;&amp;#125;&lt;/div>'</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token keyword">var</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Comp</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  propsData<span class="token punctuation">:</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    msg<span class="token punctuation">:</span> <span class="token string">'hello'</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span></code></pre><h4 id="18-computed"><a href="#18-computed" class="headerlink" title="18.computed"></a>18.computed</h4><p> computed：计算属性，主要是为了避免在模板中放入太多的逻辑，因此可以采用计算属性</p><p> 计算属性的结果会被缓存，除非依赖响应式的property变化才会重新计算，就是说如果多次调用计算属性 <code>reversedMessage</code>,会从缓存中拿结果，除非是<code>message</code>发生变化才会重新计算</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  el<span class="token punctuation">:</span> <span class="token string">'#example'</span><span class="token punctuation">,</span>  data<span class="token punctuation">:</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    message<span class="token punctuation">:</span> <span class="token string">'Hello'</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span>  computed<span class="token punctuation">:</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 计算属性的 getter</span>    reversedMessage<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// `this` 指向 vm 实例</span>      <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>message<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">reverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span></code></pre><h4 id="19-computed和methods的区别"><a href="#19-computed和methods的区别" class="headerlink" title="19.computed和methods的区别"></a>19.computed和methods的区别</h4><p> 虽然说计算属性和方法可以拿到相同的结果，但是不同的是计算属性是给予响应式依赖的缓存，多次调用计算属性 <code>reversedMessage</code>,会从缓存中拿结果，除非是<code>message</code>发生变化才会重新计算，而方法是每次触发都会执行</p><h4 id="20-Vue中的事件修饰符"><a href="#20-Vue中的事件修饰符" class="headerlink" title="20.Vue中的事件修饰符"></a>20.Vue中的事件修饰符</h4><p> .stop:阻止事件冒泡</p><p> .prevent:阻止默认行为</p><p> .once:事件只能被触发一次</p><p> .self:事件只能被自身触发</p><p> .capture:事件会在捕获阶段触发，而不是冒泡阶段</p><h4 id="21-按键修饰符"><a href="#21-按键修饰符" class="headerlink" title="21.按键修饰符"></a>21.按键修饰符</h4><p> .enter</p><p> .tab</p><p> .delete</p><p> .esc</p><p> .space</p><p> .up</p><p> .down</p><p> .left</p><p> .right</p><h4 id="22-watch监听数据的变化"><a href="#22-watch监听数据的变化" class="headerlink" title="22.watch监听数据的变化"></a>22.watch监听数据的变化</h4><h4 id="23-vue-loader"><a href="#23-vue-loader" class="headerlink" title="23.vue-loader"></a>23.vue-loader</h4><p> 是wepack中的loader，解析单文件组件书写vue组件</p><p> <strong>特性</strong></p><p> 1.允许vue组件的每个部分使用webpack loader</p><p> 2.允许一个.vue文件使用自定义块</p><p> 3.为每个组件模拟出scoped css</p><h4 id="24-深度作用选择器"><a href="#24-深度作用选择器" class="headerlink" title="24.深度作用选择器"></a>24.深度作用选择器</h4><p> <code>&gt;&gt;&gt;</code> 或者 /deep/ 或者 ::v-deep</p><p> 有些像 Sass 之类的预处理器无法正确解析 <code>&gt;&gt;&gt;</code>。这种情况下你可以使用 <code>/deep/</code> 或 <code>::v-deep</code> 操作符取而代之——两者都是 <code>&gt;&gt;&gt;</code> 的别名，同样可以正常工作</p><h4 id="25-响应路由参数变化"><a href="#25-响应路由参数变化" class="headerlink" title="25.响应路由参数变化"></a>25.响应路由参数变化</h4><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//通过watch监听$route对象的变化</span>watch<span class="token punctuation">:</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token function">$route</span><span class="token punctuation">(</span>to<span class="token punctuation">,</span><span class="token keyword">from</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 通过beforeRouteUpdate导航守卫</span>beforeRouteUpdate（to<span class="token punctuation">,</span><span class="token keyword">from</span><span class="token punctuation">,</span>next）<span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h4 id="26-导航守卫"><a href="#26-导航守卫" class="headerlink" title="26.导航守卫"></a>26.导航守卫</h4><ul><li>全局前置守卫：router.beforeEach</li></ul><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> router <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">VueRouter</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span>router<span class="token punctuation">.</span><span class="token function">beforeEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>to<span class="token punctuation">,</span><span class="token keyword">from</span><span class="token punctuation">,</span>next<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// to:代表即将要进入的目标路由对象</span>  <span class="token comment" spellcheck="true">// from:当前导航正要离开的路由</span>  <span class="token comment" spellcheck="true">// next:调用该方法来resolve这个钩子</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span></code></pre><ul><li>全局解析守卫：router.beforeResolve注册全局守卫，和router.beforeEach类似</li><li>全局后置钩子：router.afterEach。和守卫不同的是，这些钩子不会接受next函数，也不会改变导航本身</li><li>路由独享守卫：router.beforeEnter,参数和全局前置守卫方法参数一样</li><li>组件内守卫<ul><li>beforeRouteEnter：在渲染该组件的对应路由被 confirm 前调用</li><li>beforeRouteUpdate：在当前路由改变，但是该组件被复用时调用</li><li>beforeRouteLeave： 导航离开该组件的对应路由时调用</li></ul></li></ul><h4 id="27-完整的导航解析流程"><a href="#27-完整的导航解析流程" class="headerlink" title="27.完整的导航解析流程"></a>27.完整的导航解析流程</h4><ul><li>导航被触发</li><li>在失活的组件里调用beforeRouteLeave守卫</li><li>调用全局的beforeEach守卫</li><li>在重用的组件里调用beforeRouteUpdate</li><li>在路由配置里调用beforeEnter</li><li>解析异步路由组件</li><li>在被激活的组件里调用beforeRouteUpdate</li><li>调用全局的beforeResolve</li><li>导航被确认</li><li>调用全局的afterEach</li><li>触发DOM更新</li><li>调用beforeRouteEnter守卫中的next的回调函数，创建好的组件实例会作为回调函数的参数传入</li></ul><h4 id="28-在哪个生命周期内调用异步请求"><a href="#28-在哪个生命周期内调用异步请求" class="headerlink" title="28.在哪个生命周期内调用异步请求"></a>28.在哪个生命周期内调用异步请求</h4><p> 最好是在created中，因为服务端渲染不支持beforeMount和mounted钩子函数</p><h4 id="29-虚拟DOM的优缺点"><a href="#29-虚拟DOM的优缺点" class="headerlink" title="29.虚拟DOM的优缺点"></a>29.虚拟DOM的优缺点</h4><ul><li>优点<ul><li>保证性能下限：主要是性能好</li><li>无序手动操作DOM元素</li><li>跨平台</li></ul></li><li>缺点：<ul><li>无法进行极致优化</li></ul></li></ul><h4 id="30-虚拟DOM实现原理"><a href="#30-虚拟DOM实现原理" class="headerlink" title="30.虚拟DOM实现原理"></a>30.虚拟DOM实现原理</h4><ul><li>用js对象模拟真实DOM树，对真实DOM进行抽象</li><li>使用diff算法比较两个虚拟DOM树的差异</li><li>将两个虚拟DOM对象的差异渲染到真正的DOM树上</li></ul><h4 id="31-Vue中key的作用"><a href="#31-Vue中key的作用" class="headerlink" title="31.Vue中key的作用"></a>31.Vue中key的作用</h4><p> key是vue中虚拟DOM的唯一标记，通过这个key，diff算法的操作可以更准确快速</p><p> 准确：避免了就地复用</p><p> 快速：利用key的唯一性生成map对象来获取节点，比遍历方式更快</p><h4 id="32-Vue项目可以进行哪些优化"><a href="#32-Vue项目可以进行哪些优化" class="headerlink" title="32.Vue项目可以进行哪些优化"></a>32.Vue项目可以进行哪些优化</h4><ul><li>代码层面<ul><li>v-if和v-show的使用场景区分</li><li>computed和watch使用场景的区分</li><li>v-for循环使用key，并且避免同时使用v-if</li><li>长列表性能优化</li><li>图片资源懒加载</li><li>路由懒加载</li><li>第三方插件的按需引入</li><li>服务端渲染ssr</li></ul></li><li>webpack层面优化<ul><li>webpack对图片进行压缩</li><li>减少ES6转为ES5的冗余代码</li><li>提取公共代码</li><li>模板预编译</li></ul></li><li>基础的web基础<ul><li>浏览器缓存</li><li>CDN的使用</li></ul></li></ul><h4 id="33-vue3-0的特性"><a href="#33-vue3-0的特性" class="headerlink" title="33.vue3.0的特性"></a>33.vue3.0的特性</h4><ul><li>监测机制的改变使用proxy</li><li>模板，3.0插槽该厂了函数的方式</li><li>对象组件声明方式</li></ul><h4 id="3-什么是虚拟DOM，解决了什么问题"><a href="#3-什么是虚拟DOM，解决了什么问题" class="headerlink" title="3-什么是虚拟DOM，解决了什么问题"></a>3-什么是虚拟DOM，解决了什么问题</h4><p> 虚拟DOM：虚拟DOM用js对象</p>]]></content>
      
      
      <categories>
          
          <category> 面试题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面试题 </tag>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>webpack配置指南</title>
      <link href="2020/11/10/webpack-pei-zhi-zhi-nan/"/>
      <url>2020/11/10/webpack-pei-zhi-zhi-nan/</url>
      
        <content type="html"><![CDATA[<h1 id="webpack概述"><a href="#webpack概述" class="headerlink" title="webpack概述"></a>webpack概述</h1><blockquote><p><em>webpack</em> 是一个现代 JavaScript 应用程序的<em>静态模块打包器(module bundler</em> )</p></blockquote><p><a href="https://www.webpackjs.com/">webpack中文网</a></p><p><a href="https://webpack.js.org/">webpack官网</a></p><h2 id="webpack做了什么"><a href="#webpack做了什么" class="headerlink" title="webpack做了什么"></a>webpack做了什么</h2><ul><li>语法转换<ul><li>less/sass转换成css</li><li>ES6转换成ES5</li><li>typescript转换成js</li></ul></li><li>html/css/js代码的压缩与合并（打包）</li><li>webpack可以在开发期间提供一个开发环境<ul><li>自动开启浏览器</li><li>自动监视文件变化</li><li>自动刷新浏览器</li></ul></li><li>项目一般都需要经过webpack打包之后才上线。</li></ul><h2 id="webpack模块说明"><a href="#webpack模块说明" class="headerlink" title="webpack模块说明"></a>webpack模块说明</h2><p>webpack会把所有的资源都当成模块</p><ul><li>css</li><li>js</li><li>图片</li><li>字体图标</li></ul><p>webpack给前端开发提供了模块化的开发环境</p><ul><li>对于js文件，webpack中支持AMD、CMD、commonJS、ES6模块化等语法</li><li>有了webpack，我们可以在前端代码中使用任意的模块化语法</li><li>可以在浏览器中使用nodejs的模块化语法<code>const $ = require(&#39;jquery&#39;)</code></li></ul><h1 id="webpack基本使用"><a href="#webpack基本使用" class="headerlink" title="webpack基本使用"></a>webpack基本使用</h1><ul><li>创建一个文件夹<code>webpack-demo</code></li><li>初始化项目 生成<code>package.json</code></li></ul><pre class=" language-bash"><code class="language-bash">yarn init -y</code></pre><ul><li>安装webpack的依赖包</li></ul><pre class=" language-bash"><code class="language-bash">yarn add webpack webpack-cli -D</code></pre><ul><li><p>新建文件<code>src</code>和<code>dist</code>文件夹，，src用于提供源码，，dist用于存放打包后的文件</p></li><li><p>在src下新建了<code>index.js</code>文件，目的：对<code>src/index.js</code>文件进行打包</p></li><li><p>在package.json文件配置了打包的脚本</p></li></ul><pre><code>  &quot;scripts&quot;: &#123;    &quot;build&quot;: &quot;webpack --config webpack.config.js&quot;  &#125;</code></pre><ul><li>在项目的根目录，创建一个文件<code>webpack.config.js</code></li><li>执行打包命令</li></ul><pre class=" language-js"><code class="language-js">yarn build</code></pre><h1 id="配置webpack的打包入口"><a href="#配置webpack的打包入口" class="headerlink" title="配置webpack的打包入口"></a>配置webpack的打包入口</h1><ul><li>在<code>webpack.config.js</code>文件中</li></ul><pre><code>// 这是webpack的配置文件// webpack是运行在node环境中，webpack可以执行任意的node代码，包括可以使用node中模块。module.exports = &#123;  // 默认： ./src/index.js  entry: &#39;./src/app.js&#39;&#125;</code></pre><h1 id="配置webpack的打包出口"><a href="#配置webpack的打包出口" class="headerlink" title="配置webpack的打包出口"></a>配置webpack的打包出口</h1><blockquote><p>配置webpack最终打包的文件的出口</p></blockquote><pre><code>  // 配置webpack打包出口  output: &#123;    // path： 打包出口的目录,默认 dist, 必须指定绝对路径    path: path.join(__dirname, &#39;lib&#39;),    // filename: 打包出口的文件名字  默认 main.js    filename: &#39;bundle.js&#39;  &#125;</code></pre><p>==如果要配置path，记得是绝对路径==</p><h1 id="配置webpack的打包模式"><a href="#配置webpack的打包模式" class="headerlink" title="配置webpack的打包模式"></a>配置webpack的打包模式</h1><pre class=" language-js"><code class="language-js">  <span class="token comment" spellcheck="true">// 打包模式  development|production</span>  <span class="token comment" spellcheck="true">// development: 打包不会对进行压缩   打包快</span>  <span class="token comment" spellcheck="true">// production: 打包会对代码进行压缩  上线</span>  mode<span class="token punctuation">:</span> <span class="token string">'development'</span></code></pre><h1 id="配置html-webpack-plugin插件"><a href="#配置html-webpack-plugin插件" class="headerlink" title="配置html-webpack-plugin插件"></a>配置html-webpack-plugin插件</h1><blockquote><p>html-webpack-plugin插件能够帮助我们自动在dist中生成一个html文件，并且会自动帮我们引入打包后的文件。</p></blockquote><ul><li>安装html-webpack-plugin插件</li></ul><pre class=" language-bash"><code class="language-bash">yarn add html-webpack-plugin -D</code></pre><ul><li>在<code>webpack.config.js</code>中配置</li></ul><pre><code>//1. 导入html-webpack-plugin插件const HtmlWebpackPlugin = require(&#39;html-webpack-plugin&#39;)// 2.配置webpack的插件，是一个数组plugins: [new HtmlWebpackPlugin(&#123;  // 生成html的模板  template: &#39;./src/index.html&#39;&#125;)</code></pre><h1 id="配置css-loader处理css文件"><a href="#配置css-loader处理css文件" class="headerlink" title="配置css-loader处理css文件"></a>配置css-loader处理css文件</h1><blockquote><p>webpack天生只能处理js文件，如果需要处理其他类型的文件，需要配置loader</p></blockquote><ul><li>安装依赖包</li></ul><pre class=" language-js"><code class="language-js">yarn add css<span class="token operator">-</span>loader style<span class="token operator">-</span>loader <span class="token operator">-</span>D</code></pre><ul><li>配置loader</li></ul><pre><code>module: &#123;  rules: [    // 配置css-loader的规则    &#123;      // 匹配所有.css结尾的文件      test: /\.css$/,      // 使用css-loader 和 style-loader处理      use: [&#39;style-loader&#39;, &#39;css-loader&#39;]    &#125;  ]&#125;</code></pre><p>==注意：loader加载顺序从右往左==</p><h1 id="配置less-loader处理less文件"><a href="#配置less-loader处理less文件" class="headerlink" title="配置less-loader处理less文件"></a>配置less-loader处理less文件</h1><ul><li>安装依赖包</li></ul><pre class=" language-bash"><code class="language-bash">yarn add less-loader <span class="token function">less</span> -D</code></pre><ul><li>配置less-loader</li></ul><pre><code>// 配置less-loader的规则&#123;  // 匹配所有.less结尾的文件  test: /\.less$/,    // 使用css-loader 和 style-loader处理    use: [&#39;style-loader&#39;, &#39;css-loader&#39;, &#39;less-loader&#39;]&#125;</code></pre><h1 id="配置file-loader处理图片"><a href="#配置file-loader处理图片" class="headerlink" title="配置file-loader处理图片"></a>配置file-loader处理图片</h1><ul><li>安装依赖包</li></ul><pre><code>yarn add file-loader -D</code></pre><ul><li>配置file-loader</li></ul><pre><code>// file-loader配置&#123;  test: /\.(png|jpg|gif)$/,  use: &#39;file-loader&#39;&#125;</code></pre><h1 id="配置url-loader处理图片"><a href="#配置url-loader处理图片" class="headerlink" title="配置url-loader处理图片"></a>配置url-loader处理图片</h1><ul><li>安装</li></ul><pre class=" language-js"><code class="language-js">yarn add url<span class="token operator">-</span>loader file<span class="token operator">-</span>loader <span class="token operator">-</span>D</code></pre><ul><li>配置url-loader</li></ul><pre><code>&#123;  test: /\.(png|jpg|gif)$/,  use: &#123;    loader: &#39;url-loader&#39;,    options: &#123;      limit: 20 * 1024    &#125;  &#125;&#125;</code></pre><h1 id="配置字体图标和音视频"><a href="#配置字体图标和音视频" class="headerlink" title="配置字体图标和音视频"></a>配置字体图标和音视频</h1><pre><code>// 字体图标&#123;  test: /\.(eot|svg|ttf|woff)$/,  use: &#123;    loader: &#39;url-loader&#39;,    options: &#123;      limit: 20 * 1024    &#125;  &#125;&#125;,&#123;  test: /\.(mp3|mp4|ogg)$/,  use: &#123;    loader: &#39;url-loader&#39;,    options: &#123;      limit: 20 * 1024    &#125;  &#125;&#125;</code></pre><h1 id="配置babel-loader"><a href="#配置babel-loader" class="headerlink" title="配置babel-loader"></a>配置babel-loader</h1><blockquote><p>babel可以把高版本的js语法转成低版本的js语法，保证运行的效果一样。能够兼容更多的浏览器。</p></blockquote><ul><li>安装依赖包</li></ul><pre class=" language-js"><code class="language-js">yarn add  babel<span class="token operator">-</span>loader @babel<span class="token operator">/</span>core @babel<span class="token operator">/</span>preset<span class="token operator">-</span>env <span class="token operator">-</span>D</code></pre><ul><li>配置babel</li></ul><pre><code>&#123;  test: /\.m?js$/,  exclude: /(node_modules|bower_components)/,  use: &#123;    loader: &#39;babel-loader&#39;,    options: &#123;      presets: [&#39;@babel/preset-env&#39;]    &#125;  &#125;&#125;</code></pre><h1 id="提取css到单独的文件中"><a href="#提取css到单独的文件中" class="headerlink" title="提取css到单独的文件中"></a>提取css到单独的文件中</h1><ul><li>安装插件</li></ul><pre class=" language-js"><code class="language-js">yarn add mini<span class="token operator">-</span>css<span class="token operator">-</span>extract<span class="token operator">-</span>plugin <span class="token operator">-</span>D</code></pre><ul><li>配置插件</li></ul><pre><code>const MiniCssExtractPlugin = require(&#39;mini-css-extract-plugin&#39;);// 配置插件plugins: [  new MiniCssExtractPlugin(&#123;    // 指定生成的css文件名和路径    filename: &#39;./index.css&#39;,  &#125;)],</code></pre><ul><li>配置css和less的loader</li></ul><pre><code>&#123;  test: /\.css$/,  // css-loader只能够让webpack能够处理css文件  // style-loader： 能够把处理好的css代码添加到页面中  // MiniCssExtractPlugin.loader ; 把css提取到单独的css文件中  use: [MiniCssExtractPlugin.loader, &#39;css-loader&#39;]&#125;,&#123;  test: /\.less$/,  use: [MiniCssExtractPlugin.loader, &#39;css-loader&#39;, &#39;less-loader&#39;]&#125;,</code></pre><h1 id="webpack-dev-server的使用"><a href="#webpack-dev-server的使用" class="headerlink" title="webpack-dev-server的使用"></a>webpack-dev-server的使用</h1><blockquote><p>webpack-dev-server不是用来打包的，而是用于启动一个服务器，，，，，当我们代码发生了改变，webpack-dev-server会重新打包（内存）并且会刷新浏览器，实时看到效果</p><p>最新版本的webpack5还不支持，需要降级处理</p></blockquote><pre class=" language-json"><code class="language-json"><span class="token property">"webpack"</span><span class="token operator">:</span> <span class="token string">"^4.43.0"</span><span class="token punctuation">,</span><span class="token property">"webpack-cli"</span><span class="token operator">:</span> <span class="token string">"^3.3.12"</span><span class="token punctuation">,</span><span class="token property">"webpack-dev-server"</span><span class="token operator">:</span> <span class="token string">"^3.11.0"</span></code></pre><ul><li>安装包</li></ul><pre class=" language-bash"><code class="language-bash">yarn add webpack-dev-server -D<span class="token comment" spellcheck="true"># 注意：如果需要使用webpack-dev-server  就不能使用最新的webpack5版本， 应该使用webpack 4</span></code></pre><ul><li>配置一个脚本</li></ul><pre><code>  &quot;scripts&quot;: &#123;    &quot;build&quot;: &quot;webpack --config webpack.config.js&quot;,    &quot;serve&quot;: &quot;webpack-dev-server --config webpack.config.js&quot;  &#125;,</code></pre><ul><li>使用dev脚本</li></ul><pre class=" language-bash"><code class="language-bash">yarn serve</code></pre><ul><li>常见配置</li></ul><pre><code>  // devServer的配置  devServer: &#123;    // 自定义端口    port: 9090,    // 自动打开浏览器    open: true  &#125;</code></pre><h1 id="webpack处理vue文件"><a href="#webpack处理vue文件" class="headerlink" title="webpack处理vue文件"></a>webpack处理vue文件</h1><ul><li>新建了一个<code>App.vue</code>文件</li></ul><pre><code>&lt;template&gt;  &lt;div class=&quot;app&quot;&gt;我是根组件 ---&#123;&#123;msg&#125;&#125;  --&lt;demo&gt;&lt;/demo&gt; &lt;/div&gt;&lt;/template&gt;&lt;script&gt;export default &#123;  data() &#123;    return &#123;      msg: &#39;hello&#39;    &#125;  &#125;,&#125;&lt;/script&gt;&lt;style&gt;.app &#123;  background-color: red;&#125;&lt;/style&gt;</code></pre><ul><li>在main.js中导入<code>App.vue</code>根组件，并且渲染成为根组件</li></ul><pre><code>import Vue from &#39;vue&#39;import App from &#39;./App.vue&#39;const vm = new Vue(&#123;  el: &#39;#app&#39;,  // 把App组件渲染成根组件  render: c =&gt; c(App),  // 把app渲染成为根组件  // render: function(createElement) &#123;  //   return createElement(App)  // &#125;&#125;)</code></pre><ul><li><p>报错，因为webpack处理不了vue文件</p></li><li><p>安装依赖包</p></li></ul><pre class=" language-js"><code class="language-js">yarn add vue<span class="token operator">-</span>loader@<span class="token number">15.9</span><span class="token punctuation">.</span><span class="token number">0</span> vue<span class="token operator">-</span>template<span class="token operator">-</span>compiler <span class="token operator">-</span>D</code></pre><ul><li>在webpack.config.js中配置vue-loader</li></ul><pre><code>const VueLoaderPlugin = require(&#39;vue-loader/lib/plugin&#39;)  plugins: [    new VueLoaderPlugin()  ],    rules: [      &#123;        test: /\.vue$/,        loader: &#39;vue-loader&#39;      &#125;    ]</code></pre><h1 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h1><pre><code>/* webpack的配置 */const path = require(&#39;path&#39;)const HtmlWebpackPlugin = require(&#39;html-webpack-plugin&#39;)const VueLoaderPlugin = require(&#39;vue-loader/lib/plugin&#39;)const MiniCssExtractPlugin = require(&#39;mini-css-extract-plugin&#39;)module.exports = &#123;  // 打包入口  entry: &#39;./src/main.js&#39;,  // 打包出口  output: &#123;    // 配置文件    filename: &#39;app.js&#39;,    // 配置默认的打包出口路径,,,必须是绝对路径    // path: path.join(__dirname, &#39;lib&#39;)  &#125;,  // 打包模式  mode: &#39;development&#39;,  plugins: [    new HtmlWebpackPlugin(&#123;      template: &#39;./public/index.html&#39;    &#125;),    new VueLoaderPlugin(),    new MiniCssExtractPlugin()  ],  module: &#123;    rules: [      // 处理css      &#123;        test: /\.css$/,        use: [MiniCssExtractPlugin.loader, &#39;css-loader&#39;]      &#125;,      &#123;        test: /\.less$/,        use: [MiniCssExtractPlugin.loader, &#39;css-loader&#39;, &#39;less-loader&#39;]      &#125;,      &#123;        test: /\.(png|jpg|gif)$/,        use: &#123;          loader: &#39;url-loader&#39;,          options: &#123;            limit: 20 * 1024          &#125;        &#125;      &#125;,      &#123;        test: /\.m?js$/,        exclude: /(node_modules|bower_components)/,        use: &#123;          loader: &#39;babel-loader&#39;,          options: &#123;            presets: [&#39;@babel/preset-env&#39;]          &#125;        &#125;      &#125;,      &#123;        test: /\.vue$/,        loader: &#39;vue-loader&#39;      &#125;    ]  &#125;,  devServer: &#123;    open: true,    port: 8888  &#125;&#125;</code></pre>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> webpack </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>50道JavaScript基础面试题（附答案）</title>
      <link href="2020/11/08/50-dao-javascript-ji-chu-mian-shi-ti-fu-da-an/"/>
      <url>2020/11/08/50-dao-javascript-ji-chu-mian-shi-ti-fu-da-an/</url>
      
        <content type="html"><![CDATA[<h2 id="50道JavaScript基础面试题（附答案）"><a href="#50道JavaScript基础面试题（附答案）" class="headerlink" title="50道JavaScript基础面试题（附答案）"></a>50道JavaScript基础面试题（附答案）</h2><h3 id="1介绍JavaScript的基本数据类型"><a href="#1介绍JavaScript的基本数据类型" class="headerlink" title="1介绍JavaScript的基本数据类型"></a>1介绍JavaScript的基本数据类型</h3><p>Number、String 、Boolean 、Null、Undefined</p><p>Object是JavaScript中所有对象的父对象</p><p>数据封装类对象:Object、Array、Boolean、Number和String</p><p>其他对象:Function、Arguments、Math、Date、RegExp、Error</p><p>新类型: Symbol</p><h3 id="2-说说写JavaScript的基本规范"><a href="#2-说说写JavaScript的基本规范" class="headerlink" title="2. 说说写JavaScript的基本规范"></a>2. 说说写JavaScript的基本规范</h3><ul><li>不要在同一行声明多个变量</li><li>使用===或!==来比较true/false或者数值</li><li>switch必须带有default分支</li><li>函数应该有返回值</li><li>for if else 必须使用大括号</li><li>语句结束加分号</li><li>命名要有意义，使用驼峰命名法</li></ul><h3 id="3-jQuery使用建议"><a href="#3-jQuery使用建议" class="headerlink" title="3.jQuery使用建议"></a>3.jQuery使用建议</h3><ul><li>尽量减少对dom元素的访问和操作</li><li>尽量避免给dom元素绑定多个相同类型的事件处理函数，可以将多个相同类型事件处理函数合并到一个处理函数，通过数据状态来处理分支</li><li>尽量避免使用toggle事件</li></ul><h3 id="4-Ajax使用"><a href="#4-Ajax使用" class="headerlink" title="4.Ajax使用"></a>4.Ajax使用</h3><p>全称: Asynchronous Javascript And XML</p><p>所谓异步，就是向服务器发送请求的时候，我们不必等待结果，而是可以同时做其他的事情，等到有了结果它自己会根据设定进行后续操作，与此同时，页面是不会发生整页刷新的，提高了用户体验。创建Ajax的过程:</p><ul><li><p>创建XMLHttpRequest对象（异步调用对象）</p><pre><code>var xhr = new XMLHttpRequest();</code></pre></li><li><p>创建新的http请求(方法、URL、是否异步)</p><pre><code>xhr.open(&#39;get&#39;,&#39;example.php&#39;,false);</code></pre></li><li><p>设置响应HTTP请求状态变化的函数</p><p>onreadystatechange事件中readyState属性等于4. 响应的HTTP状态为200(OK)或者304(Not Modified)</p></li><li><p>发送http请求</p><pre><code>xhr.send(data)</code></pre></li><li><p>获取异步调用返回的数据</p><p>注意:</p><ul><li>页面初次加载时，尽量在web服务器一次性输出所有相关的数据，只在页面加载完成之后，用户进行操作时采用ajax进行交互。</li><li>同步ajax在IE上会产生页面假死的问题。所以建议采用异步ajax。</li><li>尽量减少ajax请求次数</li><li>ajax安全问题，对于敏感数据在服务器端处理，避免在客户端处理过滤。对于关键业务逻辑代码也必须放在服务器端处理。</li></ul></li></ul><h3 id="5-JavaScript有几种类型的值-你能画一下他们的内存图吗"><a href="#5-JavaScript有几种类型的值-你能画一下他们的内存图吗" class="headerlink" title="5.JavaScript有几种类型的值?你能画一下他们的内存图吗"></a>5.JavaScript有几种类型的值?你能画一下他们的内存图吗</h3><p>基本数据类型存储在栈中，引用数据类型(对象）存储在堆中，指针放在栈中。<br>两种类型的区别是:存储位置不同;原始数据类型直接存储在栈中的简单数据段，占据空间小、大小固定，属于被频繁使用数据，所以放入栈中存储;引用数据类型存储在堆中的对象,占据空间大、大小不固定,如果存储在栈中，将会影响程序运行的性能<br>引用数据类型在栈中存储了指针，该指针指向堆中该实体的起始地址。当解释器寻找引用值时，会首先检索其在栈中的地址，取得地址后从堆中获得实体。</p><h3 id="6-栈和堆的区别"><a href="#6-栈和堆的区别" class="headerlink" title="6.栈和堆的区别"></a>6.栈和堆的区别</h3><ul><li>栈(stack) :由编译器自动分配释放，存放函数的参数值，局部变量等;</li><li>堆(heap)︰一般由程序员分配释放，若程序员不释放，程序结束时可能由操作系统释放。</li></ul><h3 id="7-Javascript实现继承的几种方式"><a href="#7-Javascript实现继承的几种方式" class="headerlink" title="7.Javascript实现继承的几种方式"></a>7.<strong>Javascript实现继承的几种方式</strong></h3><ul><li><p>借用构造函数法(又叫经典继承)</p><pre><code>function SuperType(name) &#123;    this.name = name;    this.sayName = function() &#123;        window.alert(this.name);    &#125;;&#125;function SubType(name, age) &#123;    SuperType.call(this, name); //在这里借用了父类的构造函数    this.age = age;&#125;</code></pre></li><li><p>对象冒充</p><pre><code>function SuperType(name) &#123;    this.name = name;    this.sayName = function() &#123;        window.alert(this.name);    &#125;;&#125;function SubType(name, age) &#123;    this.supertype = SuperType; //在这里使用了对象冒充    this.supertype(name);    this.age = age;&#125;</code></pre></li><li><p>组合继承(最常用)</p><pre><code>function SuperType(name) &#123;    this.name = name;&#125;SuperType.prototype = &#123;    sayName : function() &#123;        window.alert(this.name);    &#125;&#125;;function SubType(name, age) &#123;    SuperType.call(this, name); //在这里继承属性    this.age = age;&#125;SubType.prototype = new SuperType(); //这里继承方法</code></pre><p>组合继承的方法是对应着我们用‘组合使用构造函数和原型方法’定义父类的一种继承方法。同样的，我们的属性和方法是分开继承的。</p></li></ul><h3 id="8-Javascript创建对象的几种方式？"><a href="#8-Javascript创建对象的几种方式？" class="headerlink" title="8 Javascript创建对象的几种方式？"></a><strong>8 Javascript创建对象的几种方式？</strong></h3><ul><li><p>工厂方法</p><pre><code>function creatPerson(name, age) &#123;    var obj = new Object();    obj.name = name;    obj.age = age;    obj.sayName = function() &#123;        window.alert(this.name);    &#125;;    return obj;&#125;</code></pre></li><li><p>构造函数法</p><pre><code>function Person(name, age) &#123;    this.name = name;    this.age = age;    this.sayName = function() &#123;        window.alert(this.name);    &#125;;&#125;</code></pre></li><li><p>原型方法</p><pre><code>function Person() &#123;&#125;Person.prototype = &#123;    constructor : Person,    name : &quot;Ning&quot;,    age : &quot;23&quot;,    sayName : function() &#123;        window.alert(this.name);    &#125;&#125;;</code></pre></li></ul><h3 id="9-Javascript作用链域"><a href="#9-Javascript作用链域" class="headerlink" title="9 Javascript作用链域"></a>9 Javascript作用链域</h3><p>作用域链的原理和原型链很类似，如果这个变量在自己的作用域中没有，那么它会寻找父级的，直到最顶层。<br>注意：JS没有块级作用域，若要形成块级作用域，可通过（function（）｛｝）（）；立即执行的形式实现。</p><h3 id="10-谈谈this的理解"><a href="#10-谈谈this的理解" class="headerlink" title="10 谈谈this的理解"></a>10 谈谈this的理解</h3><ul><li>this总是指向函数的直接调用者（而非间接调用者）</li><li>如果有new关键字，this指向new出来的那个对象</li><li>在事件中，this指向目标元素，特殊的是IE的attachEvent中的this总是指向全局对象window。</li></ul><h3 id="11-eval是做什么的"><a href="#11-eval是做什么的" class="headerlink" title="11 eval是做什么的"></a>11 eval是做什么的</h3><p>它的功能是把对应的字符串解析成JS代码并运行；应该避免使用eval，不安全，非常耗性能（2次，一次解析成js语句，一次执行）。</p><h3 id="12-什么是window对象-什么是document对象"><a href="#12-什么是window对象-什么是document对象" class="headerlink" title="12 什么是window对象? 什么是document对象"></a>12 什么是window对象? 什么是document对象</h3><p>window对象代表浏览器中打开的一个窗口。document对象代表整个html文档。实际上，document对象是window对象的一个属性。</p><h3 id="13-null，undefined的区别"><a href="#13-null，undefined的区别" class="headerlink" title="13 null，undefined的区别"></a>13 null，undefined的区别</h3><p>null表示一个对象被定义了，但存放了空指针，转换为数值时为0。<br>undefined表示声明的变量未初始化，转换为数值时为NAN。<br>typeof(null) – object;<br>typeof(undefined) – undefined</p><h3 id="14-写一个通用的事件侦听器函数-机试题"><a href="#14-写一个通用的事件侦听器函数-机试题" class="headerlink" title="14 写一个通用的事件侦听器函数(机试题)"></a>14 写一个通用的事件侦听器函数(机试题)</h3><h3 id="15-“1”-“2”-“3”-map-parseInt-答案是多少"><a href="#15-“1”-“2”-“3”-map-parseInt-答案是多少" class="headerlink" title="15 [“1”, “2”, “3”].map(parseInt) 答案是多少"></a>15 [“1”, “2”, “3”].map(parseInt) 答案是多少</h3><p>[1,NaN,NaN]</p><p>解析：<br>Array.prototype.map()<br>array.map(callback[, thisArg])<br>callback函数的执行规则<br>参数：自动传入三个参数<br>currentValue（当前被传递的元素）；<br>index（当前被传递的元素的索引）；<br>array（调用map方法的数组）</p><p>parseInt方法接收两个参数<br>第三个参数[“1”, “2”, “3”]将被忽略。parseInt方法将会通过以下方式被调用<br>parseInt(“1”, 0)<br>parseInt(“2”, 1)<br>parseInt(“3”, 2)</p><p>parseInt的第二个参数radix为0时，ECMAScript5将string作为十进制数字的字符串解析；<br>parseInt的第二个参数radix为1时，解析结果为NaN；<br>parseInt的第二个参数radix在2—36之间时，如果string参数的第一个字符（除空白以外），不属于radix指定进制下的字符，解析结果为NaN。<br>parseInt(“3”, 2)执行时，由于”3”不属于二进制字符，解析结果为NaN。</p><h3 id="16-关于事件，IE与火狐的事件机制有什么区别？-如何阻止冒泡"><a href="#16-关于事件，IE与火狐的事件机制有什么区别？-如何阻止冒泡" class="headerlink" title="16 关于事件，IE与火狐的事件机制有什么区别？ 如何阻止冒泡"></a>16 关于事件，IE与火狐的事件机制有什么区别？ 如何阻止冒泡</h3><p>IE为事件冒泡，Firefox同时支持事件捕获和事件冒泡。但并非所有浏览器都支持事件捕获。jQuery中使用<code>event.stopPropagation()</code>方法可阻止冒泡;（旧IE的方法 <code>ev.cancelBubble = true;</code>）</p><h3 id="17-什么是闭包（closure），为什么要用它"><a href="#17-什么是闭包（closure），为什么要用它" class="headerlink" title="17 什么是闭包（closure），为什么要用它"></a>17 什么是闭包（closure），为什么要用它</h3><p>闭包指的是一个函数可以访问另一个函数作用域中变量。常见的构造方法，是在一个函数内部定义另外一个函数。内部函数可以引用外层的变量；外层变量不会被垃圾回收机制回收。<br>注意，闭包的原理是作用域链，所以闭包访问的上级作用域中的变量是个对象，其值为其运算结束后的最后一个值。<br>优点：避免全局变量污染。缺点：容易造成内存泄漏。<br>例子:</p><pre><code>function makeFunc() &#123;    var name = &quot;Mozilla&quot;;    function displayName() &#123;        console.log(name);    &#125;    return displayName;&#125;var myFunc = makeFunc();myFunc();   //输出Mozilla</code></pre><p>myFunc 变成一个 闭包。闭包是一种特殊的对象。它由两部分构成：函数，以及创建该函数的环境。环境由闭包创建时在作用域中的任何局部变量组成。在我们的例子中，myFunc 是一个闭包，由 displayName 函数和闭包创建时存在的 “Mozilla” 字符串形成。</p><h3 id="18-javascript-代码中的”use-strict”-是什么意思-使用它区别是什么"><a href="#18-javascript-代码中的”use-strict”-是什么意思-使用它区别是什么" class="headerlink" title="18 javascript 代码中的”use strict”;是什么意思 ? 使用它区别是什么"></a>18 javascript 代码中的”use strict”;是什么意思 ? 使用它区别是什么</h3><p>除了正常模式运行外，ECMAscript添加了第二种运行模式：“严格模式”。<br>作用：</p><ul><li>消除js不合理，不严谨地方，减少怪异行为</li><li>消除代码运行的不安全之处，</li><li>提高编译器的效率，增加运行速度</li><li>为未来的js新版本做铺垫。</li></ul><h3 id="19-如何判断一个对象是否属于某个类"><a href="#19-如何判断一个对象是否属于某个类" class="headerlink" title="19 如何判断一个对象是否属于某个类"></a>19 如何判断一个对象是否属于某个类</h3><p>使用instanceof 即if(a instanceof Person){alert(‘yes’);}</p><h3 id="20-new操作符具体干了什么呢"><a href="#20-new操作符具体干了什么呢" class="headerlink" title="20 new操作符具体干了什么呢"></a>20 new操作符具体干了什么呢</h3><ul><li>创建一个空对象，并且 this 变量引用该对象，同时还继承了该函数的原型。</li><li>属性和方法被加入到 this 引用的对象中。</li><li>新创建的对象由 this 所引用，并且最后隐式的返回 this 。</li></ul><h3 id="21-Javascript中，执行时对象查找时，永远不会去查找原型的函数"><a href="#21-Javascript中，执行时对象查找时，永远不会去查找原型的函数" class="headerlink" title="21 Javascript中，执行时对象查找时，永远不会去查找原型的函数"></a>21 Javascript中，执行时对象查找时，永远不会去查找原型的函数</h3><p>Object.hasOwnProperty(proName)：是用来判断一个对象是否有你给出名称的属性。不过需要注意的是，此方法无法检查该对象的原型链中是否具有该属性，该属性必须是对象本身的一个成员。</p><h3 id="22-对JSON的了解"><a href="#22-对JSON的了解" class="headerlink" title="22 对JSON的了解"></a>22 对JSON的了解</h3><p>全称：JavaScript Object Notation<br>JSON中对象通过“{}”来标识，一个“{}”代表一个对象，如{“AreaId”:”123”}，对象的值是键值对的形式（key：value）。JSON是JS的一个严格的子集，一种轻量级的数据交换格式，类似于xml。数据格式简单，易于读写，占用带宽小。<br>两个函数：<br>JSON.parse(str)<br>解析JSON字符串 把JSON字符串变成JavaScript值或对象<br>JSON.stringify(obj)<br>将一个JavaScript值(对象或者数组)转换为一个 JSON字符串<br>eval(‘(‘＋json＋’)’)<br>用eval方法注意加括号 而且这种方式更容易被攻击</p><h3 id="23-JS延迟加载的方式有哪些"><a href="#23-JS延迟加载的方式有哪些" class="headerlink" title="23 JS延迟加载的方式有哪些"></a>23 JS延迟加载的方式有哪些</h3><p>JS的延迟加载有助与提高页面的加载速度。<br>defer和async、动态创建DOM方式（用得最多）、按需异步载入JS<br>defer：延迟脚本。立即下载，但延迟执行（延迟到整个页面都解析完毕后再运行），按照脚本出现的先后顺序执行。<br>async：异步脚本。下载完立即执行，但不保证按照脚本出现的先后顺序执行。</p><h3 id="24-同步和异步的区别"><a href="#24-同步和异步的区别" class="headerlink" title="24 同步和异步的区别"></a>24 同步和异步的区别</h3><p>同步的概念在操作系统中：不同进程协同完成某项工作而先后次序调整（通过阻塞、唤醒等方式），同步强调的是顺序性，谁先谁后。异步不存在顺序性。<br>同步：浏览器访问服务器，用户看到页面刷新，重新发请求，等请求完，页面刷新，新内容出现，用户看到新内容之后进行下一步操作。<br>异步：浏览器访问服务器请求，用户正常操作，浏览器在后端进行请求。等请求完，页面不刷新，新内容也会出现，用户看到新内容。</p><h3 id="25-什么是跨域问题-，如何解决跨域问题"><a href="#25-什么是跨域问题-，如何解决跨域问题" class="headerlink" title="25.什么是跨域问题 ，如何解决跨域问题?"></a>25.<strong>什么是跨域问题 ，如何解决跨域问题?</strong></h3><h4 id="什么是跨域"><a href="#什么是跨域" class="headerlink" title="什么是跨域"></a><strong>什么是跨域</strong></h4><hr><p>要明白什么是跨域之前，首先要明白什么是<strong>同源策略</strong>？</p><p>同源策略就是用来限制从一个源加载的文档或脚本与来自另一个源的资源进行交互。那怎样判断是否是同源呢？</p><p>如果协议，端口（如果指定了）和主机对于两个页面是相同的，则两个页面具有相同的源，也就是同源。也就是说，要同时满足以下3个条件，才能叫同源：</p><ol><li>协议相同</li><li>端口相同</li><li>主机相同</li></ol><p>举个例子就一目了然了：<br>我们来看下面的页面是否与 <code>http://store.company.com/dir/index.html</code> 是同源的？</p><ol><li><code>http://store.company.com/dir/index2.html</code> 同源</li><li><code>http://store.company.com/dir2/index3.html</code> 同源 虽然在不同文件夹下</li><li><code>https://store.company.com/secure.html</code> 不同源 不同的协议(https)</li><li><code>http://store.company.com:81/dir/index.html</code> 不同源 不同的端口(81)</li><li><code>http://news.company.com/dir/other.html</code> 不同源 不同的主机(news)</li></ol><p>所以当面对跨域问题的时候，有什么解决方案呢？</p><h4 id="跨域的几种解决方案"><a href="#跨域的几种解决方案" class="headerlink" title="跨域的几种解决方案"></a>跨域的几种解决方案</h4><hr><h5 id="document-domain方法"><a href="#document-domain方法" class="headerlink" title="document.domain方法"></a><strong>document.domain方法</strong></h5><p>我们来看一个具体场景：有一个页面 <code>http://www.example.com/a.html</code> ，它里面有一个<code>iframe</code>，这个<code>iframe</code>的源是 <code>http://example.com/b.html</code> ，很显然它们是不同源的，所以我们无法在父页面中操控子页面的内容。</p><p>解决方案如下:</p><pre><code>&lt;!-- b.html --&gt;&lt;script&gt;document.domain = &#39;example.com&#39;;&lt;/script&gt;</code></pre><pre><code>&lt;!-- a.html --&gt;&lt;script&gt;document.domain = &#39;example.com&#39;;var iframe = document.getElementById(&#39;iframe&#39;).contentWindow.document;//后面就可以操作iframe里的内容了...&lt;/script&gt;</code></pre><p>所以我们只要将两个页面的document.domain设置成一致就可以了，要注意的是，document.domain的设置是有限制的，我们只能把document.domain设置成自身或更高一级的父域。</p><p>但是，这种方法只能解决主域相同的跨域问题。</p><h5 id="window-name方法"><a href="#window-name方法" class="headerlink" title="window.name方法"></a><strong>window.name方法</strong></h5><p>window对象有个name属性，该属性有个特征：即在一个窗口(window)的生命周期内,窗口载入的所有的页面都是共享一个window.name的，每个页面对window.name都有读写的权限，window.name是持久存在一个窗口载入过的所有页面中的，并不会因新页面的载入而进行重置。</p><p>我们来看一个具体场景，在一个页面 <code>example.com/a.html</code> 中，我们想获取 <code>data.com/data.html</code> 中的数据，以下是解决方案：</p><pre><code>&lt;!-- data.html --&gt;&lt;script&gt;window.name = &#39;data&#39;; //这是就是我们需要通信的数据&lt;/script&gt;</code></pre><pre><code>&lt;!-- a.html --&gt;&lt;html&gt;&lt;head&gt;&lt;script&gt;    function getData () &#123;        var iframe = document.getElementById(&#39;iframe&#39;);        iframe.src = &#39;example.com/b.html&#39;; // 这里让iframe与父页面同源        iframe.onload = function () &#123;            var data = iframe.contentWindow.name; //在这里我们得到了跨域页面中传来的数据        &#125;;    &#125;&lt;/script&gt;&lt;/head&gt;&lt;body&gt;&lt;/body&gt;&lt;/html&gt;</code></pre><h5 id="JSONP方法"><a href="#JSONP方法" class="headerlink" title="JSONP方法"></a><strong>JSONP方法</strong></h5><p>JONSP(JSON with Padding)是JSON的一种使用模式。基本原理如下：</p><pre><code>&lt;!-- a.html --&gt;&lt;script&gt;    function dealData (data) &#123;        console.log(data);    &#125;&lt;/script&gt;&lt;script src=&#39;http://example.com/data.php?callback=dealData&#39;&gt;&lt;/script&gt;</code></pre><pre><code>&lt;?php    $callback = $_GET[&#39;callback&#39;];    $data = &#39;data&#39;;    echo $callback.&#39;(&#39;.json_encode($data).&#39;)&#39;;?&gt;</code></pre><p>这时候在<code>a.html</code>中我们得到了一条js的执行语句<code>dealData(&#39;data&#39;)</code>，从而达到了跨域的目的。</p><p>所以JSONP的原理其实就是利用引入<code>script</code>不限制源的特点，把处理函数名作为参数传入，然后返回执行语句，仔细阅读以上代码就可以明白里面的意思了。</p><p>如果在jQuery中用JSONP的话就更加简单了：</p><pre><code>&lt;script&gt;$.getJSON(&#39;&#39;http://example.com/data.php?callback=?&#39;, function (data) &#123;    console.log(data);&#125;);&lt;/script&gt;</code></pre><p>注意jQuery会自动生成一个全局函数来替换<code>callback=?</code>中的问号，之后获取到数据后又会自动销毁，实际上就是起一个临时代理函数的作用。<code>$.getJSON</code>方法会自动判断是否跨域，不跨域的话，就调用普通的ajax方法；跨域的话，则会以异步加载js文件的形式来调用JSONP的回调函数。</p><h5 id="总结"><a href="#总结" class="headerlink" title="总结"></a><strong>总结</strong></h5><hr><p>除了上述方法外，HTML5还新增了一个<code>window.postMessage()</code>方法，有兴趣的可以自行查阅。</p><h3 id="26-页面编码和被请求的资源编码如果不一致如何处理？"><a href="#26-页面编码和被请求的资源编码如果不一致如何处理？" class="headerlink" title="26 页面编码和被请求的资源编码如果不一致如何处理？"></a><strong>26 页面编码和被请求的资源编码如果不一致如何处理？</strong></h3><p>若请求的资源编码，如外引js文件编码与页面编码不同。可根据外引资源编码方式定义为 charset=”utf-8”或”gbk”。<br>比如：<code>http://www.yyy.com/a.html</code> 中嵌入了一个<code>http://www.xxx.com/test.js</code><br>a.html 的编码是gbk或gb2312的。 而引入的js编码为utf-8的 ，那就需要在引入的时候</p><pre><code>&lt;script src=&quot;http://www.xxx.com/test.js&quot;; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;</code></pre><h3 id="27-模块化开发怎么做"><a href="#27-模块化开发怎么做" class="headerlink" title="27 模块化开发怎么做"></a>27 模块化开发怎么做</h3><p>模块化开发指的是在解决某一个复杂问题或者一系列问题时，依照一种分类的思维把问题进行系统性的分解。模块化是一种将复杂系统分解为代码结构更合理，可维护性更高的可管理的模块方式。对于软件行业：系统被分解为一组高内聚，低耦合的模块。</p><ol><li>定义封装的模块</li><li>定义新模块对其他模块的依赖</li><li>可对其他模块的引入支持。在JavaScript中出现了一些非传统模块开发方式的规范。 CommonJS的模块规范，AMD（Asynchronous Module Definition），CMD（Common Module Definition）等。AMD是异步模块定义，所有的模块将被异步加载，模块加载不影响后边语句运行。</li></ol><h3 id="28-AMD（Modules-Asynchronous-Definition）、CMD（Common-Module-Definition）规范区别"><a href="#28-AMD（Modules-Asynchronous-Definition）、CMD（Common-Module-Definition）规范区别" class="headerlink" title="28 AMD（Modules/Asynchronous-Definition）、CMD（Common Module Definition）规范区别"></a>28 AMD（Modules/Asynchronous-Definition）、CMD（Common Module Definition）规范区别</h3><p>AMD 是 RequireJS 在推广过程中对模块定义的规范化产出。CMD 是 SeaJS 在推广过程中对模块定义的规范化产出。<br>区别：</p><ol><li>对于依赖的模块，AMD 是提前执行，CMD 是延迟执行。不过 RequireJS 从 2.0 开始，也改成可以延迟执行（根据写法不同，处理方式不同）。</li><li>CMD 推崇依赖就近，AMD 推崇依赖前置。</li><li>AMD 的 API 默认是一个当多个用，CMD 的 API 严格区分，推崇职责单一。</li></ol><pre><code>// CMDdefine(function(require, exports, module) &#123;    var a = require(&#39;./a&#39;)    a.doSomething()    // 此处略去 100 行    var b = require(&#39;./b&#39;) // 依赖可以就近书写    b.doSomething()&#125;)// AMD 默认推荐define([&#39;./a&#39;, &#39;./b&#39;], function(a, b) &#123; // 依赖必须一开始就写好    a.doSomething();    // 此处略去 100 行    b.doSomething();&#125;)</code></pre><h3 id="29-requireJS的核心原理是什么？（如何动态加载的？如何避免多次加载的？如何缓存的？）"><a href="#29-requireJS的核心原理是什么？（如何动态加载的？如何避免多次加载的？如何缓存的？）" class="headerlink" title="29 requireJS的核心原理是什么？（如何动态加载的？如何避免多次加载的？如何缓存的？）"></a><strong>29 requireJS的核心原理是什么？（如何动态加载的？如何避免多次加载的？如何缓存的？）</strong></h3><p>核心是js的加载模块，通过正则匹配模块以及模块的依赖关系，保证文件加载的先后顺序，根据文件的路径对加载过的文件做了缓存。</p><h3 id="30-call和apply"><a href="#30-call和apply" class="headerlink" title="30 call和apply"></a><strong>30 call和apply</strong></h3><p>call（）方法和apply（）方法的作用相同，动态改变某个类的某个方法的运行环境。他们的区别在于接收参数的方式不同。在使用call（）方法时，传递给函数的参数必须逐个列举出来。使用apply（）时，传递给函数的是参数数组。</p><h3 id="31-谈一谈你对ECMAScript6的了解"><a href="#31-谈一谈你对ECMAScript6的了解" class="headerlink" title="31 谈一谈你对ECMAScript6的了解"></a><strong>31 谈一谈你对ECMAScript6的了解</strong></h3><h3 id="32-documen-write和-innerHTML的区别"><a href="#32-documen-write和-innerHTML的区别" class="headerlink" title="32 documen.write和 innerHTML的区别"></a><strong>32 documen.write和 innerHTML的区别</strong></h3><p>document.write()只能重绘整个页面</p><pre><code>setTimeout(function()&#123;       document.write(&#39;&lt;p&gt;5 secs later&lt;/p&gt;&#39;);&#125;, 5000);</code></pre><p>或</p><pre><code>window.onload = function() &#123; document.write(&quot;HI&quot;);</code></pre><p>innerHTML可以重绘页面的一部分</p><h3 id="33-回流与重绘"><a href="#33-回流与重绘" class="headerlink" title="33 回流与重绘"></a>33 回流与重绘</h3><p>当渲染树中的一部分(或全部)因为元素的规模尺寸，布局，隐藏等改变而需要重新构建。这就称为回流(reflow)。每个页面至少需要一次回流，就是在页面第一次加载的时候。在回流的时候，浏览器会使渲染树中受到影响的部分失效，并重新构造这部分渲染树。完成回流后，浏览器会重新绘制受影响的部分到屏幕中，该过程成为重绘</p><h3 id="34-DOM操作"><a href="#34-DOM操作" class="headerlink" title="34 DOM操作"></a>34 DOM操作</h3><ol><li>创建新节点<br>createDocumentFragment() //创建一个DOM片段<br>createElement() //创建一个具体的元素<br>createTextNode() //创建一个文本节点</li><li>添加、移除、替换、插入<br>appendChild()<br>removeChild()<br>replaceChild()<br>insertBefore() //在已有的子节点前插入一个新的子节点</li><li>查找<br>getElementsByTagName() //通过标签名称<br>getElementsByName() //通过元素的Name属性的值(IE容错能力较强，会得到一个数组，其中包括id等于name值的)<br>getElementById() //通过元素Id，唯一性</li></ol><h3 id="35-数组对象有哪些原生方法，列举一下"><a href="#35-数组对象有哪些原生方法，列举一下" class="headerlink" title="35 数组对象有哪些原生方法，列举一下"></a>35 数组对象有哪些原生方法，列举一下</h3><p>pop、push、shift、unshift、splice、reverse、sort、concat、join、slice、toString、indexOf、lastIndexOf、reduce、reduceRight<br>forEach、map、filter、every、some</p><h3 id="36-那些操作会造成内存泄漏"><a href="#36-那些操作会造成内存泄漏" class="headerlink" title="36 那些操作会造成内存泄漏"></a>36 那些操作会造成内存泄漏</h3><p>全局变量、闭包、DOM清空或删除时，事件未清除、子元素存在引用</p><h3 id="37-什么是Cookie-隔离？（或者：请求资源的时候不要带cookie怎么做）"><a href="#37-什么是Cookie-隔离？（或者：请求资源的时候不要带cookie怎么做）" class="headerlink" title="37 什么是Cookie 隔离？（或者：请求资源的时候不要带cookie怎么做）"></a>37 什么是Cookie 隔离？（或者：请求资源的时候不要带cookie怎么做）</h3><p>通过使用多个非主要域名来请求静态文件，如果静态文件都放在主域名下，那静态文件请求的时候带有的cookie的数据提交给server是非常浪费的，还不如隔离开。因为cookie有域的限制，因此不能跨域提交请求，故使用非主要域名的时候，请求头中就不会带有cookie数据，这样可以降低请求头的大小，降低请求时间，从而达到降低整体请求延时的目的。同时这种方式不会将cookie传入server，也减少了server对cookie的处理分析环节，提高了server的http请求的解析速度。</p><h3 id="38-响应事件"><a href="#38-响应事件" class="headerlink" title="38 响应事件"></a>38 响应事件</h3><p>onclick鼠标点击某个对象；onfocus获取焦点；onblur失去焦点；onmousedown鼠标被按下</p><h3 id="39-flash和js通过什么类如何交互"><a href="#39-flash和js通过什么类如何交互" class="headerlink" title="39 flash和js通过什么类如何交互"></a>39 flash和js通过什么类如何交互</h3><p>Flash提供了ExternalInterface接口与JavaScript通信，ExternalInterface有两个方法，call和addCallback，call的作用是让Flash调用js里的方法，addCallback是用来注册flash函数让js调用。</p><h3 id="40-Flash与Ajax各自的优缺点"><a href="#40-Flash与Ajax各自的优缺点" class="headerlink" title="40 Flash与Ajax各自的优缺点"></a>40 Flash与Ajax各自的优缺点</h3><p>Flash：适合处理多媒体、矢量图形、访问机器。但对css、处理文本不足，不容易被搜索。<br>Ajax：对css、文本支持很好，但对多媒体、矢量图形、访问机器不足。</p><h3 id="41-有效的javascript变量定义规则"><a href="#41-有效的javascript变量定义规则" class="headerlink" title="41 有效的javascript变量定义规则"></a>41 有效的javascript变量定义规则</h3><p>第一个字符必须是一个字母、下划线（_）或一个美元符号（$）；其他字符可以是字母、下划线、美元符号或数字。</p><h3 id="42-XML与JSON的区别"><a href="#42-XML与JSON的区别" class="headerlink" title="42 XML与JSON的区别"></a>42 XML与JSON的区别</h3><ol><li>数据体积方面。JSON相对于XML来讲，数据的体积小，传递的速度更快些。</li><li>数据交互方面。JSON与JavaScript的交互更加方便，更容易解析处理，更好的数据交互。</li><li>数据描述方面。JSON对数据的描述性比XML较差。</li><li>传输速度方面。JSON的速度要远远快于XML。</li></ol><h3 id="43-HTML与XML的区别"><a href="#43-HTML与XML的区别" class="headerlink" title="43 HTML与XML的区别"></a>43 HTML与XML的区别</h3><ol><li>XML用来传输和存储数据，HTML用来显示数据；</li><li>XML使用的标签不用预先定义</li><li>XML标签必须成对出现</li><li>XML对大小写敏感</li><li>XML中空格不会被删减</li><li>XML中所有特殊符号必须用编码表示</li><li>XML中的图片必须有文字说明</li></ol><h3 id="44-渐进增强与优雅降级"><a href="#44-渐进增强与优雅降级" class="headerlink" title="44 渐进增强与优雅降级"></a>44 渐进增强与优雅降级</h3><p>渐进增强：针对低版本浏览器进行构建页面，保证最基本的功能，然后再针对高级浏览器进行效果、交互等改进，达到更好的用户体验。<br>优雅降级：一开始就构建完整的功能，然后再针对低版本浏览器进行兼容。</p><h3 id="45-Web-Worker和Web-Socket"><a href="#45-Web-Worker和Web-Socket" class="headerlink" title="45 Web Worker和Web Socket"></a>45 Web Worker和Web Socket</h3><p>web socket：在一个单独的持久连接上提供全双工、双向的通信。使用自定义的协议（ws://、wss://），同源策略对web socket不适用。<br>web worker：运行在后台的JavaScript，不影响页面的性能。<br>创建worker：var worker = new Worker(url);<br>向worker发送数据：worker.postMessage(data);<br>接收worker返回的数据：worker.onmessage<br>终止一个worker的执行：worker.terminate();</p><h3 id="46-JS垃圾回收机制"><a href="#46-JS垃圾回收机制" class="headerlink" title="46 JS垃圾回收机制"></a>46 JS垃圾回收机制</h3><ol><li><p>标记清除：<br>这个算法把“对象是否不再需要”简化定义为“对象是否可以获得”。<br>这个算法假定设置一个叫做根（root）的对象（在Javascript里，根是全局对象）。定期的，垃圾回收器将从根开始，找所有从根开始引用的对象，然后找这些对象引用的对象。从根开始，垃圾回收器将找到所有可以获得的对象和所有不能获得的对象。</p></li><li><p>引用计数：<br>这是最简单的垃圾收集算法。此算法把“对象是否不再需要”简化定义为“对象有没有其他对象引用到它”。如果没有引用指向该对象（零引用），对象将被垃圾回收机制回收。<br>该算法有个限制：无法处理循环引用。两个对象被创建，并互相引用，形成了一个循环。它们被调用之后不会离开函数作用域，所以它们已经没有用了，可以被回收了。然而，引用计数算法考虑到它们互相都有至少一次引用，所以它们不会被回收。</p></li></ol><h3 id="47-web应用从服务器主动推送data到客户端的方式"><a href="#47-web应用从服务器主动推送data到客户端的方式" class="headerlink" title="47 web应用从服务器主动推送data到客户端的方式"></a>47 web应用从服务器主动推送data到客户端的方式</h3><p>JavaScript数据推送：commet（基于http长连接的服务器推送技术）。<br>基于web socket的推送：SSE（server-send Event）</p><h3 id="48-如何删除一个cookie？"><a href="#48-如何删除一个cookie？" class="headerlink" title="48 如何删除一个cookie？"></a><strong>48 如何删除一个cookie？</strong></h3><ol><li>将cookie的失效时间设置为过去的时间（expires）</li></ol><pre><code>document.cookie = ‘user=’+ encodeURIComponent(‘name’) + &#39;;expires=’+ new Date(0);</code></pre><ol start="2"><li>将系统时间设置为当前时间往前一点时间</li></ol><pre><code>var data = new Date();date.setDate(date.getDate()-1);</code></pre><h3 id="49-attribute与property的区别？"><a href="#49-attribute与property的区别？" class="headerlink" title="49 attribute与property的区别？"></a><strong>49 attribute与property的区别？</strong></h3><p>attribute是dom元素在文档中作为html标签拥有的属性<br>property是dom元素在js中作为对象拥有的属性。<br>所以，对于html的标准属性来说，attribute和property是同步的，是会自动更新的。但对于自定义属性，他们不同步。</p><h3 id="50-Ajax请求的页面历史记录状态问题？"><a href="#50-Ajax请求的页面历史记录状态问题？" class="headerlink" title="50 Ajax请求的页面历史记录状态问题？"></a><strong>50 Ajax请求的页面历史记录状态问题？</strong></h3><ol><li>通过location.hash记录状态，让浏览器记录Ajax请求时页面状态的变化。</li><li>通过HTML5的history.pushstate，来实现浏览器地址栏的无刷新改变。</li></ol>]]></content>
      
      
      <categories>
          
          <category> 面试题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面试题 </tag>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue中实现token验证</title>
      <link href="2020/11/07/vue-zhong-shi-xian-token-yan-zheng/"/>
      <url>2020/11/07/vue-zhong-shi-xian-token-yan-zheng/</url>
      
        <content type="html"><![CDATA[<h2 id="Vue中实现token验证"><a href="#Vue中实现token验证" class="headerlink" title="Vue中实现token验证"></a>Vue中实现token验证</h2><h3 id="前后端流程分析"><a href="#前后端流程分析" class="headerlink" title="前后端流程分析"></a>前后端流程分析</h3><ol><li>前端页面进行登录操作，将用户名和密码发给服务器</li><li>服务器进行校验，通过后生成token，包含信息有密匙、uid、过期时间等，然后返回给前端</li><li>前端将token保存在本地（建议在localStorage中）和state（vuex）中，下次对服务器请求时带上，然后返回给前端</li><li>服务器端对接收到的token进行校验。通过则进行相应的增删改查操作，并将数据返回给前端；未通过则返回错误码，提示错误信息，然后跳转到登录页</li></ol><h3 id="具体实现"><a href="#具体实现" class="headerlink" title="具体实现"></a>具体实现</h3><p>技术栈：vuex + axios + localStorage + vue-router</p><ul><li><p>登录路由添加自定义meta字段，来记录该页面是否需要身份验证</p><pre class=" language-vue"><code class="language-vue">// router.js&#123;    path: "/index",    name: "index",    component: resolve => require(['./index.vue'], resolve),    meta: &#123;        requiresAuth: true    &#125;&#125;</code></pre></li><li><p>设置路由拦截</p><pre class=" language-vue"><code class="language-vue">router.beforeEach((to, from, next) => &#123;    //  matched的数组中包含$route对象的检查元字段    //  arr.some() 表示判断该数组是否有元素符合相应的条件, 返回布尔值    if (to.matched.some(record => record.meta.requiresAuth)) &#123;        // 判断当前是否有登录的权限        if (!auth.loggedIn()) &#123;            next(&#123;                path: '/login',                query: &#123; redirect: to.fullPath &#125;            &#125;)        &#125; else &#123;            next()        &#125;    &#125; else &#123;        next() // 确保一定要调用 next()    &#125;&#125;)</code></pre></li><li><p>设置请求/响应拦截<br>在后面的所有请求中都将携带token进行。<br>利用axios中的请求拦截器, 通过配置http response inteceptor, 当后端接口返回401 (未授权), 让用户重新执行登录操作。</p><pre class=" language-vue"><code class="language-vue">// http request 拦截器axios.interceptors.request.use(    config => &#123;        if (store.state.token) &#123;  // 判断是否存在token，如果存在的话，则每个http header都加上token            config.headers.Authorization = `token $&#123;store.state.token&#125;`;        &#125;        return config;    &#125;,    err => &#123;        return Promise.reject(err);    &#125;);// http response 拦截器axios.interceptors.response.use(    response => &#123;        return response;    &#125;,    error => &#123;        if (error.response) &#123;            switch (error.response.status) &#123;                case 401:                    // 返回 401 清除token信息并跳转到登录页面                    store.commit(types.LOGOUT);                    router.replace(&#123;                        path: 'login',                        query: &#123;redirect: router.currentRoute.fullPath&#125;                    &#125;)            &#125;        &#125;        return Promise.reject(error.response.data)   // 返回接口返回的错误信息&#125;);</code></pre></li><li><p>登录页面:</p><pre class=" language-vue"><code class="language-vue">//login.vuemethods: &#123;  login()&#123;      if (this.token) &#123;          // 存储在本地的localStograge中，可以使用cookies/local/sessionStograge          this.$store.commit(types.LOGIN, this.token)          // 跳转至其他页面          let redirect = decodeURIComponent(this.$route.query.redirect || '/');          this.$router.push(&#123;              path: redirect          &#125;)      &#125;  &#125;&#125;</code></pre></li><li><p>vuex设置</p><pre class=" language-vue"><code class="language-vue">import Vuex from 'vuex';import Vue from 'vue';import * as types from './types'Vue.use(Vuex);export default new Vuex.Store(&#123;    state: &#123;        user: &#123;&#125;,        token: null,        title: ''    &#125;,    mutations: &#123;        // 登录成功将, token保存在localStorage中        [types.LOGIN]: (state, data) => &#123;            localStorage.token = data;            state.token = data;        &#125;,        // 退出登录将, token清空        [types.LOGOUT]: (state) => &#123;            localStorage.removeItem('token');            state.token = null        &#125;    &#125;&#125;);</code></pre></li></ul><p>三者的区别:</p><ul><li>sessionStorage 不能跨页面共享的，关闭窗口即被清除</li><li>localStorage 可以同域共享，并且是持久化存储的</li><li>在 local / session storage 的 tokens，就不能从不同的域名中读取,甚至是子域名也不行.<br>解决办法使用Cookie.demo: 假设当用户通过 app.yourdomain.com 上面的验证时你生成一个 token 并且作为一个 cookie 保存到 .yourdomain.com,然后，在 youromdain.com 中你可以检查这个 cookie 是不是已经存在了，并且如果存在的话就转到 app.youromdain.com去。这个 token 将会对程序的子域名以及之后通常的流程都有效（直到这个 token 超过有效期） 只是利用cookie的特性进行存储而非验证.</li></ul>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2020前端面试题系列--Vue面试题</title>
      <link href="2020/11/07/2020-qian-duan-mian-shi-ti-xi-lie-vue-mian-shi-ti/"/>
      <url>2020/11/07/2020-qian-duan-mian-shi-ti-xi-lie-vue-mian-shi-ti/</url>
      
        <content type="html"><![CDATA[<h2 id="2020前端面试系列——Vue面试题"><a href="#2020前端面试系列——Vue面试题" class="headerlink" title="2020前端面试系列——Vue面试题"></a>2020前端面试系列——Vue面试题</h2><h3 id="Vue双向绑定原理"><a href="#Vue双向绑定原理" class="headerlink" title="Vue双向绑定原理"></a>Vue双向绑定原理</h3><p>mvvm 双向绑定，采用<strong>数据劫持结合发布者-订阅者模式</strong>的方式，通过 <code>Object.defineProperty()</code> 来劫持各个属性的 setter、getter，在数据变动时发布消息给订阅者，触发相应的监听回调。</p><p><img src="https://img2018.cnblogs.com/blog/1062623/201908/1062623-20190804115239165-1926232443.png" alt="MVVM"><br><a href="https://img2018.cnblogs.com/blog/1062623/201908/1062623-20190804115239165-1926232443.png">图片链接</a></p><ul><li>几个要点</li></ul><ol><li>实现一个数据监听器 Observer，能够对数据对象的所有属性进行监听，如有变动可拿到最新值并通知订阅者</li><li>实现一个指令解析器 Compile，对每个元素节点的指令进行扫描和解析，根据指令模板替换数据，以及绑定相应的更新函数</li><li>实现一个 Watcher，作为连接 Observer 和 Compile 的桥梁，能够订阅并收到每个属性变动的通知，执行指令绑定的相应回调函数，从而更新视图</li><li>mvvm 入口函数，整合以上三者</li></ol><ul><li>具体步骤</li></ul><ol><li><p>需要 observe 的数据对象进行递归遍历，包括子属性对象的属性，都加上 setter 和 getter<br>这样的话，给这个对象的某个值赋值，就会触发 setter，那么就能监听到了数据变化</p></li><li><p>compile 解析模板指令，将模板中的变量替换成数据，然后初始化渲染页面视图，并将每个指令对应的节点绑定更新函数，添加监听数据的订阅者，一旦数据有变动，收到通知，更新视图</p></li><li><p>Watcher 订阅者是 Observer 和 Compile 之间通信的桥梁，主要做的事情是:</p><ul><li><p>在自身实例化时往属性订阅器(dep)里面添加自己</p></li><li><p>自身必须有一个 update() 方法</p></li><li><p>待属性变动 dep.notice() 通知时，能调用自身的 update() 方法，并触发 Compile 中绑定的回调，则功成身退。</p></li></ul></li><li><p>MVVM 作为数据绑定的入口，整合 Observer、Compile 和 Watcher 三者，通过Observer来监听自己的 model 数据变化，通过 Compile 来解析编译模板指令，最终利用 Watcher 搭起 Observer 和 Compile 之间的通信桥梁，达到数据变化 -&gt; 视图更新；视图交互变化(input) -&gt; 数据 model 变更的双向绑定效果。</p></li></ol><h3 id="描述下-vue-从初始化页面–修改数据–刷新页面-UI-的过程"><a href="#描述下-vue-从初始化页面–修改数据–刷新页面-UI-的过程" class="headerlink" title="描述下 vue 从初始化页面–修改数据–刷新页面 UI 的过程"></a>描述下 vue 从初始化页面–修改数据–刷新页面 UI 的过程</h3><pre><code> 当 Vue 进入初始化阶段时，一方面 Vue 会遍历 data 中的属性，并用 Object.defineProperty 将它转化成 getter/setter 的形式，实现数据劫持(暂不谈 Vue3.0 的 Proxy)；另一方面，Vue 的指令编译器 Compiler 对元素节点的各个指令进行解析，初始化视图，并订阅 Watcher 来更新试图，此时 Watcher 会将自己添加到消息订阅器 Dep 中，此时初始化完毕。  当数据发生变化时，触发 Observer 中 setter 方法，立即调用 Dep.notify(),Dep 这个数组开始遍历所有的订阅者，并调用其 update 方法，Vue 内部再通过 diff 算法，patch 相应的更新完成对订阅者视图的改变。</code></pre><h3 id="你是如何理解-Vue-的响应式系统的"><a href="#你是如何理解-Vue-的响应式系统的" class="headerlink" title="你是如何理解 Vue 的响应式系统的"></a>你是如何理解 Vue 的响应式系统的</h3><p><img src="https://img2018.cnblogs.com/blog/1062623/201908/1062623-20190808112924933-354933996.jpg" alt="响应式"><br><a href="https://img2018.cnblogs.com/blog/1062623/201908/1062623-20190808112924933-354933996.jpg">图片链接</a></p><p>响应式系统简述:</p><ul><li>任何一个 Vue Component 都有一个与之对应的 Watcher 实例</li><li>Vue 的 data 上的属性会被添加 getter 和 setter 属性</li><li>当 Vue Component render 函数被执行的时候, data 上会被 触碰(touch), 即被读, getter 方法会被调用, 此时 Vue 会去记录此 Vue component 所依赖的所有 data。(这一过程被称为依赖收集)</li><li>data 被改动时（主要是用户操作）, 即被写, setter 方法会被调用, 此时 Vue 会去通知所有依赖于此 data 的组件去调用他们的 render 函数进行更新</li></ul><h3 id="虚拟DOM实现原理"><a href="#虚拟DOM实现原理" class="headerlink" title="虚拟DOM实现原理"></a>虚拟DOM实现原理</h3><ul><li>虚拟DOM本质上是JavaScript对象,是对真实DOM的抽象</li><li>状态变更时，记录新树和旧树的差异</li><li>最后把差异更新到真正的dom中</li></ul><blockquote><p>详细实现见<a href="https://user-gold-cdn.xitu.io/2019/8/1/16c49afec13e0416">面试官: 你对虚拟DOM原理的理解?</a></p></blockquote><h3 id="既然-Vue-通过数据劫持可以精准探测数据变化-为什么还需要虚拟-DOM-进行-diff-检测差异"><a href="#既然-Vue-通过数据劫持可以精准探测数据变化-为什么还需要虚拟-DOM-进行-diff-检测差异" class="headerlink" title="既然 Vue 通过数据劫持可以精准探测数据变化,为什么还需要虚拟 DOM 进行 diff 检测差异"></a>既然 Vue 通过数据劫持可以精准探测数据变化,为什么还需要虚拟 DOM 进行 diff 检测差异</h3><pre><code> 考点: Vue 的变化侦测原理 前置知识: 依赖收集、虚拟 DOM、响应式系统 现代前端框架有两种方式侦测变化，一种是pull，一种是push pull: 其代表为React，我们可以回忆一下React是如何侦测到变化的,我们通常会用setStateAPI显式更新，然后React会进行一层层的Virtual Dom Diff操作找出差异，然后Patch到DOM上，React从一开始就不知道到底是哪发生了变化，只是知道「有变化了」，然后再进行比较暴力的Diff操作查找「哪发生变化了」，另外一个代表就是Angular的脏检查操作。 push: Vue的响应式系统则是push的代表，当Vue程序初始化的时候就会对数据data进行依赖的收集，一但数据发生变化,响应式系统就会立刻得知。因此Vue是一开始就知道是「在哪发生变化了」，但是这又会产生一个问题，如果你熟悉Vue的响应式系统就知道，通常一个绑定一个数据就需要一个Watcher，一但我们的绑定细粒度过高就会产生大量的Watcher，这会带来内存以及依赖追踪的开销，而细粒度过低会无法精准侦测变化,因此Vue的设计是选择中等细粒度的方案,在组件级别进行push侦测的方式,也就是那套响应式系统,通常我们会第一时间侦测到发生变化的组件,然后在组件内部进行Virtual Dom Diff获取更加具体的差异，而Virtual Dom Diff则是pull操作，Vue是push+pull结合的方式进行变化侦测的。</code></pre><p><a href="https://blog.csdn.net/csdn_haow/article/details/89915908">Vue和React的视图更新机制对比</a></p><h3 id="Vue中key值的作用"><a href="#Vue中key值的作用" class="headerlink" title="Vue中key值的作用"></a>Vue中key值的作用</h3><p> 当Vue.js 用 v-for 正在更新已渲染过的元素列表时，它默认用“就地复用”策略。如果数据项的顺序被改变，Vue 将不会移动 DOM 元素来匹配数据项的顺序， 而是简单复用此处每个元素，并且确保它在特定索引下显示已被渲染过的每个元素。<strong>key 的作用主要是为了高效的更新虚拟DOM。</strong></p><h3 id="Vue-的生命周期"><a href="#Vue-的生命周期" class="headerlink" title="Vue 的生命周期"></a>Vue 的生命周期</h3><p><a href="https://juejin.im/post/6844903780736040973">vue生命周期详解</a></p><ol><li><code>beforeCreate</code>和<code>created</code></li><li><code>beforeMount</code>和<code>mounted</code></li><li><code>beforeUpdate</code>和<code>updated</code></li><li><code>beforeDestory</code>和<code>destoryed</code></li><li><code>activated和</code>和<code>deactivated</code></li></ol><h3 id="Vue-组件间通信有哪些方式"><a href="#Vue-组件间通信有哪些方式" class="headerlink" title="Vue 组件间通信有哪些方式"></a>Vue 组件间通信有哪些方式</h3><p><a href="https://www.cnblogs.com/fundebug/p/10884896.html">Vue 组件间通信六种方式</a></p><ol><li>props/$emit</li><li>$emit/$on</li><li>vuex</li><li>$attrs/$listeners</li><li>provide/inject</li><li>$parent/$children 与 ref</li></ol><h3 id="watch、methods-和-computed-的区别"><a href="#watch、methods-和-computed-的区别" class="headerlink" title="watch、methods 和 computed 的区别"></a>watch、methods 和 computed 的区别</h3><ul><li><p>watch 为了监听某个响应数据的变化。computed 是自动监听依赖值的变化，从而动态返回内容，主要目的是简化模板内的复杂运算。所以区别来源于用法，只是需要动态值，那就用 computed ；需要知道值的改变后执行业务逻辑，才用 watch。</p></li><li><p>methods是一个方法，它可以接受参数，而computed 不能，computed 是可以缓存的，methods 不会。computed 可以依赖其他 computed，甚至是其他组件的 data。</p></li></ul><h3 id="vue-中怎么重置-data"><a href="#vue-中怎么重置-data" class="headerlink" title="vue 中怎么重置 data"></a>vue 中怎么重置 data</h3><p>使用Object.assign()，vm.$data可以获取当前状态下的data，vm.$options.data(this)可以获取到组件初始化状态下的data。</p><pre class=" language-js"><code class="language-js">Object<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>$data<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>$options<span class="token punctuation">.</span><span class="token function">data</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// 注意加this，不然取不到data() &amp;#123; a: this.methodA &amp;#125; 中的this.methodA。</span></code></pre><blockquote><p>原因参考 <a href="https://blog.csdn.net/mocoe/article/details/89682022">Vue中的this.$options.data()和this.$data</a></p></blockquote><h3 id="组件中写-name-选项有什么作用"><a href="#组件中写-name-选项有什么作用" class="headerlink" title="组件中写 name 选项有什么作用"></a>组件中写 name 选项有什么作用</h3><ol><li>项目使用 keep-alive 时，可搭配组件 name 进行缓存过滤</li><li>DOM 做递归组件时需要调用自身 name</li><li>vue-devtools 调试工具里显示的组见名称是由vue中组件name决定的</li></ol><h3 id="vue-router-有哪些钩子函数"><a href="#vue-router-有哪些钩子函数" class="headerlink" title="vue-router 有哪些钩子函数"></a>vue-router 有哪些钩子函数</h3><p>官方文档: <a href="https://router.vuejs.org/zh/guide/advanced/navigation-guards.html#%E5%85%A8%E5%B1%80%E5%89%8D%E7%BD%AE%E5%AE%88%E5%8D%AB">vue-router钩子函数</a></p><ul><li>全局前置守卫 <code>router.beforeEach</code></li><li>全局解析守卫 <code>router.beforeResolve</code></li><li>全局后置钩子 <code>router.afterEach</code></li><li>路由独享的守卫 <code>beforeEnter</code></li><li>组件内的守卫 <code>beforeRouteEnter</code>、<code>beforeRouteUpdate</code>、<code>beforeRouteLeave</code></li></ul><p><a href="https://juejin.im/post/6844903615283363848">前端路由简介以及vue-router实现原理</a></p><h3 id="route-和-router-的区别是什么"><a href="#route-和-router-的区别是什么" class="headerlink" title="route 和 router 的区别是什么"></a>route 和 router 的区别是什么</h3><p><code>route</code>是“路由信息对象”，包括<code>path</code>,<code>params</code>,<code>hash</code>,<code>query</code>,<code>fullPath</code>,<code>matched</code>,<code>name</code>等路由信息参数。<br><code>router</code>是“路由实例对象”，包括了路由的跳转方法(<code>push</code>、<code>replace</code>)，钩子函数等。</p><h3 id="说一下-Vue-和-React-的认识，做一个简单的对比"><a href="#说一下-Vue-和-React-的认识，做一个简单的对比" class="headerlink" title="说一下 Vue 和 React 的认识，做一个简单的对比"></a>说一下 Vue 和 React 的认识，做一个简单的对比</h3><p><strong>1.监听数据变化的实现原理不同</strong></p><ul><li><p>Vue 通过 getter/setter 以及一些函数的劫持，能精确快速的计算出 Virtual DOM 的差异。这是由于它在渲染过程中，会跟踪每一个组件的依赖关系，不需要重新渲染整个组件树。</p></li><li><p>React 默认是通过比较引用的方式进行的，如果不优化，每当应用的状态被改变时，全部子组件都会重新渲染，可能导致大量不必要的 VDOM 的重新渲染。<br>   Vue 不需要特别的优化就能达到很好的性能，而对于 React 而言，需要通过 PureComponent/shouldComponentUpdate 这个生命周期方法来进行控制。如果你的应用中，交互复杂，需要处理大量的 UI 变化，那么使用 Virtual DOM 是一个好主意。如果你更新元素并不频繁，那么 Virtual DOM 并不一定适用，性能很可能还不如直接操控 DOM。</p><p>   为什么 React 不精确监听数据变化呢？这是因为 Vue 和 React 设计理念上的区别，Vue 使用的是可变数据，而 React 更强调数据的不可变。</p></li></ul><p><strong>2.数据流的不同</strong></p><p><img src="https://img-blog.csdnimg.cn/20190601094122147.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1Rva2tpXw==,size_16,color_FFFFFF,t_70" alt="vue版本比较"></p><ul><li><p>Vue 中默认支持双向绑定，组件与 DOM 之间可以通过 v-model 双向绑定。但是，父子组件之间，props 在 2.x 版本是单向数据流</p></li><li><p>React 一直提倡的是单向数据流，他称之为 onChange/setState()模式。</p></li></ul><p>不过由于我们一般都会用 Vuex 以及 Redux 等单向数据流的状态管理框架，因此很多时候我们感受不到这一点的区别了。</p><p><strong>3.模板渲染方式的不同</strong></p><ul><li><p>在表层上，模板的语法不同</p><ul><li><p>React 是通过 JSX 渲染模板</p></li><li><p>而 Vue 是通过一种拓展的 HTML 语法进行渲染</p></li></ul></li><li><p>在深层上，模板的原理不同，这才是他们的本质区别：</p><ul><li>React 是在组件 JS 代码中，通过原生 JS 实现模板中的常见语法，比如插值，条件，循环等，都是通过 JS 语法实现的</li><li>Vue 是在和组件 JS 代码分离的单独的模板中，通过指令来实现的，比如条件语句就需要 v-if 来实现</li></ul></li></ul><p>对这一点，我个人比较喜欢 React 的做法，因为他更加纯粹更加原生，而 Vue 的做法显得有些独特，会把 HTML 弄得很乱。举个例子，说明 React 的好处：react 中 render 函数是支持闭包特性的，所以我们 import 的组件在 render 中可以直接调用。但是在 Vue 中，由于模板中使用的数据都必须挂在 this 上进行一次中转，所以我们 import 一个组件完了之后，还需要在 components 中再声明下，这样显然是很奇怪但又不得不这样的做法。</p><h3 id="Vue-的-nextTick-的原理是什么"><a href="#Vue-的-nextTick-的原理是什么" class="headerlink" title="Vue 的 nextTick 的原理是什么"></a>Vue 的 nextTick 的原理是什么</h3><p><strong>1. 为什么需要 nextTick</strong></p><p>Vue 是异步修改 DOM 的并且不鼓励开发者直接接触 DOM，但有时候业务需要必须对数据更改–刷新后的 DOM 做相应的处理，这时候就可以使用 Vue.nextTick(callback)这个 api 了。</p><p><strong>2. 理解原理前的准备</strong></p><p>   首先需要知道事件循环中宏任务和微任务这两个概念(这其实也是面试常考点)。请阅大佬文章–<a href="https://juejin.im/post/6844903802185711629">彻底搞懂浏览器Event-loop</a></p><p>常见的宏任务有 script, setTimeout, setInterval, setImmediate, I/O, UI rendering<br>常见的微任务有 process.nextTick(Nodejs),Promise.then(), MutationObserver;</p><p><strong>3. 理解 nextTick</strong></p><p>而 nextTick 的原理正是 vue 通过异步队列控制 DOM 更新和 nextTick 回调函数先后执行的方式。如果大家看过这部分的源码，会发现其中做了很多 isNative()的判断，因为这里还存在兼容性优雅降级的问题。可见 Vue 开发团队的深思熟虑，对性能的良苦用心。</p><p>如果你比较了解了前面的事件循环原理，推荐你看看这篇文章 请阅大佬文章–<a href="https://mp.weixin.qq.com/s/mCcW4OYj3p3471ghMBylBw">全面解析 Vue.nextTick 实现原理</a></p><h3 id="Vuex-有哪几种属性"><a href="#Vuex-有哪几种属性" class="headerlink" title="Vuex 有哪几种属性"></a>Vuex 有哪几种属性</h3><p>有五种，分别是 <code>State</code>、<code>Getter</code>、<code>Mutation</code>、<code>Action</code>、<code>Module</code></p><h3 id="vue-首屏加载优化"><a href="#vue-首屏加载优化" class="headerlink" title="vue 首屏加载优化"></a>vue 首屏加载优化</h3><p><strong>1. 把不常改变的库放到 index.html 中，通过 cdn 引入</strong></p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>https://cdn.bootcss.com/font-awesome/4.7.0/css/font-awesome.css<span class="token punctuation">"</span></span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>https://cdn.bootcss.com/element-ui/2.4.0/theme-chalk/index.css<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Loading .. <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- built files will be auto injected --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>https://cdn.bootcss.com/vue/2.5.16/vue.min.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>https://cdn.bootcss.com/vue-router/3.0.1/vue-router.min. js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>https://cdn.bootcss.com/element-ui/2.4.0/index. js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span></code></pre><p>然后找到 build/webpack.base.conf.js 文件，在 module.exports = { } 中添加以下代码</p><pre class=" language-js"><code class="language-js">externals<span class="token punctuation">:</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token string">'vue'</span><span class="token punctuation">:</span> <span class="token string">'Vue'</span><span class="token punctuation">,</span>  <span class="token string">'vue-router'</span><span class="token punctuation">:</span> <span class="token string">'VueRouter'</span><span class="token punctuation">,</span>  <span class="token string">'element-ui'</span><span class="token punctuation">:</span> <span class="token string">'ELEMENT'</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span></code></pre><p>这样 webpack 就不会把 vue.js, vue-router, element-ui 库打包了。声明一下，我把 main.js 中对 element 的引入删掉了，不然我发现打包后的 app.css 还是会把 element 的 css 打包进去，删掉后就没了。<br>然后你打包就会发现 vendor 文件小了很多~</p><p><strong>2. vue 路由的懒加载</strong><br><code>import</code>或者<code>require</code>懒加载。你打包就会发现，多了很多 1.xxxxx.js；2.xxxxx.js 等等，而 vendor.xxx.js 没了，剩下 app.js 和 manifest.js，而且 app.js 还很小，我这里是 100k 多一点。</p><p><strong>3. 不生成 map 文件</strong><br>找到 config/index.js，修改为 <code>productionSourceMap: false</code></p><p><strong>4. vue 组件尽量不要全局引入</strong></p><p><strong>5. 使用更轻量级的工具库</strong></p><p><strong>6. 开启gzip压缩</strong><br>这个优化是两方面的，前端将文件打包成.gz文件，然后通过nginx的配置，让浏览器直接解析.gz文件。</p><p><strong>7. 首页单独做服务端渲染</strong><br>如果首页真的有瓶颈，可以考虑用 node 单独做服务端渲染，而下面的子页面仍用 spa 单页的方式交互。<br>这里不推荐直接用 nuxt.js 服务端渲染方案，因为这样一来增加了学习成本，二来服务端的维护成本也会上升，有时在本机测试没问题，在服务端跑就有问题，为了省心，还是最大限度的使用静态页面较好。</p><p>参考链接<br><a href="https://www.jianshu.com/p/df198914331b">vue首屏加载优化</a><br><a href="https://www.cnblogs.com/mianbaodaxia/p/10751453.html">vue项目首屏加载优化实战</a></p><h3 id="Vue-3-0-有没有过了解"><a href="#Vue-3-0-有没有过了解" class="headerlink" title="Vue 3.0 有没有过了解"></a>Vue 3.0 有没有过了解</h3><p>关于Vue 3.0有幸看过尤大的关于3.0版本的<a href="https://zhuanlan.zhihu.com/p/68477600">RFC Vue Function-based API RFC</a>。大致说了三个点，第一个是关于提出的新API <code>setup()</code>函数，第二个说了对于Typescript的支持，最后说了关于替换<code>Object.defineProperty</code>为 Proxy 的支持。</p><p>详细说了下关于Proxy代替带来的性能上的提升，因为传统的原型链拦截的方法，无法检测对象及数组的一些更新操作，但使用Proxy又带来了浏览器兼容问题。</p><h3 id="vue-cli-替我们做了哪些工作"><a href="#vue-cli-替我们做了哪些工作" class="headerlink" title="vue-cli 替我们做了哪些工作"></a>vue-cli 替我们做了哪些工作</h3><p>首先需要知道 vue-cli 是什么？它是基于 Vue.js 进行快速开发的完整系统，也可以理解成是很多 npm 包的集合。其次，vue-cli 完成的功能有哪些？</p><blockquote><p>.vue 文件 –&gt; .js 文件<br>ES6 语法 –&gt; ES5 语法<br>Sass,Less,Stylus –&gt; CSS<br>对 jpg,png,font 等静态资源的处理<br>热更新<br>定义环境变量，区分 dev 和 production 模式<br>…</p></blockquote><p>如果开发者需要补充或修改默认设置，需要在 package.json 同级下新建一个 vue.config.js 文件</p>]]></content>
      
      
      <categories>
          
          <category> 面试题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面试题 </tag>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>20道JS原理题助你面试一臂之力</title>
      <link href="2020/11/06/20-dao-js-yuan-li-ti-zhu-ni-mian-shi-yi-bi-zhi-li/"/>
      <url>2020/11/06/20-dao-js-yuan-li-ti-zhu-ni-mian-shi-yi-bi-zhi-li/</url>
      
        <content type="html"><![CDATA[<h2 id="20道JS原理题助你面试一臂之力"><a href="#20道JS原理题助你面试一臂之力" class="headerlink" title="20道JS原理题助你面试一臂之力"></a>20道JS原理题助你面试一臂之力</h2><h3 id="1-实现一个call函数"><a href="#1-实现一个call函数" class="headerlink" title="1. 实现一个call函数"></a>1. 实现一个call函数</h3><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 思路：将要改变this指向的方法挂到目标this上执行并返回</span>Function<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>mycall <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>context<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> <span class="token keyword">this</span> <span class="token operator">!==</span> <span class="token string">'function'</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">TypeError</span><span class="token punctuation">(</span><span class="token string">'not funciton'</span><span class="token punctuation">)</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>  context <span class="token operator">=</span> context <span class="token operator">||</span> window  context<span class="token punctuation">.</span>fn <span class="token operator">=</span> <span class="token keyword">this</span>  <span class="token keyword">let</span> arg <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">...</span>arguments<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>  <span class="token keyword">let</span> result <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">fn</span><span class="token punctuation">(</span><span class="token operator">...</span>arg<span class="token punctuation">)</span>  <span class="token keyword">delete</span> context<span class="token punctuation">.</span>fn  <span class="token keyword">return</span> result<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h3 id="2-实现一个apply函数"><a href="#2-实现一个apply函数" class="headerlink" title="2.实现一个apply函数"></a>2.实现一个apply函数</h3><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 思路：将要改变this指向的方法挂到目标this上执行并返回</span>Function<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>myapply <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>context<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> <span class="token keyword">this</span> <span class="token operator">!==</span> <span class="token string">'function'</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">TypeError</span><span class="token punctuation">(</span><span class="token string">'not funciton'</span><span class="token punctuation">)</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>  context <span class="token operator">=</span> context <span class="token operator">||</span> window  context<span class="token punctuation">.</span>fn <span class="token operator">=</span> <span class="token keyword">this</span>  <span class="token keyword">let</span> result  <span class="token keyword">if</span> <span class="token punctuation">(</span>arguments<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    result <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">fn</span><span class="token punctuation">(</span><span class="token operator">...</span>arguments<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">else</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    result <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>  <span class="token keyword">delete</span> context<span class="token punctuation">.</span>fn  <span class="token keyword">return</span> result<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h3 id="3-实现一个bind函数"><a href="#3-实现一个bind函数" class="headerlink" title="3.实现一个bind函数"></a>3.实现一个bind函数</h3><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 思路：类似call，但返回的是函数</span>Function<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>mybind <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>context<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> <span class="token keyword">this</span> <span class="token operator">!==</span> <span class="token string">'function'</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">TypeError</span><span class="token punctuation">(</span><span class="token string">'Error'</span><span class="token punctuation">)</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>  <span class="token keyword">let</span> _this <span class="token operator">=</span> <span class="token keyword">this</span>  <span class="token keyword">let</span> arg <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">...</span>arguments<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>  <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token function">F</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 处理函数使用new的情况</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token keyword">instanceof</span> <span class="token class-name">F</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">_this</span><span class="token punctuation">(</span><span class="token operator">...</span>arg<span class="token punctuation">,</span> <span class="token operator">...</span>arguments<span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">else</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> _this<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> arg<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span><span class="token operator">...</span>arguments<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h3 id="4-instanceof的原理"><a href="#4-instanceof的原理" class="headerlink" title="4. instanceof的原理"></a>4. instanceof的原理</h3><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 思路：右边变量的原型存在于左边变量的原型链上</span><span class="token keyword">function</span> <span class="token function">instanceOf</span><span class="token punctuation">(</span>left<span class="token punctuation">,</span> right<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token keyword">let</span> leftValue <span class="token operator">=</span> left<span class="token punctuation">.</span>__proto__  <span class="token keyword">let</span> rightValue <span class="token operator">=</span> right<span class="token punctuation">.</span>prototype  <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>leftValue <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> <span class="token boolean">false</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>leftValue <span class="token operator">===</span> rightValue<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> <span class="token boolean">true</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    leftValue <span class="token operator">=</span> leftValue<span class="token punctuation">.</span>__proto__  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h3 id="5-Object-create的基本实现原理"><a href="#5-Object-create的基本实现原理" class="headerlink" title="5. Object.create的基本实现原理"></a>5. Object.create的基本实现原理</h3><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 思路：将传入的对象作为原型</span><span class="token keyword">function</span> <span class="token function">create</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token keyword">function</span> <span class="token function">F</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>  F<span class="token punctuation">.</span>prototype <span class="token operator">=</span> obj  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">F</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h3 id="6-new本质"><a href="#6-new本质" class="headerlink" title="6. new本质"></a>6. new本质</h3><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> myNew <span class="token punctuation">(</span>fun<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 创建一个新对象且将其隐式原型指向构造函数原型</span>    <span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      __proto__ <span class="token punctuation">:</span> fun<span class="token punctuation">.</span>prototype    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 执行构造函数</span>    fun<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> <span class="token operator">...</span>arguments<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// 返回该对象</span>    <span class="token keyword">return</span> obj  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">person</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> age<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name  <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token function">myNew</span><span class="token punctuation">(</span>person<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token string">'chen'</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// &amp;#123;name: "chen", age: 18&amp;#125;</span></code></pre><h3 id="7-实现一个基本的Promise"><a href="#7-实现一个基本的Promise" class="headerlink" title="7. 实现一个基本的Promise"></a>7. 实现一个基本的Promise</h3><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 未添加异步处理等其他边界情况</span><span class="token comment" spellcheck="true">// ①自动执行函数，②三个状态，③then</span><span class="token keyword">class</span> <span class="token class-name">Promise</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  constructor <span class="token punctuation">(</span>fn<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 三个状态</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">=</span> <span class="token string">'pending'</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>value <span class="token operator">=</span> undefined    <span class="token keyword">this</span><span class="token punctuation">.</span>reason <span class="token operator">=</span> undefined    <span class="token keyword">let</span> resolve <span class="token operator">=</span> value <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">===</span> <span class="token string">'pending'</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">=</span> <span class="token string">'fulfilled'</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>value <span class="token operator">=</span> value      <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> reject <span class="token operator">=</span> value <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">===</span> <span class="token string">'pending'</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">=</span> <span class="token string">'rejected'</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>reason <span class="token operator">=</span> value      <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 自动执行函数</span>    <span class="token keyword">try</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      <span class="token function">fn</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">e</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      <span class="token function">reject</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// then</span>  <span class="token function">then</span><span class="token punctuation">(</span>onFulfilled<span class="token punctuation">,</span> onRejected<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">switch</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      <span class="token keyword">case</span> <span class="token string">'fulfilled'</span><span class="token punctuation">:</span>        <span class="token function">onFulfilled</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">break</span>      <span class="token keyword">case</span> <span class="token string">'rejected'</span><span class="token punctuation">:</span>        <span class="token function">onRejected</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">break</span>      <span class="token keyword">default</span><span class="token punctuation">:</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h3 id="8-实现浅拷贝"><a href="#8-实现浅拷贝" class="headerlink" title="8. 实现浅拷贝"></a>8. 实现浅拷贝</h3><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 1. ...实现</span><span class="token keyword">let</span> copy1 <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token operator">...</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>x<span class="token punctuation">:</span><span class="token number">1</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 2. Object.assign实现</span><span class="token keyword">let</span> copy2 <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>x<span class="token punctuation">:</span><span class="token number">1</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span></code></pre><h3 id="9-实现一个基本的深拷贝"><a href="#9-实现一个基本的深拷贝" class="headerlink" title="9. 实现一个基本的深拷贝"></a>9. 实现一个基本的深拷贝</h3><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 1. JOSN.stringify()/JSON.parse()</span><span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>a<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> b<span class="token punctuation">:</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>x<span class="token punctuation">:</span> <span class="token number">3</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>JSON<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>JSON<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 2. 递归拷贝</span><span class="token keyword">function</span> <span class="token function">deepClone</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token keyword">let</span> copy <span class="token operator">=</span> obj <span class="token keyword">instanceof</span> <span class="token class-name">Array</span> <span class="token operator">?</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">:</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token keyword">in</span> obj<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>obj<span class="token punctuation">.</span><span class="token function">hasOwnProperty</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      copy<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">typeof</span> obj<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token string">'object'</span> <span class="token operator">?</span> <span class="token function">deepClone</span><span class="token punctuation">(</span>obj<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">:</span> obj<span class="token punctuation">[</span>i<span class="token punctuation">]</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> copy<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h3 id="10-使用setTimeout模拟setInterval"><a href="#10-使用setTimeout模拟setInterval" class="headerlink" title="10.使用setTimeout模拟setInterval"></a>10.<strong>使用setTimeout模拟setInterval</strong></h3><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 可避免setInterval因执行时间导致的间隔执行时间不一致</span>setTimeout <span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// do something</span>  setTimeout <span class="token punctuation">(</span>arguments<span class="token punctuation">.</span>callee<span class="token punctuation">,</span> <span class="token number">500</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span> <span class="token number">500</span><span class="token punctuation">)</span></code></pre><h3 id="11-js实现一个继承方法-借用构造函数继承实例属性"><a href="#11-js实现一个继承方法-借用构造函数继承实例属性" class="headerlink" title="11.js实现一个继承方法//借用构造函数继承实例属性"></a>11.js实现一个继承方法//借用构造函数继承实例属性</h3><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 借用构造函数继承实例属性</span><span class="token keyword">function</span> Child <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  Parent<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 寄生继承原型属性</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token keyword">let</span> Super <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>  Super<span class="token punctuation">.</span>prototype <span class="token operator">=</span> Parent<span class="token punctuation">.</span>prototype  Child<span class="token punctuation">.</span>prototype <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h3 id="12-实现一个基本的Event-Bus"><a href="#12-实现一个基本的Event-Bus" class="headerlink" title="12. 实现一个基本的Event Bus"></a>12. 实现一个基本的Event Bus</h3><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 组件通信，一个触发与监听的过程</span><span class="token keyword">class</span> <span class="token class-name">EventEmitter</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  constructor <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 存储事件</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>events <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>events <span class="token operator">||</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 监听事件</span>  addListener <span class="token punctuation">(</span>type<span class="token punctuation">,</span> fn<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>events<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span>type<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>events<span class="token punctuation">.</span><span class="token keyword">set</span><span class="token punctuation">(</span>type<span class="token punctuation">,</span> fn<span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 触发事件</span>  emit <span class="token punctuation">(</span>type<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> handle <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>events<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span>type<span class="token punctuation">)</span>    handle<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token operator">...</span>arguments<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 测试</span><span class="token keyword">let</span> emitter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">EventEmitter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 监听事件</span>emitter<span class="token punctuation">.</span><span class="token function">addListener</span><span class="token punctuation">(</span><span class="token string">'ages'</span><span class="token punctuation">,</span> age <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>age<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 触发事件</span>emitter<span class="token punctuation">.</span><span class="token function">emit</span><span class="token punctuation">(</span><span class="token string">'ages'</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// 18</span></code></pre><h3 id="13-实现一个双向数据绑定"><a href="#13-实现一个双向数据绑定" class="headerlink" title="13.实现一个双向数据绑定"></a>13.实现一个双向数据绑定</h3><pre class=" language-js"><code class="language-js"><span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">let</span> input <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'input'</span><span class="token punctuation">)</span><span class="token keyword">let</span> span <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'span'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 数据劫持</span>Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> <span class="token string">'text'</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  configurable<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>  enumerable<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>  <span class="token keyword">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'获取数据了'</span><span class="token punctuation">)</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span>  <span class="token keyword">set</span><span class="token punctuation">(</span>newVal<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'数据更新了'</span><span class="token punctuation">)</span>    input<span class="token punctuation">.</span>value <span class="token operator">=</span> newVal    span<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> newVal  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 输入监听</span>input<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'keyup'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  obj<span class="token punctuation">.</span>text <span class="token operator">=</span> e<span class="token punctuation">.</span>target<span class="token punctuation">.</span>value<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span></code></pre><blockquote><p>完整实现可前往之前写的：这应该是最详细的响应式系统讲解了</p><p><a href="https://juejin.im/post/5d26e368e51d4577407b1dd7">https://juejin.im/post/5d26e368e51d4577407b1dd7</a></p></blockquote><h3 id="14-实现一个简单路由"><a href="#14-实现一个简单路由" class="headerlink" title="14.实现一个简单路由"></a>14.实现一个简单路由</h3><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// hash路由</span><span class="token keyword">class</span> <span class="token class-name">Route</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 路由存储对象</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>routes <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 当前hash</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>currentHash <span class="token operator">=</span> <span class="token string">''</span>    <span class="token comment" spellcheck="true">// 绑定this，避免监听时this指向改变</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>freshRoute <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>freshRoute<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// 监听</span>    window<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'load'</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>freshRoute<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span>    window<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'hashchange'</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>freshRoute<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 存储</span>  storeRoute <span class="token punctuation">(</span>path<span class="token punctuation">,</span> cb<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>routes<span class="token punctuation">[</span>path<span class="token punctuation">]</span> <span class="token operator">=</span> cb <span class="token operator">||</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 更新</span>  freshRoute <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>currentHash <span class="token operator">=</span> location<span class="token punctuation">.</span>hash<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token string">'/'</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>routes<span class="token punctuation">[</span><span class="token keyword">this</span><span class="token punctuation">.</span>currentHash<span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h3 id="15-实现懒加载"><a href="#15-实现懒加载" class="headerlink" title="15.实现懒加载"></a>15.实现懒加载</h3><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>./imgs/default.png<span class="token punctuation">"</span></span> <span class="token attr-name">data</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>./imgs/1.png<span class="token punctuation">"</span></span> <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>./imgs/default.png<span class="token punctuation">"</span></span> <span class="token attr-name">data</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>./imgs/2.png<span class="token punctuation">"</span></span> <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>./imgs/default.png<span class="token punctuation">"</span></span> <span class="token attr-name">data</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>./imgs/3.png<span class="token punctuation">"</span></span> <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>./imgs/default.png<span class="token punctuation">"</span></span> <span class="token attr-name">data</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>./imgs/4.png<span class="token punctuation">"</span></span> <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>./imgs/default.png<span class="token punctuation">"</span></span> <span class="token attr-name">data</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>./imgs/5.png<span class="token punctuation">"</span></span> <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>./imgs/default.png<span class="token punctuation">"</span></span> <span class="token attr-name">data</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>./imgs/6.png<span class="token punctuation">"</span></span> <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>./imgs/default.png<span class="token punctuation">"</span></span> <span class="token attr-name">data</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>./imgs/7.png<span class="token punctuation">"</span></span> <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>./imgs/default.png<span class="token punctuation">"</span></span> <span class="token attr-name">data</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>./imgs/8.png<span class="token punctuation">"</span></span> <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>./imgs/default.png<span class="token punctuation">"</span></span> <span class="token attr-name">data</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>./imgs/9.png<span class="token punctuation">"</span></span> <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>./imgs/default.png<span class="token punctuation">"</span></span> <span class="token attr-name">data</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>./imgs/10.png<span class="token punctuation">"</span></span> <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span></code></pre><pre class=" language-js"><code class="language-js"><span class="token keyword">let</span> imgs <span class="token operator">=</span>  document<span class="token punctuation">.</span><span class="token function">querySelectorAll</span><span class="token punctuation">(</span><span class="token string">'img'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 可视区高度</span><span class="token keyword">let</span> clientHeight <span class="token operator">=</span> window<span class="token punctuation">.</span>innerHeight <span class="token operator">||</span> document<span class="token punctuation">.</span>documentElement<span class="token punctuation">.</span>clientHeight <span class="token operator">||</span> document<span class="token punctuation">.</span>body<span class="token punctuation">.</span>clientHeight<span class="token keyword">function</span> lazyLoad <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 滚动卷去的高度</span>  <span class="token keyword">let</span> scrollTop <span class="token operator">=</span> window<span class="token punctuation">.</span>pageYOffset <span class="token operator">||</span> document<span class="token punctuation">.</span>documentElement<span class="token punctuation">.</span>scrollTop <span class="token operator">||</span> document<span class="token punctuation">.</span>body<span class="token punctuation">.</span>scrollTop  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> imgs<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i <span class="token operator">++</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 图片在可视区冒出的高度</span>    <span class="token keyword">let</span> x <span class="token operator">=</span> clientHeight <span class="token operator">+</span> scrollTop <span class="token operator">-</span> imgs<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>offsetTop    <span class="token comment" spellcheck="true">// 图片在可视区内</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>x <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> x <span class="token operator">&lt;</span> clientHeight<span class="token operator">+</span>imgs<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>height<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      imgs<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>src <span class="token operator">=</span> imgs<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span><span class="token string">'data'</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// addEventListener('scroll', lazyLoad) or setInterval(lazyLoad, 1000)</span></code></pre><h3 id="16-rem实现原理"><a href="#16-rem实现原理" class="headerlink" title="16.rem实现原理"></a>16.rem实现原理</h3><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 原始配置</span><span class="token keyword">function</span> setRem <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token keyword">let</span> doc <span class="token operator">=</span> document<span class="token punctuation">.</span>documentElement  <span class="token keyword">let</span> width <span class="token operator">=</span> doc<span class="token punctuation">.</span><span class="token function">getBoundingClientRect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>width  <span class="token keyword">let</span> rem <span class="token operator">=</span> width <span class="token operator">/</span> <span class="token number">75</span>  doc<span class="token punctuation">.</span>style<span class="token punctuation">.</span>fontSize <span class="token operator">=</span> rem <span class="token operator">+</span> <span class="token string">'px'</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 监听窗口变化</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">"resize"</span><span class="token punctuation">,</span> setRem<span class="token punctuation">)</span></code></pre><h3 id="17-手写实现AJAX"><a href="#17-手写实现AJAX" class="headerlink" title="17. 手写实现AJAX"></a>17. 手写实现AJAX</h3><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 1. 简单流程</span><span class="token comment" spellcheck="true">// 实例化</span><span class="token keyword">let</span> xhr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XMLHttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 初始化</span>xhr<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span>method<span class="token punctuation">,</span> url<span class="token punctuation">,</span> <span class="token keyword">async</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 发送请求</span>xhr<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 设置状态变化回调处理请求结果</span>xhr<span class="token punctuation">.</span>onreadystatechange <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>readyStatus <span class="token operator">===</span> <span class="token number">4</span> <span class="token operator">&amp;&amp;</span> xhr<span class="token punctuation">.</span>status <span class="token operator">===</span> <span class="token number">200</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>responseText<span class="token punctuation">)</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 2. 基于promise实现</span><span class="token keyword">function</span> ajax <span class="token punctuation">(</span>options<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 请求地址</span>  <span class="token keyword">const</span> url <span class="token operator">=</span> options<span class="token punctuation">.</span>url  <span class="token comment" spellcheck="true">// 请求方法</span>  <span class="token keyword">const</span> method <span class="token operator">=</span> options<span class="token punctuation">.</span>method<span class="token punctuation">.</span><span class="token function">toLocaleLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token string">'get'</span>  <span class="token comment" spellcheck="true">// 默认为异步true</span>  <span class="token keyword">const</span> <span class="token keyword">async</span> <span class="token operator">=</span> options<span class="token punctuation">.</span><span class="token keyword">async</span>  <span class="token comment" spellcheck="true">// 请求参数</span>  <span class="token keyword">const</span> data <span class="token operator">=</span> options<span class="token punctuation">.</span>data  <span class="token comment" spellcheck="true">// 实例化</span>  <span class="token keyword">const</span> xhr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XMLHttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// 请求超时</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>options<span class="token punctuation">.</span>timeout <span class="token operator">&amp;&amp;</span> options<span class="token punctuation">.</span>timeout <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    xhr<span class="token punctuation">.</span>timeout <span class="token operator">=</span> options<span class="token punctuation">.</span>timeout  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 返回一个Promise实例</span>  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    xhr<span class="token punctuation">.</span>ontimeout <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> reject <span class="token operator">&amp;&amp;</span> <span class="token function">reject</span><span class="token punctuation">(</span><span class="token string">'请求超时'</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// 监听状态变化回调</span>    xhr<span class="token punctuation">.</span>onreadystatechange <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>readyState <span class="token operator">==</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 200-300 之间表示请求成功，304资源未变，取缓存</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>status <span class="token operator">>=</span> <span class="token number">200</span> <span class="token operator">&amp;&amp;</span> xhr<span class="token punctuation">.</span>status <span class="token operator">&lt;</span> <span class="token number">300</span> <span class="token operator">||</span> xhr<span class="token punctuation">.</span>status <span class="token operator">==</span> <span class="token number">304</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>          resolve <span class="token operator">&amp;&amp;</span> <span class="token function">resolve</span><span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>responseText<span class="token punctuation">)</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">else</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>          reject <span class="token operator">&amp;&amp;</span> <span class="token function">reject</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>      <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 错误回调</span>    xhr<span class="token punctuation">.</span>onerror <span class="token operator">=</span> err <span class="token operator">=</span><span class="token operator">></span> reject <span class="token operator">&amp;&amp;</span> <span class="token function">reject</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>    <span class="token keyword">let</span> paramArr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">let</span> encodeData    <span class="token comment" spellcheck="true">// 处理请求参数</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>data <span class="token keyword">instanceof</span> <span class="token class-name">Object</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> key <span class="token keyword">in</span> data<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 参数拼接需要通过 encodeURIComponent 进行编码</span>        paramArr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token function">encodeURIComponent</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'='</span> <span class="token operator">+</span> <span class="token function">encodeURIComponent</span><span class="token punctuation">(</span>data<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>      <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>      encodeData <span class="token operator">=</span> paramArr<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">'&amp;'</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// get请求拼接参数</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>method <span class="token operator">===</span> <span class="token string">'get'</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// 检测url中是否已存在 ? 及其位置</span>      <span class="token keyword">const</span> index <span class="token operator">=</span> url<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">'?'</span><span class="token punctuation">)</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">===</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> url <span class="token operator">+</span><span class="token operator">=</span> <span class="token string">'?'</span>      <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">!==</span> url<span class="token punctuation">.</span>length <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> url <span class="token operator">+</span><span class="token operator">=</span> <span class="token string">'&amp;'</span>      <span class="token comment" spellcheck="true">// 拼接url</span>      url <span class="token operator">+</span><span class="token operator">=</span> encodeData    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 初始化</span>    xhr<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span>method<span class="token punctuation">,</span> url<span class="token punctuation">,</span> <span class="token keyword">async</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// 发送请求</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>method <span class="token operator">===</span> <span class="token string">'get'</span><span class="token punctuation">)</span> xhr<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span>    <span class="token keyword">else</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// post 方式需要设置请求头</span>      xhr<span class="token punctuation">.</span><span class="token function">setRequestHeader</span><span class="token punctuation">(</span><span class="token string">'Content-Type'</span><span class="token punctuation">,</span><span class="token string">'application/x-www-form-urlencoded;charset=UTF-8'</span><span class="token punctuation">)</span>      xhr<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>encodeData<span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h3 id="18-实现拖拽"><a href="#18-实现拖拽" class="headerlink" title="18.实现拖拽"></a>18.实现拖拽</h3><pre class=" language-js"><code class="language-js">window<span class="token punctuation">.</span>onload <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// drag处于绝对定位状态</span>  <span class="token keyword">let</span> drag <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'box'</span><span class="token punctuation">)</span>  drag<span class="token punctuation">.</span>onmousedown <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> e <span class="token operator">=</span> e <span class="token operator">||</span> window<span class="token punctuation">.</span>event    <span class="token comment" spellcheck="true">// 鼠标与拖拽元素边界的距离 = 鼠标与可视区边界的距离 - 拖拽元素与边界的距离</span>    <span class="token keyword">let</span> diffX <span class="token operator">=</span> e<span class="token punctuation">.</span>clientX <span class="token operator">-</span> drag<span class="token punctuation">.</span>offsetLeft    <span class="token keyword">let</span> diffY <span class="token operator">=</span> e<span class="token punctuation">.</span>clientY <span class="token operator">-</span> drag<span class="token punctuation">.</span>offsetTop    drag<span class="token punctuation">.</span>onmousemove <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// 拖拽元素移动的距离 = 鼠标与可视区边界的距离 - 鼠标与拖拽元素边界的距离</span>      <span class="token keyword">let</span> left <span class="token operator">=</span> e<span class="token punctuation">.</span>clientX <span class="token operator">-</span> diffX      <span class="token keyword">let</span> top <span class="token operator">=</span> e<span class="token punctuation">.</span>clientY <span class="token operator">-</span> diffY      <span class="token comment" spellcheck="true">// 避免拖拽出可视区</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>left <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        left <span class="token operator">=</span> <span class="token number">0</span>      <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>left <span class="token operator">></span> window<span class="token punctuation">.</span>innerWidth <span class="token operator">-</span> drag<span class="token punctuation">.</span>offsetWidth<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        left <span class="token operator">=</span> window<span class="token punctuation">.</span>innerWidth <span class="token operator">-</span> drag<span class="token punctuation">.</span>offsetWidth      <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>top <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        top <span class="token operator">=</span> <span class="token number">0</span>      <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>top <span class="token operator">></span> window<span class="token punctuation">.</span>innerHeight <span class="token operator">-</span> drag<span class="token punctuation">.</span>offsetHeight<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        top <span class="token operator">=</span> window<span class="token punctuation">.</span>innerHeight <span class="token operator">-</span> drag<span class="token punctuation">.</span>offsetHeight      <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>      drag<span class="token punctuation">.</span>style<span class="token punctuation">.</span>left <span class="token operator">=</span> left <span class="token operator">+</span> <span class="token string">'px'</span>      drag<span class="token punctuation">.</span>style<span class="token punctuation">.</span>top <span class="token operator">=</span> top <span class="token operator">+</span> <span class="token string">'px'</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    drag<span class="token punctuation">.</span>onmouseup <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>onmousemove <span class="token operator">=</span> <span class="token keyword">null</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>onmouseup <span class="token operator">=</span> <span class="token keyword">null</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h3 id="19-实现一个节流函数"><a href="#19-实现一个节流函数" class="headerlink" title="19. 实现一个节流函数"></a>19. 实现一个节流函数</h3><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 思路：在规定时间内只触发一次</span><span class="token keyword">function</span> throttle <span class="token punctuation">(</span>fn<span class="token punctuation">,</span> delay<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 利用闭包保存时间</span>  <span class="token keyword">let</span> prev <span class="token operator">=</span> Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> context <span class="token operator">=</span> <span class="token keyword">this</span>    <span class="token keyword">let</span> arg <span class="token operator">=</span> arguments    <span class="token keyword">let</span> now <span class="token operator">=</span> Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>now <span class="token operator">-</span> prev <span class="token operator">>=</span> delay<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      fn<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> arg<span class="token punctuation">)</span>      prev <span class="token operator">=</span> Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">function</span> fn <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'节流'</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'scroll'</span><span class="token punctuation">,</span> <span class="token function">throttle</span><span class="token punctuation">(</span>fn<span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><h3 id="20-实现一个防抖函数"><a href="#20-实现一个防抖函数" class="headerlink" title="20. 实现一个防抖函数"></a>20. 实现一个防抖函数</h3><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 思路:在规定时间内未触发第二次，则执行</span><span class="token keyword">function</span> debounce <span class="token punctuation">(</span>fn<span class="token punctuation">,</span> delay<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 利用闭包保存定时器</span>  <span class="token keyword">let</span> timer <span class="token operator">=</span> <span class="token keyword">null</span>  <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> context <span class="token operator">=</span> <span class="token keyword">this</span>    <span class="token keyword">let</span> arg <span class="token operator">=</span> arguments    <span class="token comment" spellcheck="true">// 在规定时间内再次触发会先清除定时器后再重设定时器</span>    <span class="token function">clearTimeout</span><span class="token punctuation">(</span>timer<span class="token punctuation">)</span>    timer <span class="token operator">=</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      fn<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> arg<span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span> delay<span class="token punctuation">)</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">function</span> fn <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'防抖'</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'scroll'</span><span class="token punctuation">,</span> <span class="token function">debounce</span><span class="token punctuation">(</span>fn<span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 面试题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面试题 </tag>
            
            <tag> JS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>俄罗斯方块源码</title>
      <link href="2020/11/06/e-luo-si-fang-kuai-yuan-ma/"/>
      <url>2020/11/06/e-luo-si-fang-kuai-yuan-ma/</url>
      
        <content type="html"><![CDATA[<h2 id="俄罗斯方块源码"><a href="#俄罗斯方块源码" class="headerlink" title="俄罗斯方块源码"></a>俄罗斯方块源码</h2><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN""http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style language-css">    div &amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span><span class="token property">display</span><span class="token punctuation">:</span>block<span class="token punctuation">;</span><span class="token property">background-color</span><span class="token punctuation">:</span>black<span class="token punctuation">;</span><span class="token property">position</span><span class="token punctuation">:</span>absolute<span class="token punctuation">;</span><span class="token property">font</span><span class="token punctuation">:</span><span class="token number">17</span>px Tahoma<span class="token punctuation">;</span><span class="token property">color</span><span class="token punctuation">:</span><span class="token hexcode">#fff</span><span class="token punctuation">;</span>&amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span>    span &amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span><span class="token property">float</span><span class="token punctuation">:</span>left<span class="token punctuation">;</span><span class="token property">background-color</span><span class="token punctuation">:</span>gray<span class="token punctuation">;</span><span class="token property">width</span><span class="token punctuation">:</span><span class="token number">12</span>px<span class="token punctuation">;</span><span class="token property">height</span><span class="token punctuation">:</span><span class="token number">12</span>px<span class="token punctuation">;</span><span class="token property">border</span><span class="token punctuation">:</span><span class="token number">4</span>px gray outset<span class="token punctuation">;</span><span class="token property">margin</span><span class="token punctuation">:</span><span class="token number">0</span> <span class="token number">1</span> <span class="token number">1</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token property">overflow</span><span class="token punctuation">:</span>hidden<span class="token punctuation">;</span>&amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span>    p &amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span><span class="token property">float</span><span class="token punctuation">:</span>left<span class="token punctuation">;</span><span class="token property">width</span><span class="token punctuation">:</span><span class="token number">8</span>px<span class="token punctuation">;</span><span class="token property">height</span><span class="token punctuation">:</span><span class="token number">8</span>px<span class="token punctuation">;</span><span class="token property">border</span><span class="token punctuation">:</span><span class="token number">2</span>px gray outset<span class="token punctuation">;</span><span class="token property">overflow</span><span class="token punctuation">:</span>hidden<span class="token punctuation">;</span><span class="token property">margin</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token property">padding</span><span class="token punctuation">:</span><span class="token number">0</span>&amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span>    #main &amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span><span class="token property">width</span><span class="token punctuation">:</span><span class="token number">375</span>px<span class="token punctuation">;</span><span class="token property">height</span><span class="token punctuation">:</span><span class="token number">430</span>px<span class="token punctuation">;</span><span class="token property">display</span><span class="token punctuation">:</span>block<span class="token punctuation">;</span><span class="token property">background-color</span><span class="token punctuation">:</span>gray<span class="token punctuation">;</span><span class="token property">position</span><span class="token punctuation">:</span>relative<span class="token punctuation">;</span>&amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span>    #body &amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span><span class="token property">width</span><span class="token punctuation">:</span><span class="token number">241</span>px<span class="token punctuation">;</span><span class="token property">height</span><span class="token punctuation">:</span><span class="token number">401</span>px<span class="token punctuation">;</span><span class="token property">left</span><span class="token punctuation">:</span><span class="token number">15</span>px<span class="token punctuation">;</span><span class="token property">top</span><span class="token punctuation">:</span><span class="token number">15</span>px<span class="token punctuation">;</span><span class="token property">border</span><span class="token punctuation">:</span><span class="token number">1</span>px solid <span class="token hexcode">#999</span><span class="token punctuation">;</span>&amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span>    #score &amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span><span class="token property">width</span><span class="token punctuation">:</span><span class="token number">80</span>px<span class="token punctuation">;</span><span class="token property">height</span><span class="token punctuation">:</span><span class="token number">24</span>px<span class="token punctuation">;</span><span class="token property">left</span><span class="token punctuation">:</span><span class="token number">270</span>px<span class="token punctuation">;</span><span class="token property">top</span><span class="token punctuation">:</span><span class="token number">15</span>px<span class="token punctuation">;</span><span class="token property">padding</span><span class="token punctuation">:</span><span class="token number">4</span>px<span class="token punctuation">;</span>&amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span>    #level &amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span><span class="token property">width</span><span class="token punctuation">:</span><span class="token number">80</span>px<span class="token punctuation">;</span><span class="token property">height</span><span class="token punctuation">:</span><span class="token number">24</span>px<span class="token punctuation">;</span><span class="token property">left</span><span class="token punctuation">:</span><span class="token number">270</span>px<span class="token punctuation">;</span><span class="token property">top</span><span class="token punctuation">:</span><span class="token number">50</span>px<span class="token punctuation">;</span><span class="token property">padding</span><span class="token punctuation">:</span><span class="token number">4</span>px<span class="token punctuation">;</span>&amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span>    #next &amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span><span class="token property">width</span><span class="token punctuation">:</span><span class="token number">50</span>px<span class="token punctuation">;</span><span class="token property">height</span><span class="token punctuation">:</span><span class="token number">50</span>px<span class="token punctuation">;</span><span class="token property">left</span><span class="token punctuation">:</span><span class="token number">270</span>px<span class="token punctuation">;</span><span class="token property">top</span><span class="token punctuation">:</span><span class="token number">85</span>px<span class="token punctuation">;</span><span class="token property">border</span><span class="token punctuation">:</span><span class="token number">19</span>px black solid<span class="token punctuation">;</span>&amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span>    #ctrl &amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span><span class="token property">width</span><span class="token punctuation">:</span><span class="token number">80</span>px<span class="token punctuation">;</span><span class="token property">height</span><span class="token punctuation">:</span><span class="token number">55</span>px<span class="token punctuation">;</span><span class="token property">left</span><span class="token punctuation">:</span><span class="token number">270</span>px<span class="token punctuation">;</span><span class="token property">top</span><span class="token punctuation">:</span><span class="token number">360</span>px<span class="token punctuation">;</span><span class="token property">padding</span><span class="token punctuation">:</span><span class="token number">4</span>px<span class="token punctuation">;</span><span class="token property">text-align</span><span class="token punctuation">:</span>center<span class="token punctuation">;</span><span class="token property">background-color</span><span class="token punctuation">:</span>gray&amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span>    #ctrl button&amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span><span class="token property">width</span><span class="token punctuation">:</span><span class="token number">80</span>px<span class="token punctuation">;</span><span class="token property">height</span><span class="token punctuation">:</span><span class="token number">25</span>px<span class="token punctuation">;</span>&amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">    <span class="token keyword">var</span> G <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        fs<span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        fn<span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        score<span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">,</span>        l<span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token string">'#9F0'</span><span class="token punctuation">,</span><span class="token string">'#FF3'</span><span class="token punctuation">,</span><span class="token string">'#F33'</span><span class="token punctuation">,</span><span class="token string">'#C0C'</span><span class="token punctuation">,</span><span class="token string">'#33C'</span><span class="token punctuation">,</span><span class="token string">'#0F3'</span><span class="token punctuation">,</span><span class="token string">'#F93'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        v<span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token number">0x801</span><span class="token punctuation">,</span><span class="token number">0x801</span><span class="token punctuation">,</span><span class="token number">0x801</span><span class="token punctuation">,</span><span class="token number">0x801</span><span class="token punctuation">,</span><span class="token number">0x801</span><span class="token punctuation">,</span><span class="token number">0x801</span><span class="token punctuation">,</span><span class="token number">0x801</span><span class="token punctuation">,</span><span class="token number">0x801</span><span class="token punctuation">,</span><span class="token number">0x801</span><span class="token punctuation">,</span><span class="token number">0x801</span><span class="token punctuation">,</span><span class="token number">0x801</span><span class="token punctuation">,</span><span class="token number">0x801</span><span class="token punctuation">,</span><span class="token number">0x801</span><span class="token punctuation">,</span><span class="token number">0x801</span><span class="token punctuation">,</span><span class="token number">0x801</span><span class="token punctuation">,</span><span class="token number">0x801</span><span class="token punctuation">,</span><span class="token number">0x801</span><span class="token punctuation">,</span><span class="token number">0x801</span><span class="token punctuation">,</span><span class="token number">0x801</span><span class="token punctuation">,</span><span class="token number">0xFFFF</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        d<span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">0xCC00</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">0x4444</span><span class="token punctuation">,</span><span class="token number">0xF0</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">0x8C40</span><span class="token punctuation">,</span><span class="token number">0x6C00</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">0x4C80</span><span class="token punctuation">,</span><span class="token number">0xC600</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">0x44C0</span><span class="token punctuation">,</span><span class="token number">0x8E00</span><span class="token punctuation">,</span><span class="token number">0xC880</span><span class="token punctuation">,</span><span class="token number">0xE200</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">0x88C0</span><span class="token punctuation">,</span><span class="token number">0xE800</span><span class="token punctuation">,</span><span class="token number">0xC440</span><span class="token punctuation">,</span><span class="token number">0x2E00</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">0x4E00</span><span class="token punctuation">,</span><span class="token number">0x8C80</span><span class="token punctuation">,</span><span class="token number">0xE400</span><span class="token punctuation">,</span><span class="token number">0x4C40</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        init<span class="token punctuation">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">var</span> body <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'body'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">var</span> next <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'next'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">240</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                G<span class="token punctuation">.</span>fs<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>body<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">"span"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">16</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                G<span class="token punctuation">.</span>fn<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>next<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">"p"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            G<span class="token punctuation">.</span>domScore <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'score'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            G<span class="token punctuation">.</span>domLevel <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'level'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            document<span class="token punctuation">.</span>onkeydown<span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>G<span class="token punctuation">.</span><span class="token function">event</span><span class="token punctuation">(</span>e<span class="token operator">||</span>window<span class="token punctuation">.</span>event<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span>            G<span class="token punctuation">.</span><span class="token function">rand</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            G<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span>        timeTesk<span class="token punctuation">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>G<span class="token punctuation">.</span>pause<span class="token punctuation">)</span><span class="token keyword">return</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>G<span class="token punctuation">.</span><span class="token function">move</span><span class="token punctuation">(</span>G<span class="token punctuation">.</span>x<span class="token punctuation">,</span> G<span class="token punctuation">.</span>y<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> G<span class="token punctuation">.</span>t<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token keyword">var</span> s <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>                <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">19</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                    G<span class="token punctuation">.</span>v<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>G<span class="token punctuation">.</span>v<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">|</span>G<span class="token punctuation">.</span>m<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>                    <span class="token keyword">if</span><span class="token punctuation">(</span>G<span class="token punctuation">.</span>v<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">0xFFF</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> k<span class="token operator">=</span>i<span class="token punctuation">;</span>k<span class="token operator">></span><span class="token number">0</span><span class="token punctuation">;</span>k<span class="token operator">--</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                            G<span class="token punctuation">.</span>v<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> G<span class="token punctuation">.</span>v<span class="token punctuation">[</span>k<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>                        G<span class="token punctuation">.</span>score<span class="token operator">+</span><span class="token operator">=</span><span class="token operator">++</span>s<span class="token punctuation">;</span>                    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>                <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>                G<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            G<span class="token punctuation">.</span><span class="token function">draw</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span>        move<span class="token punctuation">:</span><span class="token keyword">function</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">,</span>t<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">var</span> m <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> k<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>k<span class="token operator">&lt;</span><span class="token number">4</span><span class="token punctuation">;</span>k<span class="token operator">++</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                m<span class="token punctuation">[</span>y<span class="token operator">+</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>G<span class="token punctuation">.</span>d<span class="token punctuation">[</span>G<span class="token punctuation">.</span>n<span class="token punctuation">]</span><span class="token punctuation">[</span>t<span class="token punctuation">]</span><span class="token operator">></span><span class="token operator">></span><span class="token punctuation">(</span><span class="token number">3</span><span class="token operator">-</span>k<span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">4</span><span class="token operator">&amp;</span><span class="token number">0xF</span><span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token operator">&lt;</span>Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">></span><span class="token operator">></span><span class="token operator">-</span>Math<span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>m<span class="token punctuation">[</span>y<span class="token operator">+</span>k<span class="token punctuation">]</span> <span class="token operator">&amp;</span> G<span class="token punctuation">.</span>v<span class="token punctuation">[</span>y<span class="token operator">+</span>k<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            G<span class="token punctuation">.</span>x <span class="token operator">=</span> x<span class="token punctuation">;</span>            G<span class="token punctuation">.</span>y <span class="token operator">=</span> y<span class="token punctuation">;</span>            G<span class="token punctuation">.</span>t <span class="token operator">=</span> t<span class="token punctuation">;</span>            G<span class="token punctuation">.</span>m <span class="token operator">=</span> m<span class="token punctuation">;</span>            G<span class="token punctuation">.</span><span class="token function">draw</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span>        rand<span class="token punctuation">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            G<span class="token punctuation">.</span>n <span class="token operator">=</span> G<span class="token punctuation">.</span>_n<span class="token punctuation">;</span>            G<span class="token punctuation">.</span>t <span class="token operator">=</span> G<span class="token punctuation">.</span>_t<span class="token punctuation">;</span>            G<span class="token punctuation">.</span>c <span class="token operator">=</span> G<span class="token punctuation">.</span>_c<span class="token punctuation">;</span>            G<span class="token punctuation">.</span>_n <span class="token operator">=</span> <span class="token function">parseInt</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">*</span>G<span class="token punctuation">.</span>d<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>            G<span class="token punctuation">.</span>_t <span class="token operator">=</span> <span class="token function">parseInt</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">*</span>G<span class="token punctuation">.</span>d<span class="token punctuation">[</span>G<span class="token punctuation">.</span>_n<span class="token punctuation">]</span><span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>            G<span class="token punctuation">.</span>_c <span class="token operator">=</span> <span class="token function">parseInt</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">*</span>G<span class="token punctuation">.</span>l<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span>        next<span class="token punctuation">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            G<span class="token punctuation">.</span><span class="token function">rand</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">parseInt</span><span class="token punctuation">(</span>G<span class="token punctuation">.</span>score<span class="token operator">/</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token operator">!=</span>G<span class="token punctuation">.</span>level<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                G<span class="token punctuation">.</span>level <span class="token operator">=</span> <span class="token function">parseInt</span><span class="token punctuation">(</span>G<span class="token punctuation">.</span>score<span class="token operator">/</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token function">clearInterval</span><span class="token punctuation">(</span>G<span class="token punctuation">.</span>handle<span class="token punctuation">)</span><span class="token punctuation">;</span>                G<span class="token punctuation">.</span>handle <span class="token operator">=</span> <span class="token function">setInterval</span><span class="token punctuation">(</span><span class="token string">"G.timeTesk()"</span><span class="token punctuation">,</span><span class="token number">500</span><span class="token operator">/</span><span class="token punctuation">(</span>G<span class="token punctuation">.</span>level<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            G<span class="token punctuation">.</span>domScore<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token string">'Score:'</span><span class="token operator">+</span>G<span class="token punctuation">.</span>score<span class="token punctuation">;</span>            G<span class="token punctuation">.</span>domLevel<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token string">'Level:'</span><span class="token operator">+</span>G<span class="token punctuation">.</span>level<span class="token punctuation">;</span>            <span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>G<span class="token punctuation">.</span>d<span class="token punctuation">[</span>G<span class="token punctuation">.</span>n<span class="token punctuation">]</span><span class="token punctuation">[</span>G<span class="token punctuation">.</span>t<span class="token punctuation">]</span><span class="token operator">></span><span class="token operator">></span>i<span class="token operator">*</span><span class="token number">4</span><span class="token operator">&amp;</span><span class="token number">0xF</span><span class="token punctuation">)</span><span class="token punctuation">)</span>i<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>G<span class="token punctuation">.</span><span class="token function">move</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> i<span class="token number">-3</span><span class="token punctuation">,</span> G<span class="token punctuation">.</span>t<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'Game over!'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token function">clearInterval</span><span class="token punctuation">(</span>G<span class="token punctuation">.</span>handle<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span>        draw<span class="token punctuation">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">240</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>G<span class="token punctuation">.</span>v<span class="token punctuation">[</span><span class="token function">parseInt</span><span class="token punctuation">(</span>i<span class="token operator">/</span><span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token operator">></span><span class="token operator">></span><span class="token punctuation">(</span><span class="token number">11</span><span class="token operator">-</span>i<span class="token operator">%</span><span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token number">0x1</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                    G<span class="token punctuation">.</span>fs<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>style<span class="token punctuation">.</span>visibility <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">;</span>                <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>G<span class="token punctuation">.</span>m<span class="token punctuation">[</span><span class="token function">parseInt</span><span class="token punctuation">(</span>i<span class="token operator">/</span><span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token operator">></span><span class="token operator">></span><span class="token punctuation">(</span><span class="token number">11</span><span class="token operator">-</span>i<span class="token operator">%</span><span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token number">0x1</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                    G<span class="token punctuation">.</span>fs<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>style<span class="token punctuation">.</span>visibility <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">;</span>                    G<span class="token punctuation">.</span>fs<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>style<span class="token punctuation">.</span>borderColor <span class="token operator">=</span> G<span class="token punctuation">.</span>fs<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>style<span class="token punctuation">.</span>background <span class="token operator">=</span> G<span class="token punctuation">.</span>l<span class="token punctuation">[</span>G<span class="token punctuation">.</span>c<span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">else</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                    G<span class="token punctuation">.</span>fs<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>style<span class="token punctuation">.</span>visibility <span class="token operator">=</span><span class="token string">'hidden'</span><span class="token punctuation">;</span>                <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">16</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>G<span class="token punctuation">.</span>d<span class="token punctuation">[</span>G<span class="token punctuation">.</span>_n<span class="token punctuation">]</span><span class="token punctuation">[</span>G<span class="token punctuation">.</span>_t<span class="token punctuation">]</span><span class="token operator">></span><span class="token operator">></span><span class="token punctuation">(</span><span class="token number">15</span><span class="token operator">-</span>i<span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token number">0x1</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                    G<span class="token punctuation">.</span>fn<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>style<span class="token punctuation">.</span>visibility <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">;</span>                    G<span class="token punctuation">.</span>fn<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>style<span class="token punctuation">.</span>borderColor <span class="token operator">=</span> G<span class="token punctuation">.</span>fn<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>style<span class="token punctuation">.</span>background <span class="token operator">=</span> G<span class="token punctuation">.</span>l<span class="token punctuation">[</span>G<span class="token punctuation">.</span>_c<span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">else</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                    G<span class="token punctuation">.</span>fn<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>style<span class="token punctuation">.</span>visibility <span class="token operator">=</span><span class="token string">'hidden'</span><span class="token punctuation">;</span>                <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span>        event<span class="token punctuation">:</span><span class="token keyword">function</span><span class="token punctuation">(</span>e<span class="token punctuation">,</span>t<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">switch</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>keyCode<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token keyword">case</span> <span class="token number">37</span><span class="token punctuation">:</span>                    G<span class="token punctuation">.</span><span class="token function">move</span><span class="token punctuation">(</span>G<span class="token punctuation">.</span>x <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> G<span class="token punctuation">.</span>y<span class="token punctuation">,</span> G<span class="token punctuation">.</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token keyword">case</span> <span class="token number">39</span><span class="token punctuation">:</span>                    G<span class="token punctuation">.</span><span class="token function">move</span><span class="token punctuation">(</span>G<span class="token punctuation">.</span>x <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> G<span class="token punctuation">.</span>y<span class="token punctuation">,</span> G<span class="token punctuation">.</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token keyword">case</span> <span class="token number">38</span><span class="token punctuation">:</span>                    G<span class="token punctuation">.</span><span class="token function">move</span><span class="token punctuation">(</span>G<span class="token punctuation">.</span>x<span class="token punctuation">,</span> G<span class="token punctuation">.</span>y<span class="token punctuation">,</span> <span class="token punctuation">(</span>G<span class="token punctuation">.</span>t <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">%</span> G<span class="token punctuation">.</span>d<span class="token punctuation">[</span>G<span class="token punctuation">.</span>n<span class="token punctuation">]</span><span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token keyword">case</span> <span class="token number">40</span><span class="token punctuation">:</span>                    G<span class="token punctuation">.</span><span class="token function">timeTesk</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token keyword">case</span> <span class="token number">32</span><span class="token punctuation">:</span>                    <span class="token keyword">while</span><span class="token punctuation">(</span>G<span class="token punctuation">.</span><span class="token function">timeTesk</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span> <span class="token attr-name">onload</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>G.init();<span class="token punctuation">'</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>main<span class="token punctuation">'</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>body<span class="token punctuation">'</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>score<span class="token punctuation">'</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>level<span class="token punctuation">'</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>next<span class="token punctuation">'</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>ctrl<span class="token punctuation">'</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">onclick</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>javascript:location.href<span class="token punctuation">=</span>location.href;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>New<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">onclick</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>javascript:this.innerHTML<span class="token punctuation">=</span>&amp;#123;<span class="token punctuation">'</span>true<span class="token punctuation">'</span>:<span class="token punctuation">'</span>Start<span class="token punctuation">'</span>,<span class="token punctuation">'</span>false<span class="token punctuation">'</span>:<span class="token punctuation">'</span>Pause<span class="token punctuation">'</span>&amp;#125;[G.pause<span class="token punctuation">=</span>!!!G.pause];<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Pause<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 源码 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> html5 </tag>
            
            <tag> 源码 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>45个值得收藏的CSS形状</title>
      <link href="2020/11/05/45-ge-zhi-de-shou-cang-de-css-xing-zhuang/"/>
      <url>2020/11/05/45-ge-zhi-de-shou-cang-de-css-xing-zhuang/</url>
      
        <content type="html"><![CDATA[<h1 id="45个值得收藏的CSS形状"><a href="#45个值得收藏的CSS形状" class="headerlink" title="45个值得收藏的CSS形状"></a>45个值得收藏的CSS形状</h1><ul><li><p>CSS能够生成各种形状。正方形和矩形很容易，因为它们是 web的自然形状。添加宽度和高度，就得到了所需的精确大小的矩形。添加边框半径，你就可以把这个形状变成圆形，足够多的边框半径，你就可以把这些矩形变成圆形和椭圆形。</p></li><li><p>我们还可以使用 CSS 伪元素中的 ::before 和::after，这为我们提供了向原始元素添加另外两个形状的可能性。通过巧妙地使用定位、转换和许多其他技巧，我们可以只用一个 HTML元素在 CSS 中创建许多形状。</p></li></ul><blockquote><p>虽然我们现在大都使用字体图标或者svg图片，似乎使用 CSS 来做图标意义不是很大，但怎么实现这些图标用到的一些技巧及思路是很值得我们的学习。</p></blockquote><h2 id="1-正方形"><a href="#1-正方形" class="headerlink" title="1.正方形"></a>1.正方形</h2><hr><p><img src="https://image-static.segmentfault.com/157/049/1570495473-5cb962711c75e_articlex" alt="正方形"></p><pre class=" language-css"><code class="language-css">#square &amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>  <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">100</span>px<span class="token punctuation">;</span>  <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">100</span>px<span class="token punctuation">;</span>  <span class="token property">background</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span>&amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span></code></pre><h2 id="2-长方形"><a href="#2-长方形" class="headerlink" title="2.长方形"></a>2.长方形</h2><hr><p><img src="https://image-static.segmentfault.com/908/278/908278725-5cb9637b3bcf6_articlex" alt="长方形"></p><pre class=" language-css"><code class="language-css">#rectangle &amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>  <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">200</span>px<span class="token punctuation">;</span>  <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">100</span>px<span class="token punctuation">;</span>  <span class="token property">background</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span>&amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span></code></pre><h2 id="3-圆形"><a href="#3-圆形" class="headerlink" title="3.圆形"></a>3.圆形</h2><hr><p><img src="https://image-static.segmentfault.com/125/221/1252216328-5cb9639780f10_articlex" alt="圆形"></p><pre class=" language-css"><code class="language-css">#circle &amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>  <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">100</span>px<span class="token punctuation">;</span>  <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">100</span>px<span class="token punctuation">;</span>  <span class="token property">background</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span>  <span class="token property">border-radius</span><span class="token punctuation">:</span> <span class="token number">50%</span>&amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span></code></pre><h2 id="4-椭圆形"><a href="#4-椭圆形" class="headerlink" title="4.椭圆形"></a>4.椭圆形</h2><hr><p><img src="https://image-static.segmentfault.com/184/279/1842792954-5cb963ce10a73_articlex" alt="椭圆形"></p><pre class=" language-css"><code class="language-css">#oval &amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>  <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">200</span>px<span class="token punctuation">;</span>  <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">100</span>px<span class="token punctuation">;</span>  <span class="token property">background</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span>  <span class="token property">border-radius</span><span class="token punctuation">:</span> <span class="token number">100</span>px / <span class="token number">50</span>px<span class="token punctuation">;</span>&amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span></code></pre><h2 id="5-上三角"><a href="#5-上三角" class="headerlink" title="5.上三角"></a>5.上三角</h2><hr><p><img src="https://image-static.segmentfault.com/292/510/2925102762-5cb964e328349_articlex" alt="上三角"></p><pre class=" language-css"><code class="language-css">#triangle-up &amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>  <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token property">border-left</span><span class="token punctuation">:</span> <span class="token number">50</span>px solid transparent<span class="token punctuation">;</span>  <span class="token property">border-right</span><span class="token punctuation">:</span> <span class="token number">50</span>px solid transparent<span class="token punctuation">;</span>  <span class="token property">border-bottom</span><span class="token punctuation">:</span> <span class="token number">100</span>px solid red<span class="token punctuation">;</span>&amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span></code></pre><h2 id="6-下三角"><a href="#6-下三角" class="headerlink" title="6.下三角"></a>6.下三角</h2><hr><p><img src="https://image-static.segmentfault.com/184/806/1848066845-5cb9650bda068_articlex" alt="下三角"></p><pre class=" language-css"><code class="language-css">#triangle-down &amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>  <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token property">border-left</span><span class="token punctuation">:</span> <span class="token number">50</span>px solid transparent<span class="token punctuation">;</span>  <span class="token property">border-right</span><span class="token punctuation">:</span> <span class="token number">50</span>px solid transparent<span class="token punctuation">;</span>  <span class="token property">border-top</span><span class="token punctuation">:</span> <span class="token number">100</span>px solid red<span class="token punctuation">;</span>&amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span></code></pre><h2 id="7-左三角"><a href="#7-左三角" class="headerlink" title="7.左三角"></a>7.左三角</h2><hr><p><img src="https://image-static.segmentfault.com/155/608/1556080076-5cb96531da1e0_articlex" alt="左三角"></p><pre class=" language-css"><code class="language-css">#triangle-left &amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>  <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token property">border-top</span><span class="token punctuation">:</span> <span class="token number">50</span>px solid transparent<span class="token punctuation">;</span>  <span class="token property">border-right</span><span class="token punctuation">:</span> <span class="token number">100</span>px solid red<span class="token punctuation">;</span>  <span class="token property">border-bottom</span><span class="token punctuation">:</span> <span class="token number">50</span>px solid transparent<span class="token punctuation">;</span>&amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span></code></pre><h2 id="8-右三角"><a href="#8-右三角" class="headerlink" title="8.右三角"></a>8.右三角</h2><hr><p><img src="https://image-static.segmentfault.com/408/216/4082161781-5cb9655469bc2_articlex" alt="右三角"></p><pre class=" language-css"><code class="language-css">#triangle-right &amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>  <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token property">border-top</span><span class="token punctuation">:</span> <span class="token number">50</span>px solid transparent<span class="token punctuation">;</span>  <span class="token property">border-left</span><span class="token punctuation">:</span> <span class="token number">100</span>px solid red<span class="token punctuation">;</span>  <span class="token property">border-bottom</span><span class="token punctuation">:</span> <span class="token number">50</span>px solid transparent<span class="token punctuation">;</span>&amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span></code></pre><h2 id="9-左上角"><a href="#9-左上角" class="headerlink" title="9.左上角"></a>9.左上角</h2><hr><p><img src="https://image-static.segmentfault.com/404/298/4042989673-5cb966730f716_articlex" alt="左上角"></p><pre class=" language-css"><code class="language-css">#triangle-topleft &amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>  <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token property">border-top</span><span class="token punctuation">:</span> <span class="token number">100</span>px solid red<span class="token punctuation">;</span>  <span class="token property">border-right</span><span class="token punctuation">:</span> <span class="token number">100</span>px solid transparent<span class="token punctuation">;</span></code></pre><h2 id="10-右上角"><a href="#10-右上角" class="headerlink" title="10.右上角"></a>10.右上角</h2><hr><p><img src="https://image-static.segmentfault.com/399/394/3993942954-5cb966b4f2d8e_articlex" alt="右上角"></p><pre class=" language-css"><code class="language-css">#triangle-topright &amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>  <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token property">border-top</span><span class="token punctuation">:</span> <span class="token number">100</span>px solid red<span class="token punctuation">;</span>  <span class="token property">border-left</span><span class="token punctuation">:</span> <span class="token number">100</span>px solid transparent<span class="token punctuation">;</span>&amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span></code></pre><h2 id="11-左下角"><a href="#11-左下角" class="headerlink" title="11.左下角"></a>11.左下角</h2><hr><p><img src="https://image-static.segmentfault.com/278/803/2788039398-5cb966d123135_articlex" alt="左下角"></p><pre class=" language-css"><code class="language-css">#triangle-bottomleft &amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>  <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token property">border-bottom</span><span class="token punctuation">:</span> <span class="token number">100</span>px solid red<span class="token punctuation">;</span>  <span class="token property">border-right</span><span class="token punctuation">:</span> <span class="token number">100</span>px solid transparent<span class="token punctuation">;</span>&amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span></code></pre><h2 id="12-右下角"><a href="#12-右下角" class="headerlink" title="12.右下角"></a>12.右下角</h2><hr><p><img src="https://image-static.segmentfault.com/386/692/3866925240-5cb966ec599da_articlex" alt="右下角"></p><pre class=" language-css"><code class="language-css">#triangle-bottomright &amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>  <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token property">border-bottom</span><span class="token punctuation">:</span> <span class="token number">100</span>px solid red<span class="token punctuation">;</span>  <span class="token property">border-left</span><span class="token punctuation">:</span> <span class="token number">100</span>px solid transparent<span class="token punctuation">;</span>&amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span></code></pre><h2 id="13-箭头"><a href="#13-箭头" class="headerlink" title="13.箭头"></a>13.箭头</h2><hr><p><img src="https://image-static.segmentfault.com/216/299/2162993827-5cb9673528e86_articlex" alt="箭头"></p><pre class=" language-css"><code class="language-css">#curvedarrow &amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>  <span class="token property">position</span><span class="token punctuation">:</span> relative<span class="token punctuation">;</span>  <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token property">border-top</span><span class="token punctuation">:</span> <span class="token number">9</span>px solid transparent<span class="token punctuation">;</span>  <span class="token property">border-right</span><span class="token punctuation">:</span> <span class="token number">9</span>px solid red<span class="token punctuation">;</span>  <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">rotate</span><span class="token punctuation">(</span><span class="token number">10</span>deg<span class="token punctuation">)</span><span class="token punctuation">;</span>&amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span>#<span class="token property">curvedarrow</span><span class="token punctuation">:</span>after &amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>  <span class="token property">content</span><span class="token punctuation">:</span> <span class="token string">""</span><span class="token punctuation">;</span>  <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>  <span class="token property">border</span><span class="token punctuation">:</span> <span class="token number">0</span> solid transparent<span class="token punctuation">;</span>  <span class="token property">border-top</span><span class="token punctuation">:</span> <span class="token number">3</span>px solid red<span class="token punctuation">;</span>  <span class="token property">border-radius</span><span class="token punctuation">:</span> <span class="token number">20</span>px <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token property">top</span><span class="token punctuation">:</span> -<span class="token number">12</span>px<span class="token punctuation">;</span>  <span class="token property">left</span><span class="token punctuation">:</span> -<span class="token number">9</span>px<span class="token punctuation">;</span>  <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">12</span>px<span class="token punctuation">;</span>  <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">12</span>px<span class="token punctuation">;</span>  <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">rotate</span><span class="token punctuation">(</span><span class="token number">45</span>deg<span class="token punctuation">)</span><span class="token punctuation">;</span>&amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span></code></pre><h2 id="14-梯形"><a href="#14-梯形" class="headerlink" title="14.梯形"></a>14.梯形</h2><hr><p><img src="https://image-static.segmentfault.com/291/423/2914232682-5cb96755d6d72_articlex" alt="梯形"></p><pre class=" language-css"><code class="language-css">#trapezoid &amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>  <span class="token property">border-bottom</span><span class="token punctuation">:</span> <span class="token number">100</span>px solid red<span class="token punctuation">;</span>  <span class="token property">border-left</span><span class="token punctuation">:</span> <span class="token number">25</span>px solid transparent<span class="token punctuation">;</span>  <span class="token property">border-right</span><span class="token punctuation">:</span> <span class="token number">25</span>px solid transparent<span class="token punctuation">;</span>  <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">100</span>px<span class="token punctuation">;</span>&amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span></code></pre><h2 id="15-平行四边形"><a href="#15-平行四边形" class="headerlink" title="15.平行四边形"></a>15.平行四边形</h2><hr><p><img src="https://image-static.segmentfault.com/285/037/2850372951-5cb9678f43b40_articlex" alt="平行四边形"></p><pre class=" language-css"><code class="language-css">#parallelogram &amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>  <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">150</span>px<span class="token punctuation">;</span>  <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">100</span>px<span class="token punctuation">;</span>  <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">skew</span><span class="token punctuation">(</span><span class="token number">20</span>deg<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token property">background</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span>&amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span></code></pre><h2 id="16-星星-6角"><a href="#16-星星-6角" class="headerlink" title="16.星星(6角)"></a>16.星星(6角)</h2><hr><p><img src="https://image-static.segmentfault.com/167/959/1679591297-5cb967c4604cc_articlex" alt="星星(6角)"></p><pre class=" language-css"><code class="language-css">#star-six &amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>  <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token property">border-left</span><span class="token punctuation">:</span> <span class="token number">50</span>px solid transparent<span class="token punctuation">;</span>  <span class="token property">border-right</span><span class="token punctuation">:</span> <span class="token number">50</span>px solid transparent<span class="token punctuation">;</span>  <span class="token property">border-bottom</span><span class="token punctuation">:</span> <span class="token number">100</span>px solid red<span class="token punctuation">;</span>  <span class="token property">position</span><span class="token punctuation">:</span> relative<span class="token punctuation">;</span>&amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span>#<span class="token property">star-six</span><span class="token punctuation">:</span>after &amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>  <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token property">border-left</span><span class="token punctuation">:</span> <span class="token number">50</span>px solid transparent<span class="token punctuation">;</span>  <span class="token property">border-right</span><span class="token punctuation">:</span> <span class="token number">50</span>px solid transparent<span class="token punctuation">;</span>  <span class="token property">border-top</span><span class="token punctuation">:</span> <span class="token number">100</span>px solid red<span class="token punctuation">;</span>  <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>  <span class="token property">content</span><span class="token punctuation">:</span> <span class="token string">""</span><span class="token punctuation">;</span>  <span class="token property">top</span><span class="token punctuation">:</span> <span class="token number">30</span>px<span class="token punctuation">;</span>  <span class="token property">left</span><span class="token punctuation">:</span> -<span class="token number">50</span>px<span class="token punctuation">;</span>&amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span></code></pre><h2 id="17-星星-5角"><a href="#17-星星-5角" class="headerlink" title="17.星星(5角)"></a>17.星星(5角)</h2><hr><p><img src="https://image-static.segmentfault.com/274/872/2748727213-5cb967ea8917c_articlex" alt="星星(5角)"></p><pre class=" language-css"><code class="language-css">#star-five &amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>  <span class="token property">margin</span><span class="token punctuation">:</span> <span class="token number">50</span>px <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token property">position</span><span class="token punctuation">:</span> relative<span class="token punctuation">;</span>  <span class="token property">display</span><span class="token punctuation">:</span> block<span class="token punctuation">;</span>  <span class="token property">color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span>  <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">0</span>px<span class="token punctuation">;</span>  <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">0</span>px<span class="token punctuation">;</span>  <span class="token property">border-right</span><span class="token punctuation">:</span> <span class="token number">100</span>px solid transparent<span class="token punctuation">;</span>  <span class="token property">border-bottom</span><span class="token punctuation">:</span> <span class="token number">70</span>px solid red<span class="token punctuation">;</span>  <span class="token property">border-left</span><span class="token punctuation">:</span> <span class="token number">100</span>px solid transparent<span class="token punctuation">;</span>  <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">rotate</span><span class="token punctuation">(</span><span class="token number">35</span>deg<span class="token punctuation">)</span><span class="token punctuation">;</span>&amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span>#<span class="token property">star-five</span><span class="token punctuation">:</span>before &amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>  <span class="token property">border-bottom</span><span class="token punctuation">:</span> <span class="token number">80</span>px solid red<span class="token punctuation">;</span>  <span class="token property">border-left</span><span class="token punctuation">:</span> <span class="token number">30</span>px solid transparent<span class="token punctuation">;</span>  <span class="token property">border-right</span><span class="token punctuation">:</span> <span class="token number">30</span>px solid transparent<span class="token punctuation">;</span>  <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>  <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token property">top</span><span class="token punctuation">:</span> -<span class="token number">45</span>px<span class="token punctuation">;</span>  <span class="token property">left</span><span class="token punctuation">:</span> -<span class="token number">65</span>px<span class="token punctuation">;</span>  <span class="token property">display</span><span class="token punctuation">:</span> block<span class="token punctuation">;</span>  <span class="token property">content</span><span class="token punctuation">:</span> <span class="token string">''</span><span class="token punctuation">;</span>  <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">rotate</span><span class="token punctuation">(</span>-<span class="token number">35</span>deg<span class="token punctuation">)</span><span class="token punctuation">;</span>&amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span>#<span class="token property">star-five</span><span class="token punctuation">:</span>after &amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>  <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>  <span class="token property">display</span><span class="token punctuation">:</span> block<span class="token punctuation">;</span>  <span class="token property">color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span>  <span class="token property">top</span><span class="token punctuation">:</span> <span class="token number">3</span>px<span class="token punctuation">;</span>  <span class="token property">left</span><span class="token punctuation">:</span> -<span class="token number">105</span>px<span class="token punctuation">;</span>  <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">0</span>px<span class="token punctuation">;</span>  <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">0</span>px<span class="token punctuation">;</span>  <span class="token property">border-right</span><span class="token punctuation">:</span> <span class="token number">100</span>px solid transparent<span class="token punctuation">;</span>  <span class="token property">border-bottom</span><span class="token punctuation">:</span> <span class="token number">70</span>px solid red<span class="token punctuation">;</span>  <span class="token property">border-left</span><span class="token punctuation">:</span> <span class="token number">100</span>px solid transparent<span class="token punctuation">;</span>  <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">rotate</span><span class="token punctuation">(</span>-<span class="token number">70</span>deg<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token property">content</span><span class="token punctuation">:</span> <span class="token string">''</span><span class="token punctuation">;</span>&amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span></code></pre><h2 id="18-五边形"><a href="#18-五边形" class="headerlink" title="18.五边形"></a>18.五边形</h2><hr><p><img src="https://image-static.segmentfault.com/263/545/2635456600-5cb968182daf6_articlex" alt="五边形"></p><pre class=" language-css"><code class="language-css">#pentagon &amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>  <span class="token property">position</span><span class="token punctuation">:</span> relative<span class="token punctuation">;</span>  <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">54</span>px<span class="token punctuation">;</span>  <span class="token property">box-sizing</span><span class="token punctuation">:</span> content-box<span class="token punctuation">;</span>  <span class="token property">border-width</span><span class="token punctuation">:</span> <span class="token number">50</span>px <span class="token number">18</span>px <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token property">border-style</span><span class="token punctuation">:</span> solid<span class="token punctuation">;</span>  <span class="token property">border-color</span><span class="token punctuation">:</span> red transparent<span class="token punctuation">;</span>&amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span>#<span class="token property">pentagon</span><span class="token punctuation">:</span>before &amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>  <span class="token property">content</span><span class="token punctuation">:</span> <span class="token string">""</span><span class="token punctuation">;</span>  <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>  <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token property">top</span><span class="token punctuation">:</span> -<span class="token number">85</span>px<span class="token punctuation">;</span>  <span class="token property">left</span><span class="token punctuation">:</span> -<span class="token number">18</span>px<span class="token punctuation">;</span>  <span class="token property">border-width</span><span class="token punctuation">:</span> <span class="token number">0</span> <span class="token number">45</span>px <span class="token number">35</span>px<span class="token punctuation">;</span>  <span class="token property">border-style</span><span class="token punctuation">:</span> solid<span class="token punctuation">;</span>  <span class="token property">border-color</span><span class="token punctuation">:</span> transparent transparent red<span class="token punctuation">;</span>&amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span></code></pre><h2 id="19-六边形"><a href="#19-六边形" class="headerlink" title="19.六边形"></a>19.六边形</h2><hr><p><img src="https://image-static.segmentfault.com/271/774/2717748199-5cb96833dbece_articlex" alt="六边形"></p><pre class=" language-css"><code class="language-css">#hexagon &amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>  <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">100</span>px<span class="token punctuation">;</span>  <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">55</span>px<span class="token punctuation">;</span>  <span class="token property">background</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span>  <span class="token property">position</span><span class="token punctuation">:</span> relative<span class="token punctuation">;</span>&amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span>#<span class="token property">hexagon</span><span class="token punctuation">:</span>before &amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>  <span class="token property">content</span><span class="token punctuation">:</span> <span class="token string">""</span><span class="token punctuation">;</span>  <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>  <span class="token property">top</span><span class="token punctuation">:</span> -<span class="token number">25</span>px<span class="token punctuation">;</span>  <span class="token property">left</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token property">border-left</span><span class="token punctuation">:</span> <span class="token number">50</span>px solid transparent<span class="token punctuation">;</span>  <span class="token property">border-right</span><span class="token punctuation">:</span> <span class="token number">50</span>px solid transparent<span class="token punctuation">;</span>  <span class="token property">border-bottom</span><span class="token punctuation">:</span> <span class="token number">25</span>px solid red<span class="token punctuation">;</span>&amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span>#<span class="token property">hexagon</span><span class="token punctuation">:</span>after &amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>  <span class="token property">content</span><span class="token punctuation">:</span> <span class="token string">""</span><span class="token punctuation">;</span>  <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>  <span class="token property">bottom</span><span class="token punctuation">:</span> -<span class="token number">25</span>px<span class="token punctuation">;</span>  <span class="token property">left</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token property">border-left</span><span class="token punctuation">:</span> <span class="token number">50</span>px solid transparent<span class="token punctuation">;</span>  <span class="token property">border-right</span><span class="token punctuation">:</span> <span class="token number">50</span>px solid transparent<span class="token punctuation">;</span>  <span class="token property">border-top</span><span class="token punctuation">:</span> <span class="token number">25</span>px solid red<span class="token punctuation">;</span>&amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span></code></pre><h2 id="20-八边形"><a href="#20-八边形" class="headerlink" title="20.八边形"></a>20.八边形</h2><hr><p><img src="https://image-static.segmentfault.com/840/041/840041226-5cb96856aae86_articlex" alt="八边形"></p><pre class=" language-css"><code class="language-css">#octagon &amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>  <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">100</span>px<span class="token punctuation">;</span>  <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">100</span>px<span class="token punctuation">;</span>  <span class="token property">background</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span>  <span class="token property">position</span><span class="token punctuation">:</span> relative<span class="token punctuation">;</span>&amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span>#<span class="token property">octagon</span><span class="token punctuation">:</span>before &amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>  <span class="token property">content</span><span class="token punctuation">:</span> <span class="token string">""</span><span class="token punctuation">;</span>  <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">100</span>px<span class="token punctuation">;</span>  <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>  <span class="token property">top</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token property">left</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token property">border-bottom</span><span class="token punctuation">:</span> <span class="token number">29</span>px solid red<span class="token punctuation">;</span>  <span class="token property">border-left</span><span class="token punctuation">:</span> <span class="token number">29</span>px solid <span class="token hexcode">#eee</span><span class="token punctuation">;</span>  <span class="token property">border-right</span><span class="token punctuation">:</span> <span class="token number">29</span>px solid <span class="token hexcode">#eee</span><span class="token punctuation">;</span>&amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span>#<span class="token property">octagon</span><span class="token punctuation">:</span>after &amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>  <span class="token property">content</span><span class="token punctuation">:</span> <span class="token string">""</span><span class="token punctuation">;</span>  <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">100</span>px<span class="token punctuation">;</span>  <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>  <span class="token property">bottom</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token property">left</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token property">border-top</span><span class="token punctuation">:</span> <span class="token number">29</span>px solid red<span class="token punctuation">;</span>  <span class="token property">border-left</span><span class="token punctuation">:</span> <span class="token number">29</span>px solid <span class="token hexcode">#eee</span><span class="token punctuation">;</span>  <span class="token property">border-right</span><span class="token punctuation">:</span> <span class="token number">29</span>px solid <span class="token hexcode">#eee</span><span class="token punctuation">;</span>&amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span></code></pre><h2 id="21-爱心"><a href="#21-爱心" class="headerlink" title="21.爱心"></a>21.爱心</h2><hr><p><img src="https://image-static.segmentfault.com/180/459/1804591996-5cb96876efb70_articlex" alt="爱心"></p><pre class=" language-css"><code class="language-css">#heart &amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>  <span class="token property">position</span><span class="token punctuation">:</span> relative<span class="token punctuation">;</span>  <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">100</span>px<span class="token punctuation">;</span>  <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">90</span>px<span class="token punctuation">;</span>&amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span>#<span class="token property">heart</span><span class="token punctuation">:</span>before,#<span class="token property">heart</span><span class="token punctuation">:</span>after &amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>  <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>  <span class="token property">content</span><span class="token punctuation">:</span> <span class="token string">""</span><span class="token punctuation">;</span>  <span class="token property">left</span><span class="token punctuation">:</span> <span class="token number">50</span>px<span class="token punctuation">;</span>  <span class="token property">top</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">50</span>px<span class="token punctuation">;</span>  <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">80</span>px<span class="token punctuation">;</span>  <span class="token property">background</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span>  <span class="token property">border-radius</span><span class="token punctuation">:</span> <span class="token number">50</span>px <span class="token number">50</span>px <span class="token number">0</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">rotate</span><span class="token punctuation">(</span>-<span class="token number">45</span>deg<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token property">transform-origin</span><span class="token punctuation">:</span> <span class="token number">0</span> <span class="token number">100%</span><span class="token punctuation">;</span>&amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span>#<span class="token property">heart</span><span class="token punctuation">:</span>after &amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>  <span class="token property">left</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">rotate</span><span class="token punctuation">(</span><span class="token number">45</span>deg<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token property">transform-origin</span><span class="token punctuation">:</span> <span class="token number">100%</span> <span class="token number">100%</span><span class="token punctuation">;</span>&amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span></code></pre><h2 id="22-无穷大"><a href="#22-无穷大" class="headerlink" title="22.无穷大"></a>22.无穷大</h2><hr><p><img src="https://image-static.segmentfault.com/810/827/810827033-5cb968c50f28a_articlex" alt="无穷大"></p><pre class=" language-css"><code class="language-css">#infinity &amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>  <span class="token property">position</span><span class="token punctuation">:</span> relative<span class="token punctuation">;</span>  <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">212</span>px<span class="token punctuation">;</span>  <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">100</span>px<span class="token punctuation">;</span>  <span class="token property">box-sizing</span><span class="token punctuation">:</span> content-box<span class="token punctuation">;</span>&amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span>#<span class="token property">infinity</span><span class="token punctuation">:</span>before,#<span class="token property">infinity</span><span class="token punctuation">:</span>after &amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>  <span class="token property">content</span><span class="token punctuation">:</span> <span class="token string">""</span><span class="token punctuation">;</span>  <span class="token property">box-sizing</span><span class="token punctuation">:</span> content-box<span class="token punctuation">;</span>  <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>  <span class="token property">top</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token property">left</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">60</span>px<span class="token punctuation">;</span>  <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">60</span>px<span class="token punctuation">;</span>  <span class="token property">border</span><span class="token punctuation">:</span> <span class="token number">20</span>px solid red<span class="token punctuation">;</span>  <span class="token property">border-radius</span><span class="token punctuation">:</span> <span class="token number">50</span>px <span class="token number">50</span>px <span class="token number">0</span> <span class="token number">50</span>px<span class="token punctuation">;</span>  <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">rotate</span><span class="token punctuation">(</span>-<span class="token number">45</span>deg<span class="token punctuation">)</span><span class="token punctuation">;</span>&amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span>#<span class="token property">infinity</span><span class="token punctuation">:</span>after &amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>  <span class="token property">left</span><span class="token punctuation">:</span> auto<span class="token punctuation">;</span>  <span class="token property">right</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token property">border-radius</span><span class="token punctuation">:</span> <span class="token number">50</span>px <span class="token number">50</span>px <span class="token number">50</span>px <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">rotate</span><span class="token punctuation">(</span><span class="token number">45</span>deg<span class="token punctuation">)</span><span class="token punctuation">;</span>&amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span></code></pre><h2 id="23-菱形"><a href="#23-菱形" class="headerlink" title="23.菱形"></a>23.菱形</h2><hr><p><img src="https://image-static.segmentfault.com/398/929/3989294895-5cb968e2ddb9f_articlex" alt="菱形"></p><pre class=" language-css"><code class="language-css">#diamond &amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>  <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token property">border</span><span class="token punctuation">:</span> <span class="token number">50</span>px solid transparent<span class="token punctuation">;</span>  <span class="token property">border-bottom-color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span>  <span class="token property">position</span><span class="token punctuation">:</span> relative<span class="token punctuation">;</span>  <span class="token property">top</span><span class="token punctuation">:</span> -<span class="token number">50</span>px<span class="token punctuation">;</span>&amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span>#<span class="token property">diamond</span><span class="token punctuation">:</span>after &amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>  <span class="token property">content</span><span class="token punctuation">:</span> <span class="token string">''</span><span class="token punctuation">;</span>  <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>  <span class="token property">left</span><span class="token punctuation">:</span> -<span class="token number">50</span>px<span class="token punctuation">;</span>  <span class="token property">top</span><span class="token punctuation">:</span> <span class="token number">50</span>px<span class="token punctuation">;</span>  <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token property">border</span><span class="token punctuation">:</span> <span class="token number">50</span>px solid transparent<span class="token punctuation">;</span>  <span class="token property">border-top-color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span>&amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span></code></pre><h2 id="24-钻石"><a href="#24-钻石" class="headerlink" title="24.钻石"></a>24.钻石</h2><hr><p><img src="https://image-static.segmentfault.com/131/390/1313903104-5cb968fcb70cf_articlex" alt="钻石"></p><pre class=" language-css"><code class="language-css">#diamond-shield &amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>  <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token property">border</span><span class="token punctuation">:</span> <span class="token number">50</span>px solid transparent<span class="token punctuation">;</span>  <span class="token property">border-bottom</span><span class="token punctuation">:</span> <span class="token number">20</span>px solid red<span class="token punctuation">;</span>  <span class="token property">position</span><span class="token punctuation">:</span> relative<span class="token punctuation">;</span>  <span class="token property">top</span><span class="token punctuation">:</span> -<span class="token number">50</span>px<span class="token punctuation">;</span>&amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span>#<span class="token property">diamond-shield</span><span class="token punctuation">:</span>after &amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>  <span class="token property">content</span><span class="token punctuation">:</span> <span class="token string">''</span><span class="token punctuation">;</span>  <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>  <span class="token property">left</span><span class="token punctuation">:</span> -<span class="token number">50</span>px<span class="token punctuation">;</span>  <span class="token property">top</span><span class="token punctuation">:</span> <span class="token number">20</span>px<span class="token punctuation">;</span>  <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token property">border</span><span class="token punctuation">:</span> <span class="token number">50</span>px solid transparent<span class="token punctuation">;</span>  <span class="token property">border-top</span><span class="token punctuation">:</span> <span class="token number">70</span>px solid red<span class="token punctuation">;</span>&amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span></code></pre><h2 id="25-钻戒"><a href="#25-钻戒" class="headerlink" title="25.钻戒"></a>25.钻戒</h2><hr><p><img src="https://image-static.segmentfault.com/275/172/2751724698-5cb96919da254_articlex" alt="钻戒"></p><pre class=" language-css"><code class="language-css">#diamond-narrow &amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>  <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token property">border</span><span class="token punctuation">:</span> <span class="token number">50</span>px solid transparent<span class="token punctuation">;</span>  <span class="token property">border-bottom</span><span class="token punctuation">:</span> <span class="token number">70</span>px solid red<span class="token punctuation">;</span>  <span class="token property">position</span><span class="token punctuation">:</span> relative<span class="token punctuation">;</span>  <span class="token property">top</span><span class="token punctuation">:</span> -<span class="token number">50</span>px<span class="token punctuation">;</span>&amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span>#<span class="token property">diamond-narrow</span><span class="token punctuation">:</span>after &amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>  <span class="token property">content</span><span class="token punctuation">:</span> <span class="token string">''</span><span class="token punctuation">;</span>  <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>  <span class="token property">left</span><span class="token punctuation">:</span> -<span class="token number">50</span>px<span class="token punctuation">;</span>  <span class="token property">top</span><span class="token punctuation">:</span> <span class="token number">70</span>px<span class="token punctuation">;</span>  <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token property">border</span><span class="token punctuation">:</span> <span class="token number">50</span>px solid transparent<span class="token punctuation">;</span>  <span class="token property">border-top</span><span class="token punctuation">:</span> <span class="token number">70</span>px solid red<span class="token punctuation">;</span>&amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span></code></pre><h2 id="26-钻石2"><a href="#26-钻石2" class="headerlink" title="26.钻石2"></a>26.钻石2</h2><hr><p><img src="https://image-static.segmentfault.com/959/441/959441160-5cb9694bae7ba_articlex" alt="钻石2"></p><pre class=" language-css"><code class="language-css">#cut-diamond &amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>  <span class="token property">border-style</span><span class="token punctuation">:</span> solid<span class="token punctuation">;</span>  <span class="token property">border-color</span><span class="token punctuation">:</span> transparent transparent red transparent<span class="token punctuation">;</span>  <span class="token property">border-width</span><span class="token punctuation">:</span> <span class="token number">0</span> <span class="token number">25</span>px <span class="token number">25</span>px <span class="token number">25</span>px<span class="token punctuation">;</span>  <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">50</span>px<span class="token punctuation">;</span>  <span class="token property">box-sizing</span><span class="token punctuation">:</span> content-box<span class="token punctuation">;</span>  <span class="token property">position</span><span class="token punctuation">:</span> relative<span class="token punctuation">;</span>  <span class="token property">margin</span><span class="token punctuation">:</span> <span class="token number">20</span>px <span class="token number">0</span> <span class="token number">50</span>px <span class="token number">0</span><span class="token punctuation">;</span>&amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span>#<span class="token property">cut-diamond</span><span class="token punctuation">:</span>after &amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>  <span class="token property">content</span><span class="token punctuation">:</span> <span class="token string">""</span><span class="token punctuation">;</span>  <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>  <span class="token property">top</span><span class="token punctuation">:</span> <span class="token number">25</span>px<span class="token punctuation">;</span>  <span class="token property">left</span><span class="token punctuation">:</span> -<span class="token number">25</span>px<span class="token punctuation">;</span>  <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token property">border-style</span><span class="token punctuation">:</span> solid<span class="token punctuation">;</span>  <span class="token property">border-color</span><span class="token punctuation">:</span> red transparent transparent transparent<span class="token punctuation">;</span>  <span class="token property">border-width</span><span class="token punctuation">:</span> <span class="token number">70</span>px <span class="token number">50</span>px <span class="token number">0</span> <span class="token number">50</span>px<span class="token punctuation">;</span>&amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span></code></pre><h2 id="27-蛋蛋"><a href="#27-蛋蛋" class="headerlink" title="27.蛋蛋"></a>27.蛋蛋</h2><hr><p><img src="https://image-static.segmentfault.com/450/359/450359456-5cb96972355c4_articlex" alt="蛋蛋"></p><pre class=" language-css"><code class="language-css">#egg &amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>  <span class="token property">display</span><span class="token punctuation">:</span> block<span class="token punctuation">;</span>  <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">126</span>px<span class="token punctuation">;</span>  <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">180</span>px<span class="token punctuation">;</span>  <span class="token property">background-color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span>  <span class="token property">border-radius</span><span class="token punctuation">:</span> <span class="token number">50%</span> <span class="token number">50%</span> <span class="token number">50%</span> <span class="token number">50%</span> / <span class="token number">60%</span> <span class="token number">60%</span> <span class="token number">40%</span> <span class="token number">40%</span><span class="token punctuation">;</span>&amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span></code></pre><h2 id="28-吃豆人"><a href="#28-吃豆人" class="headerlink" title="28.吃豆人"></a>28.吃豆人</h2><hr><p><img src="https://image-static.segmentfault.com/921/738/921738237-5cb969a70bd83_articlex" alt="吃豆人"></p><pre class=" language-css"><code class="language-css">#pacman &amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>  <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">0</span>px<span class="token punctuation">;</span>  <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">0</span>px<span class="token punctuation">;</span>  <span class="token property">border-right</span><span class="token punctuation">:</span> <span class="token number">60</span>px solid transparent<span class="token punctuation">;</span>  <span class="token property">border-top</span><span class="token punctuation">:</span> <span class="token number">60</span>px solid red<span class="token punctuation">;</span>  <span class="token property">border-left</span><span class="token punctuation">:</span> <span class="token number">60</span>px solid red<span class="token punctuation">;</span>  <span class="token property">border-bottom</span><span class="token punctuation">:</span> <span class="token number">60</span>px solid red<span class="token punctuation">;</span>  <span class="token property">border-top-left-radius</span><span class="token punctuation">:</span> <span class="token number">60</span>px<span class="token punctuation">;</span>  <span class="token property">border-top-right-radius</span><span class="token punctuation">:</span> <span class="token number">60</span>px<span class="token punctuation">;</span>  <span class="token property">border-bottom-left-radius</span><span class="token punctuation">:</span> <span class="token number">60</span>px<span class="token punctuation">;</span>  <span class="token property">border-bottom-right-radius</span><span class="token punctuation">:</span> <span class="token number">60</span>px<span class="token punctuation">;</span>&amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span></code></pre><h2 id="29-对话泡泡"><a href="#29-对话泡泡" class="headerlink" title="29.对话泡泡"></a>29.对话泡泡</h2><hr><p><img src="https://image-static.segmentfault.com/224/622/2246224062-5cb969cb3d231_articlex" alt="对话泡泡"></p><pre class=" language-css"><code class="language-css">#talkbubble &amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>  <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">120</span>px<span class="token punctuation">;</span>  <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">80</span>px<span class="token punctuation">;</span>  <span class="token property">background</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span>  <span class="token property">position</span><span class="token punctuation">:</span> relative<span class="token punctuation">;</span>  <span class="token property">-moz-border-radius</span><span class="token punctuation">:</span> <span class="token number">10</span>px<span class="token punctuation">;</span>  <span class="token property">-webkit-border-radius</span><span class="token punctuation">:</span> <span class="token number">10</span>px<span class="token punctuation">;</span>  <span class="token property">border-radius</span><span class="token punctuation">:</span> <span class="token number">10</span>px<span class="token punctuation">;</span>&amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span>#<span class="token property">talkbubble</span><span class="token punctuation">:</span>before &amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>  <span class="token property">content</span><span class="token punctuation">:</span> <span class="token string">""</span><span class="token punctuation">;</span>  <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>  <span class="token property">right</span><span class="token punctuation">:</span> <span class="token number">100%</span><span class="token punctuation">;</span>  <span class="token property">top</span><span class="token punctuation">:</span> <span class="token number">26</span>px<span class="token punctuation">;</span>  <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token property">border-top</span><span class="token punctuation">:</span> <span class="token number">13</span>px solid transparent<span class="token punctuation">;</span>  <span class="token property">border-right</span><span class="token punctuation">:</span> <span class="token number">26</span>px solid red<span class="token punctuation">;</span>  <span class="token property">border-bottom</span><span class="token punctuation">:</span> <span class="token number">13</span>px solid transparent<span class="token punctuation">;</span>&amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span></code></pre><h2 id="30-12点-爆发"><a href="#30-12点-爆发" class="headerlink" title="30.12点 爆发"></a>30.12点 爆发</h2><hr><p><img src="https://image-static.segmentfault.com/166/699/1666997214-5cb96a042b082_articlex" alt="12点 爆发"></p><pre class=" language-css"><code class="language-css">#burst-<span class="token number">12</span> &amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>  <span class="token property">background</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span>  <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">80</span>px<span class="token punctuation">;</span>  <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">80</span>px<span class="token punctuation">;</span>  <span class="token property">position</span><span class="token punctuation">:</span> relative<span class="token punctuation">;</span>  <span class="token property">text-align</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>&amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span>#<span class="token property">burst-12</span><span class="token punctuation">:</span>before,#<span class="token property">burst-12</span><span class="token punctuation">:</span>after &amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>  <span class="token property">content</span><span class="token punctuation">:</span> <span class="token string">""</span><span class="token punctuation">;</span>  <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>  <span class="token property">top</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token property">left</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">80</span>px<span class="token punctuation">;</span>  <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">80</span>px<span class="token punctuation">;</span>  <span class="token property">background</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span>&amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span>#<span class="token property">burst-12</span><span class="token punctuation">:</span>before &amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>  <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">rotate</span><span class="token punctuation">(</span><span class="token number">30</span>deg<span class="token punctuation">)</span><span class="token punctuation">;</span>&amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span>#<span class="token property">burst-12</span><span class="token punctuation">:</span>after &amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>  <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">rotate</span><span class="token punctuation">(</span><span class="token number">60</span>deg<span class="token punctuation">)</span><span class="token punctuation">;</span>&amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span></code></pre><h2 id="31-8点-爆发"><a href="#31-8点-爆发" class="headerlink" title="31.8点 爆发"></a>31.8点 爆发</h2><hr><p><img src="https://image-static.segmentfault.com/332/978/3329783574-5cb96b5a62619_articlex" alt="8点 爆发"></p><pre class=" language-css"><code class="language-css">#burst-<span class="token number">8</span> &amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>  <span class="token property">background</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span>  <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">80</span>px<span class="token punctuation">;</span>  <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">80</span>px<span class="token punctuation">;</span>  <span class="token property">position</span><span class="token punctuation">:</span> relative<span class="token punctuation">;</span>  <span class="token property">text-align</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>  <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">rotate</span><span class="token punctuation">(</span><span class="token number">20</span>deg<span class="token punctuation">)</span><span class="token punctuation">;</span>&amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span>#<span class="token property">burst-8</span><span class="token punctuation">:</span>before &amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>  <span class="token property">content</span><span class="token punctuation">:</span> <span class="token string">""</span><span class="token punctuation">;</span>  <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>  <span class="token property">top</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token property">left</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">80</span>px<span class="token punctuation">;</span>  <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">80</span>px<span class="token punctuation">;</span>  <span class="token property">background</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span>  <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">rotate</span><span class="token punctuation">(</span><span class="token number">135</span>deg<span class="token punctuation">)</span><span class="token punctuation">;</span>&amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span></code></pre><h2 id="32-太极"><a href="#32-太极" class="headerlink" title="32.太极"></a>32.太极</h2><hr><p><img src="https://image-static.segmentfault.com/183/101/1831012853-5cb96b75ba1d9_articlex" alt="太极"></p><pre class=" language-css"><code class="language-css">#yin-yang &amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>  <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">96</span>px<span class="token punctuation">;</span>  <span class="token property">box-sizing</span><span class="token punctuation">:</span> content-box<span class="token punctuation">;</span>  <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">48</span>px<span class="token punctuation">;</span>  <span class="token property">background</span><span class="token punctuation">:</span> <span class="token hexcode">#eee</span><span class="token punctuation">;</span>  <span class="token property">border-color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span>  <span class="token property">border-style</span><span class="token punctuation">:</span> solid<span class="token punctuation">;</span>  <span class="token property">border-width</span><span class="token punctuation">:</span> <span class="token number">2</span>px <span class="token number">2</span>px <span class="token number">50</span>px <span class="token number">2</span>px<span class="token punctuation">;</span>  <span class="token property">border-radius</span><span class="token punctuation">:</span> <span class="token number">100%</span><span class="token punctuation">;</span>  <span class="token property">position</span><span class="token punctuation">:</span> relative<span class="token punctuation">;</span>&amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span>#<span class="token property">yin-yang</span><span class="token punctuation">:</span>before &amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>  <span class="token property">content</span><span class="token punctuation">:</span> <span class="token string">""</span><span class="token punctuation">;</span>  <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>  <span class="token property">top</span><span class="token punctuation">:</span> <span class="token number">50%</span><span class="token punctuation">;</span>  <span class="token property">left</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token property">background</span><span class="token punctuation">:</span> <span class="token hexcode">#eee</span><span class="token punctuation">;</span>  <span class="token property">border</span><span class="token punctuation">:</span> <span class="token number">18</span>px solid red<span class="token punctuation">;</span>  <span class="token property">border-radius</span><span class="token punctuation">:</span> <span class="token number">100%</span><span class="token punctuation">;</span>  <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">12</span>px<span class="token punctuation">;</span>  <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">12</span>px<span class="token punctuation">;</span>  <span class="token property">box-sizing</span><span class="token punctuation">:</span> content-box<span class="token punctuation">;</span>&amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span>#<span class="token property">yin-yang</span><span class="token punctuation">:</span>after &amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>  <span class="token property">content</span><span class="token punctuation">:</span> <span class="token string">""</span><span class="token punctuation">;</span>  <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>  <span class="token property">top</span><span class="token punctuation">:</span> <span class="token number">50%</span><span class="token punctuation">;</span>  <span class="token property">left</span><span class="token punctuation">:</span> <span class="token number">50%</span><span class="token punctuation">;</span>  <span class="token property">background</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span>  <span class="token property">border</span><span class="token punctuation">:</span> <span class="token number">18</span>px solid <span class="token hexcode">#eee</span><span class="token punctuation">;</span>  <span class="token property">border-radius</span><span class="token punctuation">:</span> <span class="token number">100%</span><span class="token punctuation">;</span>  <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">12</span>px<span class="token punctuation">;</span>  <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">12</span>px<span class="token punctuation">;</span>  <span class="token property">box-sizing</span><span class="token punctuation">:</span> content-box<span class="token punctuation">;</span>&amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span></code></pre><h2 id="33-徽章丝带"><a href="#33-徽章丝带" class="headerlink" title="33.徽章丝带"></a>33.徽章丝带</h2><hr><p><img src="https://image-static.segmentfault.com/223/358/2233585292-5cb96c8e4db0f_articlex" alt="徽章丝带"></p><pre class=" language-css"><code class="language-css"><span class="token hexcode">#bad</span>ge-ribbon &amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>  <span class="token property">position</span><span class="token punctuation">:</span> relative<span class="token punctuation">;</span>  <span class="token property">background</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span>  <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">100</span>px<span class="token punctuation">;</span>  <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">100</span>px<span class="token punctuation">;</span>  <span class="token property">border-radius</span><span class="token punctuation">:</span> <span class="token number">50</span>px<span class="token punctuation">;</span>&amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span>#<span class="token property">badge-ribbon</span><span class="token punctuation">:</span>before,#<span class="token property">badge-ribbon</span><span class="token punctuation">:</span>after &amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>  <span class="token property">content</span><span class="token punctuation">:</span> <span class="token string">''</span><span class="token punctuation">;</span>  <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>  <span class="token property">border-bottom</span><span class="token punctuation">:</span> <span class="token number">70</span>px solid red<span class="token punctuation">;</span>  <span class="token property">border-left</span><span class="token punctuation">:</span> <span class="token number">40</span>px solid transparent<span class="token punctuation">;</span>  <span class="token property">border-right</span><span class="token punctuation">:</span> <span class="token number">40</span>px solid transparent<span class="token punctuation">;</span>  <span class="token property">top</span><span class="token punctuation">:</span> <span class="token number">70</span>px<span class="token punctuation">;</span>  <span class="token property">left</span><span class="token punctuation">:</span> -<span class="token number">10</span>px<span class="token punctuation">;</span>  <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">rotate</span><span class="token punctuation">(</span>-<span class="token number">140</span>deg<span class="token punctuation">)</span><span class="token punctuation">;</span>&amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span>#<span class="token property">badge-ribbon</span><span class="token punctuation">:</span>after &amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>  <span class="token property">left</span><span class="token punctuation">:</span> auto<span class="token punctuation">;</span>  <span class="token property">right</span><span class="token punctuation">:</span> -<span class="token number">10</span>px<span class="token punctuation">;</span>  <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">rotate</span><span class="token punctuation">(</span><span class="token number">140</span>deg<span class="token punctuation">)</span><span class="token punctuation">;</span>&amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span></code></pre><h2 id="34-太空入侵者-电脑游戏名"><a href="#34-太空入侵者-电脑游戏名" class="headerlink" title="34.太空入侵者(电脑游戏名)"></a>34.太空入侵者(电脑游戏名)</h2><hr><p><img src="https://image-static.segmentfault.com/189/291/1892914985-5cb96cb48ee14_articlex" alt="太空入侵者(电脑游戏名)"></p><pre class=" language-css"><code class="language-css">#space-invader &amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>  <span class="token property">box-shadow</span><span class="token punctuation">:</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">1</span>em red,  <span class="token number">0</span> <span class="token number">1</span>em <span class="token number">0</span> <span class="token number">1</span>em red,  -<span class="token number">2.5</span>em <span class="token number">1.5</span>em <span class="token number">0</span> <span class="token number">.5</span>em red,  <span class="token number">2.5</span>em <span class="token number">1.5</span>em <span class="token number">0</span> <span class="token number">.5</span>em red,  -<span class="token number">3</span>em -<span class="token number">3</span>em <span class="token number">0</span> <span class="token number">0</span> red,  <span class="token number">3</span>em -<span class="token number">3</span>em <span class="token number">0</span> <span class="token number">0</span> red,  -<span class="token number">2</span>em -<span class="token number">2</span>em <span class="token number">0</span> <span class="token number">0</span> red,  <span class="token number">2</span>em -<span class="token number">2</span>em <span class="token number">0</span> <span class="token number">0</span> red,  -<span class="token number">3</span>em -<span class="token number">1</span>em <span class="token number">0</span> <span class="token number">0</span> red,  -<span class="token number">2</span>em -<span class="token number">1</span>em <span class="token number">0</span> <span class="token number">0</span> red,  <span class="token number">2</span>em -<span class="token number">1</span>em <span class="token number">0</span> <span class="token number">0</span> red,  <span class="token number">3</span>em -<span class="token number">1</span>em <span class="token number">0</span> <span class="token number">0</span> red,  -<span class="token number">4</span>em <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> red,  -<span class="token number">3</span>em <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> red,  <span class="token number">3</span>em <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> red,  <span class="token number">4</span>em <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> red,  -<span class="token number">5</span>em <span class="token number">1</span>em <span class="token number">0</span> <span class="token number">0</span> red,  -<span class="token number">4</span>em <span class="token number">1</span>em <span class="token number">0</span> <span class="token number">0</span> red,  <span class="token number">4</span>em <span class="token number">1</span>em <span class="token number">0</span> <span class="token number">0</span> red,  <span class="token number">5</span>em <span class="token number">1</span>em <span class="token number">0</span> <span class="token number">0</span> red,  -<span class="token number">5</span>em <span class="token number">2</span>em <span class="token number">0</span> <span class="token number">0</span> red,  <span class="token number">5</span>em <span class="token number">2</span>em <span class="token number">0</span> <span class="token number">0</span> red,  -<span class="token number">5</span>em <span class="token number">3</span>em <span class="token number">0</span> <span class="token number">0</span> red,  -<span class="token number">3</span>em <span class="token number">3</span>em <span class="token number">0</span> <span class="token number">0</span> red,  <span class="token number">3</span>em <span class="token number">3</span>em <span class="token number">0</span> <span class="token number">0</span> red,  <span class="token number">5</span>em <span class="token number">3</span>em <span class="token number">0</span> <span class="token number">0</span> red,  -<span class="token number">2</span>em <span class="token number">4</span>em <span class="token number">0</span> <span class="token number">0</span> red,  -<span class="token number">1</span>em <span class="token number">4</span>em <span class="token number">0</span> <span class="token number">0</span> red,  <span class="token number">1</span>em <span class="token number">4</span>em <span class="token number">0</span> <span class="token number">0</span> red,  <span class="token number">2</span>em <span class="token number">4</span>em <span class="token number">0</span> <span class="token number">0</span> red<span class="token punctuation">;</span>  <span class="token property">background</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span>  <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">1</span>em<span class="token punctuation">;</span>  <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">1</span>em<span class="token punctuation">;</span>  <span class="token property">overflow</span><span class="token punctuation">:</span> hidden<span class="token punctuation">;</span>  <span class="token property">margin</span><span class="token punctuation">:</span> <span class="token number">50</span>px <span class="token number">0</span> <span class="token number">70</span>px <span class="token number">65</span>px<span class="token punctuation">;</span>&amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span></code></pre><h2 id="35-电视"><a href="#35-电视" class="headerlink" title="35.电视"></a>35.电视</h2><hr><p><img src="https://image-static.segmentfault.com/108/789/1087893413-5cb96ce90362e_articlex" alt="电视"></p><pre class=" language-css"><code class="language-css">#tv &amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>  <span class="token property">position</span><span class="token punctuation">:</span> relative<span class="token punctuation">;</span>  <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">200</span>px<span class="token punctuation">;</span>  <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">150</span>px<span class="token punctuation">;</span>  <span class="token property">margin</span><span class="token punctuation">:</span> <span class="token number">20</span>px <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token property">background</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span>  <span class="token property">border-radius</span><span class="token punctuation">:</span> <span class="token number">50%</span> / <span class="token number">10%</span><span class="token punctuation">;</span>  <span class="token property">color</span><span class="token punctuation">:</span> white<span class="token punctuation">;</span>  <span class="token property">text-align</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>  <span class="token property">text-indent</span><span class="token punctuation">:</span> <span class="token number">.1</span>em<span class="token punctuation">;</span>&amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span>#<span class="token property">tv</span><span class="token punctuation">:</span>before &amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>  <span class="token property">content</span><span class="token punctuation">:</span> <span class="token string">''</span><span class="token punctuation">;</span>  <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>  <span class="token property">top</span><span class="token punctuation">:</span> <span class="token number">10%</span><span class="token punctuation">;</span>  <span class="token property">bottom</span><span class="token punctuation">:</span> <span class="token number">10%</span><span class="token punctuation">;</span>  <span class="token property">right</span><span class="token punctuation">:</span> -<span class="token number">5%</span><span class="token punctuation">;</span>  <span class="token property">left</span><span class="token punctuation">:</span> -<span class="token number">5%</span><span class="token punctuation">;</span>  <span class="token property">background</span><span class="token punctuation">:</span> inherit<span class="token punctuation">;</span>  <span class="token property">border-radius</span><span class="token punctuation">:</span> <span class="token number">5%</span> / <span class="token number">50%</span><span class="token punctuation">;</span>&amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span></code></pre><h2 id="36-雪佛龙"><a href="#36-雪佛龙" class="headerlink" title="36.雪佛龙"></a>36.雪佛龙</h2><hr><p><img src="https://image-static.segmentfault.com/270/471/270471745-5cb96d16dd378_articlex" alt="雪佛龙"></p><pre class=" language-css"><code class="language-css">#chevron &amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>  <span class="token property">position</span><span class="token punctuation">:</span> relative<span class="token punctuation">;</span>  <span class="token property">text-align</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>  <span class="token property">padding</span><span class="token punctuation">:</span> <span class="token number">12</span>px<span class="token punctuation">;</span>  <span class="token property">margin-bottom</span><span class="token punctuation">:</span> <span class="token number">6</span>px<span class="token punctuation">;</span>  <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">60</span>px<span class="token punctuation">;</span>  <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">200</span>px<span class="token punctuation">;</span>&amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span>#<span class="token property">chevron</span><span class="token punctuation">:</span>before &amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>  <span class="token property">content</span><span class="token punctuation">:</span> <span class="token string">''</span><span class="token punctuation">;</span>  <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>  <span class="token property">top</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token property">left</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">100%</span><span class="token punctuation">;</span>  <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">51%</span><span class="token punctuation">;</span>  <span class="token property">background</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span>  <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">skew</span><span class="token punctuation">(</span><span class="token number">0</span>deg, <span class="token number">6</span>deg<span class="token punctuation">)</span><span class="token punctuation">;</span>&amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span>#<span class="token property">chevron</span><span class="token punctuation">:</span>after &amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>  <span class="token property">content</span><span class="token punctuation">:</span> <span class="token string">''</span><span class="token punctuation">;</span>  <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>  <span class="token property">top</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token property">right</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">100%</span><span class="token punctuation">;</span>  <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">50%</span><span class="token punctuation">;</span>  <span class="token property">background</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span>  <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">skew</span><span class="token punctuation">(</span><span class="token number">0</span>deg, -<span class="token number">6</span>deg<span class="token punctuation">)</span><span class="token punctuation">;</span>&amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span></code></pre><h2 id="37-放大镜"><a href="#37-放大镜" class="headerlink" title="37.放大镜"></a>37.放大镜</h2><hr><p><img src="https://image-static.segmentfault.com/249/042/2490424607-5cb96d373d8a3_articlex" alt="放大镜"></p><pre class=" language-css"><code class="language-css">#magnifying-glass &amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>  <span class="token property">font-size</span><span class="token punctuation">:</span> <span class="token number">10</span>em<span class="token punctuation">;</span>  <span class="token property">display</span><span class="token punctuation">:</span> inline-block<span class="token punctuation">;</span>  <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">0.4</span>em<span class="token punctuation">;</span>  <span class="token property">box-sizing</span><span class="token punctuation">:</span> content-box<span class="token punctuation">;</span>  <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">0.4</span>em<span class="token punctuation">;</span>  <span class="token property">border</span><span class="token punctuation">:</span> <span class="token number">0.1</span>em solid red<span class="token punctuation">;</span>  <span class="token property">position</span><span class="token punctuation">:</span> relative<span class="token punctuation">;</span>  <span class="token property">border-radius</span><span class="token punctuation">:</span> <span class="token number">0.35</span>em<span class="token punctuation">;</span>&amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span>#<span class="token property">magnifying-glass</span><span class="token punctuation">:</span>before &amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>  <span class="token property">content</span><span class="token punctuation">:</span> <span class="token string">""</span><span class="token punctuation">;</span>  <span class="token property">display</span><span class="token punctuation">:</span> inline-block<span class="token punctuation">;</span>  <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>  <span class="token property">right</span><span class="token punctuation">:</span> -<span class="token number">0.25</span>em<span class="token punctuation">;</span>  <span class="token property">bottom</span><span class="token punctuation">:</span> -<span class="token number">0.1</span>em<span class="token punctuation">;</span>  <span class="token property">border-width</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token property">background</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span>  <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">0.35</span>em<span class="token punctuation">;</span>  <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">0.08</span>em<span class="token punctuation">;</span>  <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">rotate</span><span class="token punctuation">(</span><span class="token number">45</span>deg<span class="token punctuation">)</span><span class="token punctuation">;</span>&amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span></code></pre><h2 id="38-Facebook图标"><a href="#38-Facebook图标" class="headerlink" title="38.Facebook图标"></a>38.Facebook图标</h2><hr><p><img src="https://image-static.segmentfault.com/266/303/2663038236-5cb96d5d51c04_articlex" alt="Facebook图标"></p><pre class=" language-css"><code class="language-css"><span class="token hexcode">#faceb</span>ook-icon &amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>  <span class="token property">background</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span>  <span class="token property">text-indent</span><span class="token punctuation">:</span> -<span class="token number">999</span>em<span class="token punctuation">;</span>  <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">100</span>px<span class="token punctuation">;</span>  <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">110</span>px<span class="token punctuation">;</span>  <span class="token property">box-sizing</span><span class="token punctuation">:</span> content-box<span class="token punctuation">;</span>  <span class="token property">border-radius</span><span class="token punctuation">:</span> <span class="token number">5</span>px<span class="token punctuation">;</span>  <span class="token property">position</span><span class="token punctuation">:</span> relative<span class="token punctuation">;</span>  <span class="token property">overflow</span><span class="token punctuation">:</span> hidden<span class="token punctuation">;</span>  <span class="token property">border</span><span class="token punctuation">:</span> <span class="token number">15</span>px solid red<span class="token punctuation">;</span>  <span class="token property">border-bottom</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>&amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span>#<span class="token property">facebook-icon</span><span class="token punctuation">:</span>before &amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>  <span class="token property">content</span><span class="token punctuation">:</span> <span class="token string">"/20"</span><span class="token punctuation">;</span>  <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>  <span class="token property">background</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span>  <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">40</span>px<span class="token punctuation">;</span>  <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">90</span>px<span class="token punctuation">;</span>  <span class="token property">bottom</span><span class="token punctuation">:</span> -<span class="token number">30</span>px<span class="token punctuation">;</span>  <span class="token property">right</span><span class="token punctuation">:</span> -<span class="token number">37</span>px<span class="token punctuation">;</span>  <span class="token property">border</span><span class="token punctuation">:</span> <span class="token number">20</span>px solid <span class="token hexcode">#eee</span><span class="token punctuation">;</span>  <span class="token property">border-radius</span><span class="token punctuation">:</span> <span class="token number">25</span>px<span class="token punctuation">;</span>  <span class="token property">box-sizing</span><span class="token punctuation">:</span> content-box<span class="token punctuation">;</span>&amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span>#<span class="token property">facebook-icon</span><span class="token punctuation">:</span>after &amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>  <span class="token property">content</span><span class="token punctuation">:</span> <span class="token string">"/20"</span><span class="token punctuation">;</span>  <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>  <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">55</span>px<span class="token punctuation">;</span>  <span class="token property">top</span><span class="token punctuation">:</span> <span class="token number">50</span>px<span class="token punctuation">;</span>  <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">20</span>px<span class="token punctuation">;</span>  <span class="token property">background</span><span class="token punctuation">:</span> <span class="token hexcode">#eee</span><span class="token punctuation">;</span>  <span class="token property">right</span><span class="token punctuation">:</span> <span class="token number">5</span>px<span class="token punctuation">;</span>  <span class="token property">box-sizing</span><span class="token punctuation">:</span> content-box<span class="token punctuation">;</span>&amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span></code></pre><h2 id="39-月亮"><a href="#39-月亮" class="headerlink" title="39.月亮"></a>39.月亮</h2><hr><p><img src="https://image-static.segmentfault.com/190/008/1900083338-5cb96d88145d3_articlex" alt="月亮"></p><pre class=" language-css"><code class="language-css">#moon &amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>  <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">80</span>px<span class="token punctuation">;</span>  <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">80</span>px<span class="token punctuation">;</span>  <span class="token property">border-radius</span><span class="token punctuation">:</span> <span class="token number">50%</span><span class="token punctuation">;</span>  <span class="token property">box-shadow</span><span class="token punctuation">:</span> <span class="token number">15</span>px <span class="token number">15</span>px <span class="token number">0</span> <span class="token number">0</span> red<span class="token punctuation">;</span>&amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span></code></pre><h2 id="40-旗"><a href="#40-旗" class="headerlink" title="40.旗"></a>40.旗</h2><hr><p><img src="https://image-static.segmentfault.com/144/265/1442659410-5cb96dabef72a_articlex" alt="旗"></p><pre class=" language-css"><code class="language-css">#flag &amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>  <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">110</span>px<span class="token punctuation">;</span>  <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">56</span>px<span class="token punctuation">;</span>  <span class="token property">box-sizing</span><span class="token punctuation">:</span> content-box<span class="token punctuation">;</span>  <span class="token property">padding-top</span><span class="token punctuation">:</span> <span class="token number">15</span>px<span class="token punctuation">;</span>  <span class="token property">position</span><span class="token punctuation">:</span> relative<span class="token punctuation">;</span>  <span class="token property">background</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span>  <span class="token property">color</span><span class="token punctuation">:</span> white<span class="token punctuation">;</span>  <span class="token property">font-size</span><span class="token punctuation">:</span> <span class="token number">11</span>px<span class="token punctuation">;</span>  <span class="token property">letter-spacing</span><span class="token punctuation">:</span> <span class="token number">0.2</span>em<span class="token punctuation">;</span>  <span class="token property">text-align</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>  <span class="token property">text-transform</span><span class="token punctuation">:</span> uppercase<span class="token punctuation">;</span>&amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span>#<span class="token property">flag</span><span class="token punctuation">:</span>after &amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>  <span class="token property">content</span><span class="token punctuation">:</span> <span class="token string">""</span><span class="token punctuation">;</span>  <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>  <span class="token property">left</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token property">bottom</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token property">border-bottom</span><span class="token punctuation">:</span> <span class="token number">13</span>px solid <span class="token hexcode">#eee</span><span class="token punctuation">;</span>  <span class="token property">border-left</span><span class="token punctuation">:</span> <span class="token number">55</span>px solid transparent<span class="token punctuation">;</span>  <span class="token property">border-right</span><span class="token punctuation">:</span> <span class="token number">55</span>px solid transparent<span class="token punctuation">;</span>&amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span></code></pre><h2 id="41-圆锥"><a href="#41-圆锥" class="headerlink" title="41.圆锥"></a>41.圆锥</h2><hr><p><img src="https://image-static.segmentfault.com/313/905/3139051416-5cb96dcec776e_articlex" alt="圆锥"></p><pre class=" language-css"><code class="language-css">#cone &amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>  <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token property">border-left</span><span class="token punctuation">:</span> <span class="token number">70</span>px solid transparent<span class="token punctuation">;</span>  <span class="token property">border-right</span><span class="token punctuation">:</span> <span class="token number">70</span>px solid transparent<span class="token punctuation">;</span>  <span class="token property">border-top</span><span class="token punctuation">:</span> <span class="token number">100</span>px solid red<span class="token punctuation">;</span>  <span class="token property">border-radius</span><span class="token punctuation">:</span> <span class="token number">50%</span><span class="token punctuation">;</span>&amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span></code></pre><h2 id="42-十字架"><a href="#42-十字架" class="headerlink" title="42.十字架"></a>42.十字架</h2><hr><p><img src="https://image-static.segmentfault.com/405/126/4051268922-5cb96deb45da7_articlex" alt="十字架"></p><pre class=" language-css"><code class="language-css">#cross &amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>  <span class="token property">background</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span>  <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">100</span>px<span class="token punctuation">;</span>  <span class="token property">position</span><span class="token punctuation">:</span> relative<span class="token punctuation">;</span>  <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">20</span>px<span class="token punctuation">;</span>&amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span>#<span class="token property">cross</span><span class="token punctuation">:</span>after &amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>  <span class="token property">background</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span>  <span class="token property">content</span><span class="token punctuation">:</span> <span class="token string">""</span><span class="token punctuation">;</span>  <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">20</span>px<span class="token punctuation">;</span>  <span class="token property">left</span><span class="token punctuation">:</span> -<span class="token number">40</span>px<span class="token punctuation">;</span>  <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>  <span class="token property">top</span><span class="token punctuation">:</span> <span class="token number">40</span>px<span class="token punctuation">;</span>  <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">100</span>px<span class="token punctuation">;</span>&amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span></code></pre><h2 id="43-根基"><a href="#43-根基" class="headerlink" title="43.根基"></a>43.根基</h2><hr><p><img src="https://image-static.segmentfault.com/222/064/2220648895-5cb96e0feb1b9_articlex" alt="根基"></p><pre class=" language-css"><code class="language-css">#base &amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>  <span class="token property">background</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span>  <span class="token property">display</span><span class="token punctuation">:</span> inline-block<span class="token punctuation">;</span>  <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">55</span>px<span class="token punctuation">;</span>  <span class="token property">margin-left</span><span class="token punctuation">:</span> <span class="token number">20</span>px<span class="token punctuation">;</span>  <span class="token property">margin-top</span><span class="token punctuation">:</span> <span class="token number">55</span>px<span class="token punctuation">;</span>  <span class="token property">position</span><span class="token punctuation">:</span> relative<span class="token punctuation">;</span>  <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">100</span>px<span class="token punctuation">;</span>&amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span>#<span class="token property">base</span><span class="token punctuation">:</span>before &amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>  <span class="token property">border-bottom</span><span class="token punctuation">:</span> <span class="token number">35</span>px solid red<span class="token punctuation">;</span>  <span class="token property">border-left</span><span class="token punctuation">:</span> <span class="token number">50</span>px solid transparent<span class="token punctuation">;</span>  <span class="token property">border-right</span><span class="token punctuation">:</span> <span class="token number">50</span>px solid transparent<span class="token punctuation">;</span>  <span class="token property">content</span><span class="token punctuation">:</span> <span class="token string">""</span><span class="token punctuation">;</span>  <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token property">left</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>  <span class="token property">top</span><span class="token punctuation">:</span> -<span class="token number">35</span>px<span class="token punctuation">;</span>  <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span></code></pre><h2 id="44-指示器"><a href="#44-指示器" class="headerlink" title="44.指示器"></a>44.指示器</h2><hr><p><img src="https://image-static.segmentfault.com/428/037/4280372318-5cb96e2d32c4e_articlex" alt="指示器"></p><pre class=" language-css"><code class="language-css">#pointer &amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>  <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">200</span>px<span class="token punctuation">;</span>  <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">40</span>px<span class="token punctuation">;</span>  <span class="token property">position</span><span class="token punctuation">:</span> relative<span class="token punctuation">;</span>  <span class="token property">background</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span>&amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span>#<span class="token property">pointer</span><span class="token punctuation">:</span>after &amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>  <span class="token property">content</span><span class="token punctuation">:</span> <span class="token string">""</span><span class="token punctuation">;</span>  <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>  <span class="token property">left</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token property">bottom</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token property">border-left</span><span class="token punctuation">:</span> <span class="token number">20</span>px solid white<span class="token punctuation">;</span>  <span class="token property">border-top</span><span class="token punctuation">:</span> <span class="token number">20</span>px solid transparent<span class="token punctuation">;</span>  <span class="token property">border-bottom</span><span class="token punctuation">:</span> <span class="token number">20</span>px solid transparent<span class="token punctuation">;</span>&amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span>#<span class="token property">pointer</span><span class="token punctuation">:</span>before &amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>  <span class="token property">content</span><span class="token punctuation">:</span> <span class="token string">""</span><span class="token punctuation">;</span>  <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>  <span class="token property">right</span><span class="token punctuation">:</span> -<span class="token number">20</span>px<span class="token punctuation">;</span>  <span class="token property">bottom</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token property">border-left</span><span class="token punctuation">:</span> <span class="token number">20</span>px solid red<span class="token punctuation">;</span>  <span class="token property">border-top</span><span class="token punctuation">:</span> <span class="token number">20</span>px solid transparent<span class="token punctuation">;</span>  <span class="token property">border-bottom</span><span class="token punctuation">:</span> <span class="token number">20</span>px solid transparent<span class="token punctuation">;</span>&amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span></code></pre><h2 id="45-锁"><a href="#45-锁" class="headerlink" title="45.锁"></a>45.锁</h2><hr><p><img src="https://image-static.segmentfault.com/151/414/151414238-5cb96e944c548_articlex" alt="锁"></p><pre class=" language-css"><code class="language-css">#lock &amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>  <span class="token property">font-size</span><span class="token punctuation">:</span> <span class="token number">8</span>px<span class="token punctuation">;</span>  <span class="token property">position</span><span class="token punctuation">:</span> relative<span class="token punctuation">;</span>  <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">18</span>em<span class="token punctuation">;</span>  <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">13</span>em<span class="token punctuation">;</span>  <span class="token property">border-radius</span><span class="token punctuation">:</span> <span class="token number">2</span>em<span class="token punctuation">;</span>  <span class="token property">top</span><span class="token punctuation">:</span> <span class="token number">10</span>em<span class="token punctuation">;</span>  <span class="token property">box-sizing</span><span class="token punctuation">:</span> border-box<span class="token punctuation">;</span>  <span class="token property">border</span><span class="token punctuation">:</span> <span class="token number">3.5</span>em solid red<span class="token punctuation">;</span>  <span class="token property">border-right-width</span><span class="token punctuation">:</span> <span class="token number">7.5</span>em<span class="token punctuation">;</span>  <span class="token property">border-left-width</span><span class="token punctuation">:</span> <span class="token number">7.5</span>em<span class="token punctuation">;</span>  <span class="token property">margin</span><span class="token punctuation">:</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">6</span>rem <span class="token number">0</span><span class="token punctuation">;</span>&amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span>#<span class="token property">lock</span><span class="token punctuation">:</span>before &amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>  <span class="token property">content</span><span class="token punctuation">:</span> <span class="token string">""</span><span class="token punctuation">;</span>  <span class="token property">box-sizing</span><span class="token punctuation">:</span> border-box<span class="token punctuation">;</span>  <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>  <span class="token property">border</span><span class="token punctuation">:</span> <span class="token number">2.5</span>em solid red<span class="token punctuation">;</span>  <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">14</span>em<span class="token punctuation">;</span>  <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">12</span>em<span class="token punctuation">;</span>  <span class="token property">left</span><span class="token punctuation">:</span> <span class="token number">50%</span><span class="token punctuation">;</span>  <span class="token property">margin-left</span><span class="token punctuation">:</span> -<span class="token number">7</span>em<span class="token punctuation">;</span>  <span class="token property">top</span><span class="token punctuation">:</span> -<span class="token number">12</span>em<span class="token punctuation">;</span>  <span class="token property">border-top-left-radius</span><span class="token punctuation">:</span> <span class="token number">7</span>em<span class="token punctuation">;</span>  <span class="token property">border-top-right-radius</span><span class="token punctuation">:</span> <span class="token number">7</span>em<span class="token punctuation">;</span>&amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span>#<span class="token property">lock</span><span class="token punctuation">:</span>after &amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>  <span class="token property">content</span><span class="token punctuation">:</span> <span class="token string">""</span><span class="token punctuation">;</span>  <span class="token property">box-sizing</span><span class="token punctuation">:</span> border-box<span class="token punctuation">;</span>  <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>  <span class="token property">border</span><span class="token punctuation">:</span> <span class="token number">1</span>em solid red<span class="token punctuation">;</span>  <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">5</span>em<span class="token punctuation">;</span>  <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">8</span>em<span class="token punctuation">;</span>  <span class="token property">border-radius</span><span class="token punctuation">:</span> <span class="token number">2.5</span>em<span class="token punctuation">;</span>  <span class="token property">left</span><span class="token punctuation">:</span> <span class="token number">50%</span><span class="token punctuation">;</span>  <span class="token property">top</span><span class="token punctuation">:</span> -<span class="token number">1</span>em<span class="token punctuation">;</span>  <span class="token property">margin-left</span><span class="token punctuation">:</span> -<span class="token number">2.5</span>em<span class="token punctuation">;</span>&amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span></code></pre><p>原文: <a href="https://css-tricks.com/the-shapes-of-css/">https://css-tricks.com/the-shapes-of-css/</a></p>]]></content>
      
      
      <categories>
          
          <category> CSS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSS </tag>
            
            <tag> 前端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>贪吃蛇源码</title>
      <link href="2020/11/05/tan-chi-she-yuan-ma/"/>
      <url>2020/11/05/tan-chi-she-yuan-ma/</url>
      
        <content type="html"><![CDATA[<h2 id="贪吃蛇源码"><a href="#贪吃蛇源码" class="headerlink" title="贪吃蛇源码"></a>贪吃蛇源码</h2><h3 id="body部分"><a href="#body部分" class="headerlink" title="body部分"></a>body部分</h3><pre class=" language-html"><code class="language-html"> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>wrap<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>贪吃蛇游戏<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>      <span class="token comment" spellcheck="true">&lt;!-- 记录吃了多少个蛋 --></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">font-size</span><span class="token punctuation">:</span><span class="token number">20</span>px<span class="token punctuation">;</span><span class="token property">color</span><span class="token punctuation">:</span>red</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span> score:<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>score<span class="token punctuation">"</span></span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">color</span><span class="token punctuation">:</span>black</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>      <span class="token comment" spellcheck="true">&lt;!-- 暂停按钮 --></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Pause<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Pause<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token comment" spellcheck="true">&lt;!-- 开始按钮 --></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Start<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Start<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token comment" spellcheck="true">&lt;!-- 刷新(重新开始游戏) --></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Refresh<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Refresh<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token comment" spellcheck="true">&lt;!-- 加速按钮 --></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Speed<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Speed<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token comment" spellcheck="true">&lt;!-- 贪吃蛇的行走路径地图 --></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>snake_map<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span></code></pre><h3 id="style样式部分"><a href="#style样式部分" class="headerlink" title="style样式部分"></a>style样式部分</h3><pre class=" language-css"><code class="language-css">&lt;style media=<span class="token string">"screen"</span>>      * &amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>        <span class="token property">margin</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token property">padding</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>      &amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span>      <span class="token number">.</span>wrap &amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>        <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">600</span>px<span class="token punctuation">;</span>        <span class="token property">margin</span><span class="token punctuation">:</span> <span class="token number">0</span> auto<span class="token punctuation">;</span>        <span class="token property">position</span><span class="token punctuation">:</span> relative<span class="token punctuation">;</span>      &amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span>      p &amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>        <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>        <span class="token property">left</span><span class="token punctuation">:</span> <span class="token number">65%</span><span class="token punctuation">;</span>        <span class="token property">top</span><span class="token punctuation">:</span> <span class="token number">10%</span><span class="token punctuation">;</span>      &amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span>      h<span class="token number">1</span> &amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>        <span class="token property">text-align</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>        <span class="token property">margin-bottom</span><span class="token punctuation">:</span> <span class="token number">20</span>px<span class="token punctuation">;</span>      &amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span>      #score &amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>        <span class="token property">text-align</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>        <span class="token property">font-size</span><span class="token punctuation">:</span> <span class="token number">20</span>px<span class="token punctuation">;</span>      &amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span>      #snake_map &amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>        <span class="token property">margin</span><span class="token punctuation">:</span> <span class="token number">0</span> auto<span class="token punctuation">;</span>        <span class="token property">border</span><span class="token punctuation">:</span> <span class="token number">1</span>px solid skyblue<span class="token punctuation">;</span>      &amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">/*行样式*/</span>      <span class="token number">.</span>row &amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>        <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">20</span>px<span class="token punctuation">;</span>      &amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">/*列样式*/</span>      <span class="token number">.</span>col &amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>        <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">20</span>px<span class="token punctuation">;</span>        <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">20</span>px<span class="token punctuation">;</span>        <span class="token property">box-sizing</span><span class="token punctuation">:</span> border-box<span class="token punctuation">;</span>        <span class="token property">border</span><span class="token punctuation">:</span> <span class="token number">1</span>px solid lightgray<span class="token punctuation">;</span>        <span class="token property">background</span><span class="token punctuation">:</span> <span class="token function">rgb</span><span class="token punctuation">(</span><span class="token number">250</span>, <span class="token number">250</span>, <span class="token number">250</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token property">float</span><span class="token punctuation">:</span> left<span class="token punctuation">;</span>      &amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span>      <span class="token number">.</span>activeSnake &amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>        <span class="token property">background</span><span class="token punctuation">:</span> black<span class="token punctuation">;</span>      &amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span>      <span class="token number">.</span>egg &amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>        <span class="token property">background</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span>      &amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span>      #Pause &amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>        <span class="token property">margin-left</span><span class="token punctuation">:</span> <span class="token number">18%</span><span class="token punctuation">;</span>        <span class="token property">border</span><span class="token punctuation">:</span> <span class="token number">1</span>px solid skyblue<span class="token punctuation">;</span>        <span class="token property">color</span><span class="token punctuation">:</span> white<span class="token punctuation">;</span>        <span class="token property">background</span><span class="token punctuation">:</span> skyblue<span class="token punctuation">;</span>        <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">50</span>px<span class="token punctuation">;</span>        <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">30</span>px<span class="token punctuation">;</span>        <span class="token property">margin-bottom</span><span class="token punctuation">:</span> <span class="token number">10</span>px<span class="token punctuation">;</span>        <span class="token property">border-radius</span><span class="token punctuation">:</span> <span class="token number">5</span>px<span class="token punctuation">;</span>      &amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span>      #Start ,  #Refresh, #Speed&amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>        <span class="token property">border</span><span class="token punctuation">:</span> <span class="token number">1</span>px solid skyblue<span class="token punctuation">;</span>        <span class="token property">background</span><span class="token punctuation">:</span> skyblue<span class="token punctuation">;</span>        <span class="token property">color</span><span class="token punctuation">:</span> white<span class="token punctuation">;</span>        <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">50</span>px<span class="token punctuation">;</span>        <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">30</span>px<span class="token punctuation">;</span>        <span class="token property">border-radius</span><span class="token punctuation">:</span> <span class="token number">5</span>px<span class="token punctuation">;</span>        <span class="token property">margin-left</span><span class="token punctuation">:</span> <span class="token number">15</span>px<span class="token punctuation">;</span>      &amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span>    &lt;/style></code></pre><h3 id="javasript部分"><a href="#javasript部分" class="headerlink" title="javasript部分"></a>javasript部分</h3><pre class=" language-js"><code class="language-js"><span class="token operator">&lt;</span>script type<span class="token operator">=</span><span class="token string">"text/javascript"</span><span class="token operator">></span>    <span class="token comment" spellcheck="true">//获取分数标签</span>    <span class="token keyword">var</span> score <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'score'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//获取路径地图标签</span>    <span class="token keyword">var</span> map <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'snake_map'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//为了灵活的设置地图的大小,以下设置两个变量</span>    <span class="token comment" spellcheck="true">//用于存储行数和列数(即方格的个数)</span>    <span class="token keyword">var</span> rowNumber <span class="token operator">=</span> <span class="token number">25</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//行数</span>    <span class="token keyword">var</span> columnNumber <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//列数;</span>    <span class="token keyword">var</span> mapWidth <span class="token operator">=</span> columnNumber <span class="token operator">*</span> <span class="token number">20</span> <span class="token operator">+</span><span class="token string">'px'</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//地图的宽</span>    <span class="token keyword">var</span> mapHeight <span class="token operator">=</span> rowNumber <span class="token operator">*</span> <span class="token number">20</span> <span class="token operator">+</span><span class="token string">'px'</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//地图的高</span>    map<span class="token punctuation">.</span>style<span class="token punctuation">.</span>width <span class="token operator">=</span> mapWidth<span class="token punctuation">;</span>    map<span class="token punctuation">.</span>style<span class="token punctuation">.</span>height <span class="token operator">=</span> mapHeight<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//设置地图宽高</span>    <span class="token comment" spellcheck="true">//创建一个二维数组,用来记录地图上的所有div的位置</span>    <span class="token keyword">var</span> snakeDIVPosition <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//通过双层for循环来创建地图元素</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> rowNumber<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//创建行div</span>      <span class="token keyword">var</span> rowDIV <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//设置div样式</span>      rowDIV<span class="token punctuation">.</span>className <span class="token operator">=</span> <span class="token string">'row'</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//将行div添加到路径地图map中</span>      map<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>rowDIV<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//创建一个行级数组,用来存储当前行中的每个方块div</span>      <span class="token keyword">var</span> rowArray <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> columnNumber<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//创建每一行中的方块div</span>        <span class="token keyword">var</span> columnDIV <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//设置css样式</span>        columnDIV<span class="token punctuation">.</span>className <span class="token operator">=</span> <span class="token string">'col'</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//将方块DIV添加到当前行中</span>        rowDIV<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>columnDIV<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//同时将方块添加到行数组中</span>        rowArray<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>columnDIV<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//当前内层循环结束,将行数组添加到二维数组中</span>      snakeDIVPosition<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>rowArray<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//创建蛇模型</span>    <span class="token comment" spellcheck="true">//创建一个一维数组,用来存储蛇身所占的div</span>    <span class="token keyword">var</span> snake <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//固定蛇身起始长度为3个div</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//为蛇身设置不同颜色的div</span>      snakeDIVPosition<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>className <span class="token operator">=</span> <span class="token string">'col activeSnake'</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//存储在蛇身数组中</span>      snake<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> snakeDIVPosition<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//定义变量来控制蛇</span>    <span class="token keyword">var</span> x <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> y <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//蛇头的起始位置偏移量</span>    <span class="token keyword">var</span> scoreCount <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//分数计数器,即吃了多少个蛋</span>    <span class="token keyword">var</span> eggX <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//记录蛋所在的行位置</span>    <span class="token keyword">var</span> eggY <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//记录蛋所在的列位置;</span>    <span class="token keyword">var</span> direction <span class="token operator">=</span> <span class="token string">'right'</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//记录蛇移动的方向,初始为向右</span>    <span class="token keyword">var</span> changeDir <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//判断是否需要改变蛇的移动方向</span>    <span class="token keyword">var</span> delayTimer <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//延迟定时器</span>    <span class="token comment" spellcheck="true">//添加键盘事件监听方向键来改变蛇的移动方向</span>    document<span class="token punctuation">.</span>onkeydown <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//先判断是否需要改变方向,true表示需要,false表示不需要</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>changeDir<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//return空表示直接结束函数,后续代码不执行</span>      <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>      event <span class="token operator">=</span> event <span class="token operator">||</span> window<span class="token punctuation">.</span>event<span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//为了合理处理蛇的移动,需要判断蛇头和蛇身</span>      <span class="token comment" spellcheck="true">//假设蛇向右移动,点方向键左,右键都不需要做出响应</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>direction <span class="token operator">==</span> <span class="token string">'right'</span> <span class="token operator">&amp;&amp;</span> event<span class="token punctuation">.</span>keyCode <span class="token operator">==</span> <span class="token number">37</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//终止事件执行</span>      <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>direction <span class="token operator">==</span> <span class="token string">'left'</span> <span class="token operator">&amp;&amp;</span> event<span class="token punctuation">.</span>keyCode <span class="token operator">==</span> <span class="token number">39</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>      <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>direction <span class="token operator">==</span> <span class="token string">'up'</span> <span class="token operator">&amp;&amp;</span> event<span class="token punctuation">.</span>keyCode <span class="token operator">==</span> <span class="token number">40</span> <span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>      <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>direction <span class="token operator">==</span> <span class="token string">'down'</span> <span class="token operator">&amp;&amp;</span> event<span class="token punctuation">.</span>keyCode <span class="token operator">==</span> <span class="token number">38</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>          <span class="token keyword">return</span><span class="token punctuation">;</span>      <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//我们通过keyCode确定蛇要移动的方向</span>      <span class="token keyword">switch</span> <span class="token punctuation">(</span>event<span class="token punctuation">.</span>keyCode<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token number">37</span><span class="token punctuation">:</span>          direction <span class="token operator">=</span> <span class="token string">'left'</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//向左</span>          <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token number">38</span><span class="token punctuation">:</span>          direction <span class="token operator">=</span> <span class="token string">'up'</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//向上;</span>          <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token number">39</span><span class="token punctuation">:</span>          direction <span class="token operator">=</span> <span class="token string">'right'</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//向右</span>          <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token number">40</span><span class="token punctuation">:</span>          direction <span class="token operator">=</span> <span class="token string">'down'</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//向下</span>          <span class="token keyword">break</span><span class="token punctuation">;</span>      <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>      changeDir <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>      delayTimer <span class="token operator">=</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//设置是否需要改变方向</span>        changeDir <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>      <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span><span class="token number">300</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 开始设置蛇移动逻辑</span>    <span class="token comment" spellcheck="true">//蛇移动函数</span>    <span class="token keyword">function</span> <span class="token function">snakeMove</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//根据上面设置的方向来设置蛇头的位置</span>      <span class="token keyword">switch</span> <span class="token punctuation">(</span>direction<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token string">'left'</span><span class="token punctuation">:</span>          x<span class="token operator">--</span><span class="token punctuation">;</span>          <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token string">'right'</span><span class="token punctuation">:</span>          x<span class="token operator">++</span><span class="token punctuation">;</span>          <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token string">'up'</span><span class="token punctuation">:</span>          y<span class="token operator">--</span><span class="token punctuation">;</span>          <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token string">'down'</span><span class="token punctuation">:</span>          y<span class="token operator">++</span><span class="token punctuation">;</span>          <span class="token keyword">break</span><span class="token punctuation">;</span>      <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//判断是否游戏结束</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>x <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span> y <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span> x <span class="token operator">>=</span> columnNumber <span class="token operator">||</span> y <span class="token operator">>=</span> rowNumber<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'Game Over!!!'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 结束蛇移动的定时器</span>        <span class="token function">clearInterval</span><span class="token punctuation">(</span>moveTimer<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//终止键盘事件;</span>      <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//如果蛇吃到自己,也要结束游戏</span>      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> snake<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//将此时蛇头移动后的位置与之前左右的组成蛇的div的位置进行比较,如果相同则说明吃到自己,游戏结束</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>snake<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> snakeDIVPosition<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>          <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'Game over!!!'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token function">clearInterval</span><span class="token punctuation">(</span>moveTimer<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>      <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//判断蛇头移动的位置是否有蛋</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>eggX <span class="token operator">==</span> x <span class="token operator">&amp;&amp;</span> eggY <span class="token operator">==</span> y<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        snakeDIVPosition<span class="token punctuation">[</span>eggY<span class="token punctuation">]</span><span class="token punctuation">[</span>eggX<span class="token punctuation">]</span><span class="token punctuation">.</span>className <span class="token operator">=</span> <span class="token string">'col activeSnake'</span><span class="token punctuation">;</span>        snake<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>snakeDIVPosition<span class="token punctuation">[</span>eggY<span class="token punctuation">]</span><span class="token punctuation">[</span>eggX<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//加入蛇身</span>        scoreCount<span class="token operator">++</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//记录分数</span>        <span class="token comment" spellcheck="true">//更新当前的分数</span>        score<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> scoreCount<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//随机产生一个新的蛋</span>        <span class="token function">createNewEgg</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">else</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//设置蛇碰不到蛋的逻辑</span>        <span class="token comment" spellcheck="true">//让蛇移动</span>        <span class="token comment" spellcheck="true">//蛇尾去掉蛇自身的颜色,变成格子的颜色</span>        snake<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>className <span class="token operator">=</span> <span class="token string">'col'</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//将蛇尾div从数组中移除</span>        snake<span class="token punctuation">.</span><span class="token function">shift</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//定位到的新的蛇头加入到蛇数组中</span>        snakeDIVPosition<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">.</span>className <span class="token operator">=</span> <span class="token string">'col activeSnake'</span><span class="token punctuation">;</span>        snake<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>snakeDIVPosition<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> moveTimer <span class="token operator">=</span> <span class="token function">setInterval</span><span class="token punctuation">(</span><span class="token string">'snakeMove()'</span><span class="token punctuation">,</span><span class="token number">300</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//定义一个生成min,max之间的随机数函数</span>    <span class="token keyword">function</span> <span class="token function">random</span><span class="token punctuation">(</span>min<span class="token punctuation">,</span>max<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span>max <span class="token operator">-</span> min <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> min<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">function</span> <span class="token function">createNewEgg</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// 随机出新的egg的下标的x和y值</span>      eggX <span class="token operator">=</span> <span class="token function">random</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>columnNumber <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      eggY <span class="token operator">=</span> <span class="token function">random</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>rowNumber <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//判断如果随机产生的蛋与蛇身重合,就重新随机产生一个蛋</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>snakeDIVPosition<span class="token punctuation">[</span>eggY<span class="token punctuation">]</span><span class="token punctuation">[</span>eggX<span class="token punctuation">]</span><span class="token punctuation">.</span>className <span class="token operator">==</span> <span class="token string">'col activeSnake'</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token function">createNewEgg</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//重新随机新的egg</span>      <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">else</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        snakeDIVPosition<span class="token punctuation">[</span>eggY<span class="token punctuation">]</span><span class="token punctuation">[</span>eggX<span class="token punctuation">]</span><span class="token punctuation">.</span>className <span class="token operator">=</span> <span class="token string">'col egg'</span><span class="token punctuation">;</span>      <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token function">createNewEgg</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//在游戏开始的时候生成新的egg</span>    <span class="token keyword">var</span> pause <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'Pause'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> start <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'Start'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> refresh <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'Refresh'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> speed <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'Speed'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//添加暂停按钮</span>    pause<span class="token punctuation">.</span>onclick <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      <span class="token function">clearInterval</span><span class="token punctuation">(</span>moveTimer<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//添加开始按钮</span>    start<span class="token punctuation">.</span>onclick <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      <span class="token function">clearInterval</span><span class="token punctuation">(</span>moveTimer<span class="token punctuation">)</span><span class="token punctuation">;</span>      moveTimer <span class="token operator">=</span> <span class="token function">setInterval</span><span class="token punctuation">(</span><span class="token string">'snakeMove()'</span><span class="token punctuation">,</span>speed1<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//添加刷新按钮</span>    refresh<span class="token punctuation">.</span>onclick <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      window<span class="token punctuation">.</span>location<span class="token punctuation">.</span><span class="token function">reload</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//添加加速按钮</span>    <span class="token keyword">var</span> speed1 <span class="token operator">=</span> <span class="token number">300</span><span class="token punctuation">;</span>    speed<span class="token punctuation">.</span>onclick <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      speed1 <span class="token operator">-</span><span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>      <span class="token function">clearInterval</span><span class="token punctuation">(</span>moveTimer<span class="token punctuation">)</span><span class="token punctuation">;</span>      moveTimer <span class="token operator">=</span> <span class="token function">setInterval</span><span class="token punctuation">(</span><span class="token string">'snakeMove()'</span><span class="token punctuation">,</span>speed1<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>  <span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 源码 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> html5 </tag>
            
            <tag> 源码 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>重绘重排理解与优化</title>
      <link href="2020/11/04/chong-hui-chong-pai-li-jie-yu-you-hua/"/>
      <url>2020/11/04/chong-hui-chong-pai-li-jie-yu-you-hua/</url>
      
        <content type="html"><![CDATA[<h2 id="重绘"><a href="#重绘" class="headerlink" title="重绘"></a>重绘</h2><ul><li><p>当盒子的位置、大小以及其他属性，例如颜色、字体大小等都确定下来之后，浏览器便把这些原色都按照各自的特性绘制一遍，将内容呈现在页面上。重绘是指一个元素外观的改变所触发的浏览器行为，浏览器会根据元素的新属性重新绘制，使元素呈现新的外观。</p></li><li><p>触发重绘的条件：改变元素外观属性。如：color，background-color，font-size等。</p></li></ul><h2 id="重排-回流"><a href="#重排-回流" class="headerlink" title="重排(回流)"></a>重排(回流)</h2><ul><li><p>当渲染树中的一部分(或全部)因为元素的规模尺寸，布局，隐藏等改变而需要重新构建, 这就称为回流(reflow)。每个页面至少需要一次回流，就是在页面第一次加载的时候。</p></li><li><p>重绘和重排的关系：在回流的时候，浏览器会使渲染树中受到影响的部分失效，并重新构造这部分渲染树，完成回流后，浏览器会重新绘制受影响的部分到屏幕中，该过程称为重绘。</p></li><li><p>所以，重排必定会引发重绘，但重绘不一定会引发重排。</p></li><li><p>触发重排的条件：任何页面布局和几何属性的改变都会触发重排</p></li></ul><p>比如:</p><ul><li>页面渲染初始化；(无法避免)</li><li>添加或删除可见的DOM元素；</li><li>元素位置的改变，或者使用动画；</li><li>元素尺寸的改变——大小，外边距，边框；</li><li>浏览器窗口尺寸的变化（resize事件发生时）；</li><li>填充内容的改变，比如文本的改变或图片大小改变而引起的计算值宽度和高度的改变；</li></ul><p>触发重排的条件：改变元素的大小 位置 等如：width、height、padding、margin、position等，　添加删除DOM操作等</p><p><strong>重绘重排的代价：耗时，导致浏览器卡慢。</strong></p><h2 id="优化"><a href="#优化" class="headerlink" title="优化"></a>优化</h2><ul><li><p>浏览器自己的优化：浏览器会维护1个队列，把所有会引起回流、重绘的操作放入这个队列，等队列中的操作到了一定的数量或者到了一定的时间间隔，浏览器就会flush队列，进行一个批处理。这样就会让多次的回流、重绘变成一次回流重绘。</p></li><li><p>我们要注意的优化：我们要减少重绘和重排就是要减少对渲染树的操作，则我们可以合并多次的DOM和样式的修改。并减少对style样式的请求。</p></li></ul><ol><li><p>直接改变元素的className</p></li><li><p>display：none；先设置元素为display：none；然后进行页面布局等操作；设置完成后将元素设置为display：block；这样的话就只引发两次重绘和重排；</p></li><li><p>不要经常访问浏览器的flush队列属性；如果一定要访问，可以利用缓存。将访问的值存储起来，接下来使用就不会再引发回流；</p></li><li><p>使用cloneNode(true or false) 和 replaceChild 技术，引发一次回流和重绘；</p></li><li><p>将需要多次重排的元素，position属性设为absolute或fixed，元素脱离了文档流，它的变化不会影响到其他元素；</p></li><li><p>如果需要创建多个DOM节点，可以使用DocumentFragment创建完后一次性的加入document；</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> html5 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> html5 </tag>
            
            <tag> 重绘 </tag>
            
            <tag> 重排 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前端面试题</title>
      <link href="2020/11/04/qian-duan-mian-shi-ti-di-yi-tao-jie-xi/"/>
      <url>2020/11/04/qian-duan-mian-shi-ti-di-yi-tao-jie-xi/</url>
      
        <content type="html"><![CDATA[<h2 id="前端面试题"><a href="#前端面试题" class="headerlink" title="前端面试题"></a>前端面试题</h2><h3 id="1、盒子塌陷的原因？解决方式"><a href="#1、盒子塌陷的原因？解决方式" class="headerlink" title="1、盒子塌陷的原因？解决方式"></a>1、盒子塌陷的原因？解决方式</h3><pre class=" language-html"><code class="language-html">原因:      1. 浮动导致的塌陷,浮动会脱落标准流     2. 嵌套的两个盒子,子盒子设置margin-top会导致父盒子一下下移解决方法:    第一种情况 1 清除浮动;  2 给父盒子加高度;  3 给父元素添加overflow:hidden    第二种情况 1 给父元素加上边框; 2 给父元素添加overflow:hidden</code></pre><h3 id="2、不定宽高的div水平垂直居中"><a href="#2、不定宽高的div水平垂直居中" class="headerlink" title="2、不定宽高的div水平垂直居中"></a>2、不定宽高的div水平垂直居中</h3><pre><code>答: 父元素添加 position: relative        div&#123;            position:absolute;            top: 50%;             left: 50%;             transform: translate(-50%, -50%);        &#125;</code></pre><h3 id="3、css写一个三角形"><a href="#3、css写一个三角形" class="headerlink" title="3、css写一个三角形"></a>3、css写一个三角形</h3><pre><code>答: div &#123;      width: 0;      height: 0;      border: 20px solid transparent;      border-width: 40px 20px 0 0;      border-right-color: #f99;    &#125;</code></pre><h3 id="4、css选择器的优先级"><a href="#4、css选择器的优先级" class="headerlink" title="4、css选择器的优先级"></a>4、css选择器的优先级</h3><pre><code>答: !important&gt;行内样式&gt;id选择器&gt;类/属性/伪类选择器&gt;伪元素/标签选择器&gt;通配符选择器*</code></pre><h3 id="5、px、em和rem的区别"><a href="#5、px、em和rem的区别" class="headerlink" title="5、px、em和rem的区别"></a>5、px、em和rem的区别</h3><pre><code>答: px是固定单位,      em是相对单位,相当于当前文字的大小,如果没有就找父元素    rem也是相对单位,相对于html的fontsize的大小</code></pre><h3 id="6、什么是重绘和重排"><a href="#6、什么是重绘和重排" class="headerlink" title="6、什么是重绘和重排"></a>6、什么是重绘和重排</h3><pre><code>答:    重排: 当DOM元素影响了元素的几何属性（例如宽和高），浏览器需要重新计算元素的几何属性，同样其它元素的几何属性也会和位置也会因此受到影响。浏览器会使渲染树中受到影响的部分失效，并重新构造渲染树。这个过程称为“重排”。    重绘: 完成重排后，浏览器会重新绘制受影响的部分到屏幕上中，该过程称为“重绘”。    当我们改变DOM的大小，增加删除都会导致重排，当给DOM元素改变颜色的时候，会导致重绘，重排一定会重绘，重绘不会重排。重排会影响性能，所以我们尽快能的减少重排的操作</code></pre><h3 id="7、flex常用的容器属性"><a href="#7、flex常用的容器属性" class="headerlink" title="7、flex常用的容器属性"></a>7、flex常用的容器属性</h3><pre><code>答:1. flex-direction: 设置容器中的主轴方向2. flex-wrap: 项目在主轴方向上是否换行显示3. justify-content: 设置容器中的项目在主轴上的对齐方式4. align-items: 单行项目在侧轴上的排列方式5. align-content: 多行项目侧轴上的对齐方式6. flex-flow: 是flex-direction和flex-wrap的合写, 默认值为row nowrap</code></pre><h3 id="8、如何设置比12px更小的字体"><a href="#8、如何设置比12px更小的字体" class="headerlink" title="8、如何设置比12px更小的字体"></a>8、如何设置比12px更小的字体</h3><pre><code>答:   p &#123;        font-size:12px;            -webkit-transform:scale(0.8);        &#125;</code></pre><h3 id="9、H5新增了那些特性"><a href="#9、H5新增了那些特性" class="headerlink" title="9、H5新增了那些特性"></a>9、H5新增了那些特性</h3><pre><code>答: 1. 语义化标签: header nav section article aside footer2. 多媒体标签: video audio3. 表单控件: number search email tel date file time  url4. 本地离线存储 localStorage 长期存储数据,改变浏览器数据不会丢失              sessionStorage 浏览器关闭数据会丢失5. 自定义属性 data-*6. 画布 Canvas7. 拖拽释放 (Drap and Drap) API ondrop8. 新的技术文本 webworker9. 地理位置 (Geolocation) API</code></pre><h3 id="10、C3新增了那些特性"><a href="#10、C3新增了那些特性" class="headerlink" title="10、C3新增了那些特性"></a>10、C3新增了那些特性</h3><pre><code>答:     1. 圆角: border-radius    2. 盒子模型: box-sizing    3. 阴影: box-shadow 盒子阴影   text-shadow 文字阴影    4. 过渡: trasition    5. 2D转换transform  translate(平移) scale(缩放) skew(斜切) rotate(旋转)  transform-origin 控制转换中心点    6. 3D转换 perspective(透视距)  transform-style(3D控件效果)    7. 渐变: linear-gradient 线性渐变  radial-gradient 径向渐变    8. 弹性布局 flex    9. 媒体查询 @media screen and () &#123;...&#125;    10. 边框图片 border-image    11. 自定义动画: @keyframes  animation    12. 颜色: 新增RGBA HSLA模式    13. 背景: background-size  background-origin  background-clip</code></pre><h3 id="11-JS的数据类型有哪些"><a href="#11-JS的数据类型有哪些" class="headerlink" title="11.JS的数据类型有哪些"></a>11.JS的数据类型有哪些</h3><pre><code>答:     简单数据类型: number string boolean undefined null    复杂数据类型: object function array</code></pre><h3 id="12-typeOf返回的数据类型"><a href="#12-typeOf返回的数据类型" class="headerlink" title="12. typeOf返回的数据类型"></a>12. typeOf返回的数据类型</h3><pre><code>答:     number string boolean undefined object function     特殊情况:         typeof null --&gt; object        typeof array --&gt; object        typeof typeof 任何类型 --&gt; string</code></pre><h3 id="13-返回false的情况有哪些"><a href="#13-返回false的情况有哪些" class="headerlink" title="13. 返回false的情况有哪些"></a>13. 返回false的情况有哪些</h3><pre><code>答: 0 &quot;&quot; null false NaN undefined 不成立的表达式</code></pre><h3 id="14-对this的理解"><a href="#14-对this的理解" class="headerlink" title="14. 对this的理解"></a>14. 对this的理解</h3><pre><code>答:     this是一个关键字,它的指向和函数的调用方式有关    1. 函数调用模式,this指向window    2. 构造函数调用模式: this指向新创建的实例对象    3. 方法调用模式,this指向调用方法的对象    4. 上下文调用模式, call和apply方法中,this指向方法内的第一个参数                    bind方法中,bind创建的新函数的this绑定为bind方法中新的函数    5. 在事件处理函数中,this指向触发事件的当前元素    6. 定时器中,this指向window    7. 箭头函数中没有this指向问题,它的this和外层作用域的this保持一致    8. 匿名函数中的this总是指向window</code></pre><h3 id="15-new操作符做了什么"><a href="#15-new操作符做了什么" class="headerlink" title="15. new操作符做了什么"></a>15. new操作符做了什么</h3><pre><code>答:     1. 创建一个新对象    2. 函数内部的this指向这个对象    3. 执行函数体    4. 自动返回这个函数</code></pre><h3 id="16-什么是深拷贝什么是浅拷贝"><a href="#16-什么是深拷贝什么是浅拷贝" class="headerlink" title="16. 什么是深拷贝什么是浅拷贝"></a>16. 什么是深拷贝什么是浅拷贝</h3><pre><code>答:    浅拷贝: 拷贝对象的一层属性,如果对象里面还有对象,拷贝的是地址,两者之间修改会有影响,适用于对象里面属性的值是简单数据类型的    深拷贝拷贝对象的多层属性,如果对象里面还有对象,会继续拷贝,使用递归去实现</code></pre><h3 id="17、如何实现深拷贝和浅拷贝"><a href="#17、如何实现深拷贝和浅拷贝" class="headerlink" title="17、如何实现深拷贝和浅拷贝"></a>17、如何实现深拷贝和浅拷贝</h3><pre><code>答:浅拷贝:    var obj = &#123;      class: &#39;UI&#39;,      age: 20,      love: &#39;eat&#39;    &#125;    function getObj(obj) &#123;      var newObj = &#123;&#125;      for (var k in obj) &#123;        newObj[k] = obj[k]      &#125;      return newObj    &#125;    var obj2 = getObj(obj)    console.log(obj2)深拷贝:         var obj = &#123;      class: &#39;前端&#39;,      age: 26,      love: &#123;      friuts : &#39;apple&#39;,      meat: &#39;beef&#39;      &#125;    &#125;        function getObj(obj) &#123;      var newObj = &#123;&#125;      for (var k in obj) &#123;        /* if (typeof obj[k] == &#39;object&#39;) &#123;          newObj[k] = getObj(obj[k])        &#125; else &#123;          newObj[k] = obj[k]        &#125; */        newObj[k] = typeof obj[k] == &#39;object&#39; ? getObj(obj[k]) : obj[k]      &#125;      return newObj    &#125;    var obj2 = getObj(obj)    console.log(obj2)</code></pre><h3 id="18、对闭包的理解？并能举出闭包的例子"><a href="#18、对闭包的理解？并能举出闭包的例子" class="headerlink" title="18、对闭包的理解？并能举出闭包的例子"></a>18、对闭包的理解？并能举出闭包的例子</h3><pre><code>答:    闭包: 函数和声明该函数的词法环境的组合(两个嵌套关系的函数,内部函数可以访问外部函数定义的变量)    闭包的优点:         1. 形成私有空间,避免全局变量的污染        2. 持久化内存,保存数据    闭包的缺点:  1. 持久化内存,导致内存泄漏    解决:         1. 尽快避免函数的嵌套,以及变量的引用        2. 执行完的变量,可以赋值null,让垃圾回收机制,进行回收释放内存(当不在引用的变量,垃圾回收机制就会回收)    例: 点击li获取当前下标        &lt;ul&gt;            &lt;li&gt;111&lt;/li&gt;            &lt;li&gt;222&lt;/li&gt;            &lt;li&gt;333&lt;/li&gt;            &lt;li&gt;444&lt;/li&gt;            &lt;li&gt;555&lt;/li&gt;        &lt;/ul&gt;        &lt;script&gt;            var lis = document.querySelectorALL(&#39;li&#39;)            for(var i = 0; i &lt; lis.length; i++) &#123;                (function (j) &#123;                    lis[j].onclick = function () &#123;                        console.log(j)                    &#125;                &#125;)(i)            &#125;        &lt;/script&gt;</code></pre><h3 id="19-什么是原型和原型链"><a href="#19-什么是原型和原型链" class="headerlink" title="19.什么是原型和原型链"></a>19.什么是原型和原型链</h3><pre><code>答:    原型: 函数都有prototype属性,这个属性的值是个对象,称之为原型    原型链: 对象都有__proto__属性,这个属性指向它的原型对象,原型对象也是对象,也有__proto__属性,指向原型对象的原型对象,这样一层一层形成的链式结构称之为原型链</code></pre><h3 id="20-call-apply和bind的区别"><a href="#20-call-apply和bind的区别" class="headerlink" title="20. call, apply和bind的区别"></a>20. call, apply和bind的区别</h3><pre><code>答:    1. call和apply方法都可以调用函数,方法的第一个参数可以修改this的指向    2. call方法可以有多个参数,除了第一个参数,其他参数作为实参传递给函数        apply方法最多有2个参数,第二个参数是个数组或伪数组,数组里面的每一项作为实参传递给函数    3. bind方法不能调用函数,它会创建一个副本函数,并且绑定新函数的this指向bind返回的新的函数</code></pre><h3 id="21-和-的区别"><a href="#21-和-的区别" class="headerlink" title="21. ==和===的区别"></a>21. ==和===的区别</h3><pre><code>答:    == 表示是相等,只比较内容    === 表示是全等,不仅比较内容,也比较类型</code></pre><h3 id="22-es6新增常用方法"><a href="#22-es6新增常用方法" class="headerlink" title="22. es6新增常用方法"></a>22. es6新增常用方法</h3><pre><code>答:    let,const    解构赋值    箭头函数    字符串模板    扩展运算符    数组方法:map  filter等等    class关键字    模块化: import--引入  exprot default--导出</code></pre><h3 id="23-怎么理解函数的防抖和节流"><a href="#23-怎么理解函数的防抖和节流" class="headerlink" title="23. 怎么理解函数的防抖和节流"></a>23. 怎么理解函数的防抖和节流</h3><pre><code>答:    1. 定义:        防抖:就是指触发事件后在n秒内函数只能执行一次,如果在n秒内又触发了事件,则会重新计算函数执行时间.             例如: 设定1000毫秒执行,当你触发事件了,它会在1000毫秒后执行,但是在还剩500好眠的时候你又触发了事件,那就回重新开始1000毫秒之后再执行        节流: 就是指连续触发事件但是在设定的一段时间内只能执行一次函数            例如: 设定1000毫秒执行,那你在1000毫秒触发在多次,也只在1000毫秒后执行一次    2. 防抖和节流的实现    &lt;body&gt;         &lt;input type=&quot;text&quot; class=&quot;ipt&quot;&gt;        &lt;script&gt;            var timerId = null            document.querySelector(&#39;.ipt&#39;).onkeyup = function () &#123;                //防抖                if(timerId !== null) &#123;                    clearTimeout(timerId)                &#125;                timerId = setTimeout(() =&gt;&#123;                    console.log(&#39;我是防抖&#39;)                &#125;,1000)            &#125;            document.querySelector(&#39;.ipt&#39;).onkeyup = function ()&#123;                // 节流                console.log(2)                if (timerId !== null)&#123;                    return                &#125;                timerId = setTimeout(() =&gt; &#123;                    console.log(&#39;我是节流&#39;)                    timerId = null                &#125;,1000)            &#125;        &lt;/script&gt;    &lt;/body&gt;</code></pre><h3 id="24-什么是事件流"><a href="#24-什么是事件流" class="headerlink" title="24.什么是事件流"></a>24.什么是事件流</h3><pre><code>答: 事件流是指事件传播的顺序,由事件捕获 =&gt; 目标事件 =&gt; 事件冒泡</code></pre><h3 id="25-如何阻止冒泡和默认行为"><a href="#25-如何阻止冒泡和默认行为" class="headerlink" title="25. 如何阻止冒泡和默认行为"></a>25. 如何阻止冒泡和默认行为</h3><pre><code>答:    阻止冒泡和捕获:  e.stopPropagation()    阻止默认行为:  e.preventDefault()  return false    注意: addEvenListener注册的事件,在高版本浏览器中,return false将没有效果,必须要用事件对象</code></pre><h3 id="26-原生注册事件的方式有哪些-区别是什么"><a href="#26-原生注册事件的方式有哪些-区别是什么" class="headerlink" title="26.  原生注册事件的方式有哪些? 区别是什么"></a>26.  原生注册事件的方式有哪些? 区别是什么</h3><pre><code>答:    注册方式:        1. on + 事件名称        2. addEventListener    区别:         1. 使用on注册事件,同一个元素只能注册一个同类型事件,否则会覆盖        2. addEventListener可以注册同一事件多次,不会被覆盖</code></pre><h3 id="27-http和https的区别"><a href="#27-http和https的区别" class="headerlink" title="27. http和https的区别"></a>27. http和https的区别</h3><pre><code>答:    1. https协议需要导CA申请证书,一般免费证书比较少,因此需要一定费用    2. http是超文本传输协议,信息是明文传输,https则是具有安全性的ssl/tls加密传输协议    3. http和https使用的是完全不同的连接方式,用的端口也不一样,前者是80,后者是443    4. http的连接很简单,是无状态的; https协议是由SSL/TLS+HTTP协议构建的可进行加密传输,身份认证的网络协议,比http协议安全</code></pre><h3 id="28-get和post的区别"><a href="#28-get和post的区别" class="headerlink" title="28. get和post的区别"></a>28. get和post的区别</h3><pre><code>答:    get:         1. 在url后面拼接参数,只能以文本的形式传递数据        2. 传递的数据量小,4KB左右        3. 安全性低,会将数据显示在地址栏        4. 速度快,通常用于安全性要求不高的请求        5. 会缓存数据    post:         1. 安全性比较高        2. 传递数据量大,请求对数据长度没有要求        3. 请求不会被缓存,也不会保留在浏览器历史记录里</code></pre><h3 id="29-项目中遇到的状态码有哪些"><a href="#29-项目中遇到的状态码有哪些" class="headerlink" title="29. 项目中遇到的状态码有哪些"></a>29. 项目中遇到的状态码有哪些</h3><pre><code>答:    200: 请求成功,2开头的异步表示请求成功    304: 请求被允许,但请求内容没有改变, 3开头的一般请求完成    400: 请求格式错误,  4开头的一般表示请求错误    404: 请求的资源(网页)不存在    500: 内部服务器错误,5开头的一般都是指服务器错误</code></pre><h3 id="30-jsonp的原理-以及优缺点"><a href="#30-jsonp的原理-以及优缺点" class="headerlink" title="30. jsonp的原理? 以及优缺点"></a>30. jsonp的原理? 以及优缺点</h3><pre><code>答:    原理: 利用script标签的src属性具有天然可跨域的特性,由服务端返回一个预先定义好的JavaScript函数的调用,并且将服务器数据以该函数参数的形式响应给浏览器    优点: 完美解决在测试或者开发中获取不同域下的数据,用户传递一个callback参数给服务端,然后服务端返回数据时会将这个callback参数作为函数名来包裹住JSON数据,这样客户端就可以随意定制自己的函数来自动处理返回数据了    缺点: jsonp只支持get请求而不支持post请求,也即是说如果想传给后台一个json格式的数据,此时问题就来了,浏览器会报一个http状态码41错误,告诉你请求格式不对</code></pre><h3 id="31-什么是同源策略-怎么解决跨域问题"><a href="#31-什么是同源策略-怎么解决跨域问题" class="headerlink" title="31. 什么是同源策略? 怎么解决跨域问题"></a>31. 什么是同源策略? 怎么解决跨域问题</h3><pre><code>答:     同源策略: 同源策略是浏览器的一种安全策略,所谓同源是指域名,协议,端口完全相同,不同源则跨域    解决跨域的方法:         1. 通过jsonp跨域        2. 跨域资源共享(CORS Access-Control-Allow-Origin:http://api.bob.com)        3. nginx代理跨域</code></pre><h3 id="32-页面通信的方式有哪些"><a href="#32-页面通信的方式有哪些" class="headerlink" title="32. 页面通信的方式有哪些"></a>32. 页面通信的方式有哪些</h3><pre><code>答:    1. 通过url拼接地址    2. H5本地存储</code></pre><h3 id="33-null和undefined的区别"><a href="#33-null和undefined的区别" class="headerlink" title="33. null和undefined的区别"></a>33. null和undefined的区别</h3><pre><code>答:    null表示空值 没有获取到. typeof null 返回&quot;object&quot;    undefined 表示未定义,声明没有值. typeof undefined 返回&quot;undefined&quot;</code></pre><h3 id="34-Json字符串和json对象怎么互相转换"><a href="#34-Json字符串和json对象怎么互相转换" class="headerlink" title="34. Json字符串和json对象怎么互相转换"></a>34. Json字符串和json对象怎么互相转换</h3><pre><code>答:    JSON对象转JSON字符串: json.stringfly(对象)    JSON字符串转JSON对象: json.parse(字符串)</code></pre><h3 id="35-怎么理解同步和异步"><a href="#35-怎么理解同步和异步" class="headerlink" title="35.  怎么理解同步和异步"></a>35.  怎么理解同步和异步</h3><pre><code>答:     1, JavaScript是单线程,单线程就意味着,所有任务需要排队,前一个任务结束,才会执行后一个任务,如果前一个任务耗时很长,后一个任务就不得不一直等着,于是就有一个概念--任务队列    2. 所有任务可以分为两种,一种是同步任务(synchronous),另一种是异步任务(asynchronous).同步任务指的是,在主线程上排队执行的任务,只有前一个任务执行完毕,才能执行后一个任务;异步任务指的是,不进入主线程.而进入&quot;队列任务&quot;(task queue)的任务,只有等主线程任务执行完毕,&quot;任务队列&quot;开始通知主线程,请求执行任务,该任务才会进入主线程执行</code></pre><h3 id="36-localStorage、sessionStorage和cookie的区别"><a href="#36-localStorage、sessionStorage和cookie的区别" class="headerlink" title="36. localStorage、sessionStorage和cookie的区别"></a>36. localStorage、sessionStorage和cookie的区别</h3><pre><code>答:     共同点: 都是保存在浏览器端,且同源的    区别:         1. 请求不同:             cookie 数据始终在同源的http请求中携带(即使不需要), 即cookie在浏览器和服务器间来回传递.            sessionStorage 和 localStorage不会自动吧数据发给服务器,仅在本地保存        2. 存储大小限制也不同            cookie 数据不能超过4k,同时因为每次http请求都会携带cookie,所以cookie只适合保存很小的数据,如会话标识.            sessionStorage和localStorage虽然也有存储大小的限制,但比cookie大得多,sessionStorage约5M, localStorage约5M        3. 数据有效期不同            sessionStorage: 仅在当前浏览器关闭前有效,自然也就不可能持久保持            localStorage: 始终有效,窗口或浏览器关闭也一直保存,因此用作持久数据            cookie: 只在设置的cookie过期时间之前一直有效,即使窗口或浏览器关闭        4. 作用域不同            sessionStorage: 不在不同的浏览器窗口中共享,即使是同一个页面            localStorage 在所有同源窗口都是共享的            cookie也是在所有同源窗口中共享的</code></pre><h3 id="37-你对webSocket了解多少"><a href="#37-你对webSocket了解多少" class="headerlink" title="37. 你对webSocket了解多少"></a>37. 你对webSocket了解多少</h3><pre><code>答:    WebSocket是HTML5一种新的协议.它实现了浏览器与服务器全双工通信,能更好的节省服务器资源和宽带并达到实时通讯,它建立在TCP纸上,同HTTP一样通过TCP来传输数据,但是它和HTTP最大不同是:    1. WebSocket是一种双向通讯协议,在建立连接后,WebSocket服务器和Browser/Client Agent都能主动的向对方发送或接收数据,就像Socket一样    2. WebSocket需要类似TCP的客户端和服务器通过握手连接成功后才能通信</code></pre><h3 id="38-js的运行机制是什么"><a href="#38-js的运行机制是什么" class="headerlink" title="38.js的运行机制是什么"></a>38.js的运行机制是什么</h3><pre><code>答:    js是单线程执行的,页面加载时,会自上而下执行主线程上的同步任务,当主线程代码执行完毕时,才开始执行在任务队列中的异步任务.具体如下:    1. 所有同步任务都在主线程上执行,形成一个执行栈    2. 主线程之外,还存在一个&quot;任务队列(eventloop队列或者消息队列)&quot;.只要异步任务有了运行结果,就在&quot;任务队列&quot;之中放置一个事件    3. 一旦&quot;执行栈&quot;中的所有同步任务执行完毕,系统就会读取&quot;任务队列&quot;,看看里面有哪些事件,哪些对应的异步任务,于是结束等待状态,进入执行栈,开始执行    4. 主线程不断重复上面的第三步</code></pre><h3 id="39-怎么理解面向对象"><a href="#39-怎么理解面向对象" class="headerlink" title="39.怎么理解面向对象"></a>39.怎么理解面向对象</h3><pre><code>答:    1. 面向对象是一种软件开发的实现和面向过程是相对应的,就是把程序看作一个对象,将属性和方法封装其中,以提高代码的灵活性,复用性,可扩展性    2. 面向对象有三大特性: 封装.继承.多态        封装: 把相关信息(无论数据或方法)存储在对象中的能力        继承: 由另一个类(或多个类)得来类的属性和方法的能力        多态: 编写能以多种方法运行的函数或方法的能力    3, js中对象是一个无序的数据集合或者也可以说是属性和方法的集合,可以动态的添加属性和方法    4. js是基于对象,但是也使用了嵌入了面向对象的思想,可以实现继承和封装,这样也可以提供代码的灵活性和复用性</code></pre><h3 id="40-如何清除浏览器的缓存"><a href="#40-如何清除浏览器的缓存" class="headerlink" title="40. 如何清除浏览器的缓存"></a>40. 如何清除浏览器的缓存</h3><pre><code>答:    当我们请求的地址相同的时候,浏览器为了提高性能,会把相同地址的数据进行缓存,如果服务端的数据发生改变,客户端也不会更新,那就需要清除缓存    解决: 在url后面加时间戳    例如: https://www.baidu.com?time=New Date()</code></pre><h3 id="41-token的作用是什么"><a href="#41-token的作用是什么" class="headerlink" title="41. token的作用是什么"></a>41. token的作用是什么</h3><pre><code>答:    token是服务端生成的&quot;令牌&quot;,来标识不同身份的    1. 防止表单重复提交    2. 判断用户是否登录</code></pre><h3 id="42-列举echarts常用的配置项-说明含义"><a href="#42-列举echarts常用的配置项-说明含义" class="headerlink" title="42. 列举echarts常用的配置项,说明含义"></a>42. 列举echarts常用的配置项,说明含义</h3><pre><code>答:    图标标题: title    图例: legend    值域: dataRange    提示框: tooltip    区域缩放控制器: dataZoom    网格: grid    类目轴: categoryAxios    值型坐标轴默认参数: valueAxios    柱形图默认参数: bar    折线图默认参数: line    散点图默认参数: scatter    饼图默认参数: pie    默认标志图形类型列表: symbolList    可计算特性配置,孤岛,提示颜色: calculable</code></pre><h3 id="43-git如何管理一个项目"><a href="#43-git如何管理一个项目" class="headerlink" title="43. git如何管理一个项目"></a>43. git如何管理一个项目</h3><pre><code>答:    1. git init 初始化git仓库(新项目才有这一步)    2. git clone 将远程仓库的项目资料下载下来    3. git checkout -b dev (dev 为本地分支名)    4. git add . 将工作区文件存在暂存区    5. git commit -m &quot;&quot; 从暂存区存到仓储区    6. git checkout master 切到master分支    7. git merge dev 合并分支,合并后要将分支删除    8. 使用git push将其上传到远程仓库    9. 第二天上班,先push一下,更新一下最新代码</code></pre><h3 id="44-介绍一下你们公司的开发流程-自己理解-形成自己的东西"><a href="#44-介绍一下你们公司的开发流程-自己理解-形成自己的东西" class="headerlink" title="44. 介绍一下你们公司的开发流程(自己理解,形成自己的东西)"></a>44. 介绍一下你们公司的开发流程(自己理解,形成自己的东西)</h3><pre><code>答:    1. 项目确定下来后    2. 先分配确定开发人员,然后产品会召集相关开发人员一起开一个项目分析会    3. 接着就项目立项了,项目立项会形成一个prd,确定开发周期    4. 然后就进入开发阶段了,在开发一段时间会进行前后端联调    5. 功能完成后会进行冒烟测试,检查是否有阻塞缺陷    6. 开发全部结束就进入测试阶段    7. 测试通过就可以上线了,上线之后会有一个回归测试,检查有没有影响以前的功能,保证全流程没有问题</code></pre><h3 id="45-在地址栏输入网址-到数据返回的过程是什么"><a href="#45-在地址栏输入网址-到数据返回的过程是什么" class="headerlink" title="45. 在地址栏输入网址.到数据返回的过程是什么"></a>45. 在地址栏输入网址.到数据返回的过程是什么</h3><pre><code>答:    1. 输入url地址后,首先进行DNS解析,将相应的域名解析成IP地址    2. 根据IP地址去寻找相应的服务器    3. 与服务器进行TCP的三次握手,建立连接    4. 客户端发送请求,找到相应的资源库    5. 客户端拿到数据,进行相应的渲染</code></pre><h3 id="46-原生ajax请求的步骤"><a href="#46-原生ajax请求的步骤" class="headerlink" title="46. 原生ajax请求的步骤"></a>46. 原生ajax请求的步骤</h3><pre><code>答:    1. 创建异步对象 var xhr = new HTMLHttpRequest()    2. 设置请求行  xhr.open()    3. 设置请求头  xhr.setRequestHeader() get请求没有请求头    4. 设置请求体  xhr.send    get请求没有请求体,参数为null    5. 监视异步对象的状态变化   xhr.onreadystatechange()&#123;&#125;</code></pre>]]></content>
      
      
      <categories>
          
          <category> 面试题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面试题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>测试</title>
      <link href="2020/11/03/ce-shi/"/>
      <url>2020/11/03/ce-shi/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> Markdown </category>
          
      </categories>
      
      
    </entry>
    
    
  
  
</search>
