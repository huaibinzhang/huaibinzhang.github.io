<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title></title>
      <link href="2020/11/04/qian-duan-mian-shi-ti-di-yi-tao-jie-xi/"/>
      <url>2020/11/04/qian-duan-mian-shi-ti-di-yi-tao-jie-xi/</url>
      
        <content type="html"><![CDATA[<h2 id="前端面试题"><a href="#前端面试题" class="headerlink" title="前端面试题"></a>前端面试题</h2><h3 id="1、盒子塌陷的原因？解决方式"><a href="#1、盒子塌陷的原因？解决方式" class="headerlink" title="1、盒子塌陷的原因？解决方式"></a>1、盒子塌陷的原因？解决方式</h3><pre class=" language-html"><code class="language-html">原因:      1. 浮动导致的塌陷,浮动会脱落标准流     2. 嵌套的两个盒子,子盒子设置margin-top会导致父盒子一下下移解决方法:    第一种情况 1 清除浮动;  2 给父盒子加高度;  3 给父元素添加overflow:hidden    第二种情况 1 给父元素加上边框; 2 给父元素添加overflow:hidden</code></pre><h3 id="2、不定宽高的div水平垂直居中"><a href="#2、不定宽高的div水平垂直居中" class="headerlink" title="2、不定宽高的div水平垂直居中"></a>2、不定宽高的div水平垂直居中</h3><pre class=" language-css"><code class="language-css">答<span class="token punctuation">:</span> 父元素添加 <span class="token property">position</span><span class="token punctuation">:</span> relative        div&amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>            <span class="token property">position</span><span class="token punctuation">:</span>absolute<span class="token punctuation">;</span>            <span class="token property">top</span><span class="token punctuation">:</span> <span class="token number">50%</span><span class="token punctuation">;</span>             <span class="token property">left</span><span class="token punctuation">:</span> <span class="token number">50%</span><span class="token punctuation">;</span>             <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">translate</span><span class="token punctuation">(</span>-<span class="token number">50%</span>, -<span class="token number">50%</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        &amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span></code></pre><h3 id="3、css写一个三角形"><a href="#3、css写一个三角形" class="headerlink" title="3、css写一个三角形"></a>3、css写一个三角形</h3><pre class=" language-css"><code class="language-css">答<span class="token punctuation">:</span> div &amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>      <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>      <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>      <span class="token property">border</span><span class="token punctuation">:</span> <span class="token number">20</span>px solid transparent<span class="token punctuation">;</span>      <span class="token property">border-width</span><span class="token punctuation">:</span> <span class="token number">40</span>px <span class="token number">20</span>px <span class="token number">0</span> <span class="token number">0</span><span class="token punctuation">;</span>      <span class="token property">border-right-color</span><span class="token punctuation">:</span> <span class="token hexcode">#f99</span><span class="token punctuation">;</span>    &amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span></code></pre><h3 id="4、css选择器的优先级"><a href="#4、css选择器的优先级" class="headerlink" title="4、css选择器的优先级"></a>4、css选择器的优先级</h3><pre><code>答: !important&gt;行内样式&gt;id选择器&gt;类/属性/伪类选择器&gt;伪元素/标签选择器&gt;通配符选择器*</code></pre><h3 id="5、px、em和rem的区别"><a href="#5、px、em和rem的区别" class="headerlink" title="5、px、em和rem的区别"></a>5、px、em和rem的区别</h3><pre><code>答: px是固定单位,      em是相对单位,相当于当前文字的大小,如果没有就找父元素    rem也是相对单位,相对于html的fontsize的大小</code></pre><h3 id="6、什么是重绘和重排"><a href="#6、什么是重绘和重排" class="headerlink" title="6、什么是重绘和重排"></a>6、什么是重绘和重排</h3><pre><code>答:    重排: 当DOM元素影响了元素的几何属性（例如宽和高），浏览器需要重新计算元素的几何属性，同样其它元素的几何属性也会和位置也会因此受到影响。浏览器会使渲染树中受到影响的部分失效，并重新构造渲染树。这个过程称为“重排”。    重绘: 完成重排后，浏览器会重新绘制受影响的部分到屏幕上中，该过程称为“重绘”。    当我们改变DOM的大小，增加删除都会导致重排，当给DOM元素改变颜色的时候，会导致重绘，重排一定会重绘，重绘不会重排。重排会影响性能，所以我们尽快能的减少重排的操作</code></pre><h3 id="7、flex常用的容器属性"><a href="#7、flex常用的容器属性" class="headerlink" title="7、flex常用的容器属性"></a>7、flex常用的容器属性</h3><pre><code>答:1. flex-direction: 设置容器中的主轴方向2. flex-wrap: 项目在主轴方向上是否换行显示3. justify-content: 设置容器中的项目在主轴上的对齐方式4. align-items: 单行项目在侧轴上的排列方式5. align-content: 多行项目侧轴上的对齐方式6. flex-flow: 是flex-direction和flex-wrap的合写, 默认值为row nowrap</code></pre><h3 id="8、如何设置比12px更小的字体"><a href="#8、如何设置比12px更小的字体" class="headerlink" title="8、如何设置比12px更小的字体"></a>8、如何设置比12px更小的字体</h3><pre><code>答:   p &#123;        font-size:12px;            -webkit-transform:scale(0.8);        &#125;</code></pre><h3 id="9、H5新增了那些特性"><a href="#9、H5新增了那些特性" class="headerlink" title="9、H5新增了那些特性"></a>9、H5新增了那些特性</h3><pre><code>答: 1. 语义化标签: header nav section article aside footer2. 多媒体标签: video audio3. 表单控件: number search email tel date file time  url4. 本地离线存储 localStorage 长期存储数据,改变浏览器数据不会丢失              sessionStorage 浏览器关闭数据会丢失5. 自定义属性 data-*6. 画布 Canvas7. 拖拽释放 (Drap and Drap) API ondrop8. 新的技术文本 webworker9. 地理位置 (Geolocation) API</code></pre><h3 id="10、C3新增了那些特性"><a href="#10、C3新增了那些特性" class="headerlink" title="10、C3新增了那些特性"></a>10、C3新增了那些特性</h3><pre class=" language-css"><code class="language-css">答<span class="token punctuation">:</span><span class="token number">1.</span> 圆角 border-radius<span class="token number">2.</span> 盒子模型 box-sizing<span class="token number">3.</span> 阴影 box-shadow 盒子阴影  text-shadow 文字阴影<span class="token number">4.</span> 过渡 transition<span class="token number">5.</span> <span class="token number">2</span>D转换transform  <span class="token function">translate</span><span class="token punctuation">(</span>平移<span class="token punctuation">)</span> <span class="token function">scale</span><span class="token punctuation">(</span>缩放<span class="token punctuation">)</span>  <span class="token function">skew</span><span class="token punctuation">(</span>斜切<span class="token punctuation">)</span> <span class="token function">rotate</span><span class="token punctuation">(</span>旋转<span class="token punctuation">)</span> transform-origin 控制转换中心点<span class="token number">6.</span> <span class="token number">3</span>D转换 <span class="token function">perspective</span><span class="token punctuation">(</span>透视距<span class="token punctuation">)</span>  <span class="token function">transform-style</span><span class="token punctuation">(</span><span class="token number">3</span>D控件效果<span class="token punctuation">)</span><span class="token number">7.</span> 渐变 linear-gradient 线性渐变 radial-gradient径向渐变<span class="token number">8.</span> 弹性布局 flex<span class="token number">9.</span> 媒体查询 <span class="token atrule"><span class="token rule">@media</span> screen and <span class="token punctuation">(</span><span class="token punctuation">)</span> &amp;#123<span class="token punctuation">;</span></span><span class="token number">...</span>&amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span><span class="token number">10.</span> 边框图片 border-image<span class="token number">11.</span> 自定义动画 @keyframes    animation<span class="token number">12.</span> 颜色 新增RGBA HSLA模式<span class="token number">13.</span> 背景 background-size   background-origin   background-clip</code></pre><h3 id="11、js的数据类型有哪些"><a href="#11、js的数据类型有哪些" class="headerlink" title="11、js的数据类型有哪些"></a>11、js的数据类型有哪些</h3><pre class=" language-js"><code class="language-js">答<span class="token punctuation">:</span> 简单数据类型<span class="token punctuation">:</span> number string boolean undefined   <span class="token keyword">null</span>    复杂数据类型<span class="token punctuation">:</span> object  <span class="token keyword">function</span>  array</code></pre><h3 id="12、typeof返回的数据类型"><a href="#12、typeof返回的数据类型" class="headerlink" title="12、typeof返回的数据类型"></a>12、typeof返回的数据类型</h3><pre><code>答: number string boolean undefined  object  function    特殊情况：   typeof null --&gt;object   typeof array --&gt;object   typeof typeof 任何类型  --&gt;string</code></pre><h3 id="13、返回false的情况有哪些"><a href="#13、返回false的情况有哪些" class="headerlink" title="13、返回false的情况有哪些"></a>13、返回false的情况有哪些</h3><pre><code>答: 0  &quot;&quot;   null  false  NaN  undefined  不成立的表达式</code></pre><h3 id="14、对this的理解"><a href="#14、对this的理解" class="headerlink" title="14、对this的理解"></a>14、对this的理解</h3><pre><code>答: this是个关键字,它的指向和函数的调用方式有关1. 函数调用模式, this指向window2. 构造函数调用模式, this指向新创建的实例对象3. 方法调用模式, this指向调用方法的对象4. 上下文调用模式, call和apply方法中, this指向方法内的第一个参数                  bind方法中, bind创建的新函数的this绑定为bind方法中新的函数5. 在事件处理函数中,this指向触发事件的当前元素6. 定时器中,this指向window7. 箭头函数中没有this指向问题,它的this和外层作用域的this保持一致8. 匿名函数中的this总是指向window</code></pre><h3 id="15、new操作符做了什么"><a href="#15、new操作符做了什么" class="headerlink" title="15、new操作符做了什么"></a>15、new操作符做了什么</h3><pre><code>答:  1. 创建一个新对象    2. 函数内部的this指向这个对象    3. 执行函数体    4. 自动返回这个函数</code></pre><h3 id="16、什么是深拷贝什么是浅拷贝"><a href="#16、什么是深拷贝什么是浅拷贝" class="headerlink" title="16、什么是深拷贝什么是浅拷贝"></a>16、什么是深拷贝什么是浅拷贝</h3><pre><code>答: 浅拷贝: 拷贝对象的一层属性,如果对象里面还有对象,拷贝的是地址, 两者之间修改会有影响,适用于对象里面属性的值是简单数据类型的.    深拷贝: 拷贝对象的多层属性,如果对象里面还有对象,会继续拷贝,使用递归去实现.</code></pre><h3 id="17、如何实现深拷贝和浅拷贝"><a href="#17、如何实现深拷贝和浅拷贝" class="headerlink" title="17、如何实现深拷贝和浅拷贝"></a>17、如何实现深拷贝和浅拷贝</h3><pre class=" language-js"><code class="language-js">答<span class="token punctuation">:</span>浅拷贝<span class="token punctuation">:</span>    <span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      <span class="token keyword">class</span><span class="token punctuation">:</span> <span class="token string">'UI'</span><span class="token punctuation">,</span>      age<span class="token punctuation">:</span> <span class="token number">20</span><span class="token punctuation">,</span>      love<span class="token punctuation">:</span> <span class="token string">'eat'</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">function</span> <span class="token function">getObj</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      <span class="token keyword">var</span> newObj <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> k <span class="token keyword">in</span> obj<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        newObj<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> obj<span class="token punctuation">[</span>k<span class="token punctuation">]</span>      <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> newObj    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> obj2 <span class="token operator">=</span> <span class="token function">getObj</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj2<span class="token punctuation">)</span>深拷贝<span class="token punctuation">:</span>         <span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      <span class="token keyword">class</span><span class="token punctuation">:</span> <span class="token string">'前端'</span><span class="token punctuation">,</span>      age<span class="token punctuation">:</span> <span class="token number">26</span><span class="token punctuation">,</span>      love<span class="token punctuation">:</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      friuts <span class="token punctuation">:</span> <span class="token string">'apple'</span><span class="token punctuation">,</span>      meat<span class="token punctuation">:</span> <span class="token string">'beef'</span>      <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">function</span> <span class="token function">getObj</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      <span class="token keyword">var</span> newObj <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> k <span class="token keyword">in</span> obj<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/* if (typeof obj[k] == 'object') &amp;#123;          newObj[k] = getObj(obj[k])        &amp;#125; else &amp;#123;          newObj[k] = obj[k]        &amp;#125; */</span>        newObj<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">typeof</span> obj<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'object'</span> <span class="token operator">?</span> <span class="token function">getObj</span><span class="token punctuation">(</span>obj<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">:</span> obj<span class="token punctuation">[</span>k<span class="token punctuation">]</span>      <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> newObj    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> obj2 <span class="token operator">=</span> <span class="token function">getObj</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj2<span class="token punctuation">)</span></code></pre><h3 id="18、对闭包的理解？并能举出闭包的例子"><a href="#18、对闭包的理解？并能举出闭包的例子" class="headerlink" title="18、对闭包的理解？并能举出闭包的例子"></a>18、对闭包的理解？并能举出闭包的例子</h3><pre class=" language-html"><code class="language-html">答: 闭包 函数和声明该函数的词法环境的组合(两个嵌套关系的函数,内部函数可以访问外部函数定义的变量)    闭包的优点：1、形成私有空间，避免全局变量的污染               2、持久化内存，保存数据    闭包的缺点：1、持久化内存，导致内存泄露    解决：1、尽快避免函数的嵌套，以及变量的引用          2、执行完的变量，可以赋值null，让垃圾回收机制，进行回收释放内存（当不在引用的变量，垃圾回收机制就会回收）例: 点击li获取当前下标    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>111<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>222<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>333<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>444<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>555<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span>      var lis = document.querySelectorAll('li')      for (var i = 0; i &lt; lis.length; i++) <span class="token entity" title="&#123;">&amp;#123;</span>        (function (j) <span class="token entity" title="&#123;">&amp;#123;</span>          lis[j].onclick = function () <span class="token entity" title="&#123;">&amp;#123;</span>            console.log(j)          <span class="token entity" title="&#125;">&amp;#125;</span>        <span class="token entity" title="&#125;">&amp;#125;</span>)(i)      <span class="token entity" title="&#125;">&amp;#125;</span></code></pre><h3 id="19、什么是原型和原型链"><a href="#19、什么是原型和原型链" class="headerlink" title="19、什么是原型和原型链"></a>19、什么是原型和原型链</h3><pre><code>答: 原型: 函数都有prototype属性,这个属性的值是个对象,称之为原型   原型链: 对象都有__proto__属性,这个属性指向它的原型对象,原型对象也是对象,也有__proto__属性,指向原型对象的原型对象,这样一层一层形成的链式结构称为原型链.</code></pre><h3 id="20、call、apply和bind的区别"><a href="#20、call、apply和bind的区别" class="headerlink" title="20、call、apply和bind的区别"></a>20、call、apply和bind的区别</h3><pre class=" language-js"><code class="language-js">答<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">.</span> call和apply方法都可以调用函数<span class="token punctuation">,</span>方法内的第一个参数可以修改<span class="token keyword">this</span>的指向    <span class="token number">2</span><span class="token punctuation">.</span> call方法可以有多个参数<span class="token punctuation">,</span>除了第一个参数<span class="token punctuation">,</span>其他参数作为实参传递给函数             apply方法最多有<span class="token number">2</span>个参数<span class="token punctuation">,</span>第二个参数是个数组或伪数组<span class="token punctuation">,</span>数组里面的每一项作为实参传递给函数    <span class="token number">3</span><span class="token punctuation">.</span> bind方法不能调用函数<span class="token punctuation">,</span>它会创建一个副本函数<span class="token punctuation">,</span>并且绑定新函数的<span class="token keyword">this</span>指向bind返回的新的函数</code></pre><h3 id="21、-和-的区别"><a href="#21、-和-的区别" class="headerlink" title="21、==和===的区别"></a>21、==和===的区别</h3><pre class=" language-js"><code class="language-js">答：<span class="token operator">==</span> 表示是相等，只比较内容   <span class="token operator">===</span> 表示是全等，不仅比较内容，也比较类型</code></pre><h3 id="22、es6新增常用方法"><a href="#22、es6新增常用方法" class="headerlink" title="22、es6新增常用方法"></a>22、es6新增常用方法</h3><pre class=" language-js"><code class="language-js">答<span class="token punctuation">:</span> <span class="token keyword">let</span>、<span class="token keyword">const</span>解构赋值 箭头函数字符串模板扩展运算符数组方法：map、filter等等<span class="token keyword">class</span>关键字模块化：<span class="token keyword">import</span><span class="token operator">--</span>引入、exprot <span class="token keyword">default</span><span class="token operator">--</span>导出</code></pre><h3 id="23、怎么理解函数的防抖和节流"><a href="#23、怎么理解函数的防抖和节流" class="headerlink" title="23、怎么理解函数的防抖和节流"></a>23、怎么理解函数的防抖和节流</h3><pre class=" language-html"><code class="language-html">答:1、定义：防抖: 就是指触发事件后在n秒内函数只能执行一次，如果在n秒内又触发了事件，则会重新计算函数执行时间。     例如：设定1000毫秒执行，当你触发事件了，他会1000毫秒后执行，但是在还剩500毫秒的时候你又触发了事件，那就会重新开始1000毫秒之后再执行节流: 就是指连续触发事件但是在设定的一段时间内中只执行一次函数。     例如：设定1000毫秒执行，那你在1000毫秒触发在多次，也只在1000毫秒后执行一次2、防抖和节流的实现：    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ipt<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">      <span class="token keyword">var</span> timerId <span class="token operator">=</span> <span class="token keyword">null</span>      document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'.ipt'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>onkeyup <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 防抖</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>timerId <span class="token operator">!==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>          <span class="token function">clearTimeout</span><span class="token punctuation">(</span>timerId<span class="token punctuation">)</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        timerId <span class="token operator">=</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>          console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'我是防抖'</span><span class="token punctuation">)</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span>      <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>      document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'.ipt'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>onkeyup <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 节流</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>timerId <span class="token operator">!==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>          <span class="token keyword">return</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        timerId <span class="token operator">=</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>          console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'我是节流'</span><span class="token punctuation">)</span>          timerId <span class="token operator">=</span> <span class="token keyword">null</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span>      <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span></code></pre><h3 id="24、什么是事件流"><a href="#24、什么是事件流" class="headerlink" title="24、什么是事件流"></a>24、什么是事件流</h3><pre><code>答: 事件流是指事件传播的顺序,由事件捕获 =&gt; 目标事件 =&gt; 事件冒泡</code></pre><h3 id="25、如何阻止冒泡和默认行为"><a href="#25、如何阻止冒泡和默认行为" class="headerlink" title="25、如何阻止冒泡和默认行为"></a>25、如何阻止冒泡和默认行为</h3><pre class=" language-js"><code class="language-js">答<span class="token punctuation">:</span> 阻止冒泡和捕获  e<span class="token punctuation">.</span><span class="token function">stopPropagation</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    阻止默认行为   e<span class="token punctuation">.</span><span class="token function">preventDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span>   <span class="token keyword">return</span> <span class="token boolean">false</span>    注意：addEventListener注册的事件，在高浏览器版本中，<span class="token keyword">return</span> <span class="token boolean">false</span>将没有效果，必须要用事件对象</code></pre><h3 id="26、原生注册事件的方式有哪些？区别是什么"><a href="#26、原生注册事件的方式有哪些？区别是什么" class="headerlink" title="26、原生注册事件的方式有哪些？区别是什么"></a>26、原生注册事件的方式有哪些？区别是什么</h3><pre class=" language-js"><code class="language-js">答<span class="token punctuation">:</span> 注册方式          <span class="token number">1</span><span class="token punctuation">.</span> on <span class="token operator">+</span> 事件名称          <span class="token number">2</span><span class="token punctuation">.</span> addEventListener        区别<span class="token punctuation">:</span>             <span class="token number">1</span><span class="token punctuation">.</span> 使用on注册事件<span class="token punctuation">,</span>同一个元素只能注册一个同类型事件<span class="token punctuation">,</span>否则会覆盖。            <span class="token number">2</span><span class="token punctuation">.</span> addEventListener可以注册同一事件多次<span class="token punctuation">,</span>不会被覆盖。</code></pre><h3 id="27、http和https的区别"><a href="#27、http和https的区别" class="headerlink" title="27、http和https的区别"></a>27、http和https的区别</h3><pre><code>答:  1.https协议需要到CA申请证书，一般免费证书较少，因而需要一定费用。  2.http是超文本传输协议，信息是明文传输，https则是具有安全性的ssl/tls加密传输协议。  3.http和https使用的是完全不同的连接方式，用的端口也不一样，前者是80，后者是443。  4.http的连接很简单，是无状态的；HTTPS协议是由SSL/TLS+HTTP协议构建的可进行加密传输、身份认证的网络协议，比http协议安全。</code></pre><h3 id="28、get-和post的区别"><a href="#28、get-和post的区别" class="headerlink" title="28、get 和post的区别"></a>28、get 和post的区别</h3><pre><code>答: get            1. 在url后面拼接参数,只能以文本的形式传递数据            2. 传递的数据量小,4KB左右            3. 安全性低, 会将数据显示在地址栏            4. 速度快,通常用于安全性要求不高的请求            5. 会缓存数据    post            1. 安全性比较高            2. 传递数据量大,请求对数据长度没有要求            3. 请求不会被缓存,也不会保留在浏览器历史记录里</code></pre><h3 id="29、项目中遇到的状态码有哪些"><a href="#29、项目中遇到的状态码有哪些" class="headerlink" title="29、项目中遇到的状态码有哪些"></a>29、项目中遇到的状态码有哪些</h3><pre><code>答: 200  请求成功,  2开头的异步表示请求成功        304  请求被允许,但请求内容没有改变, 3开头的一般请求完成        400  请求格式错误,  4开头的一般表示请求错误        404  请求的资源(网页)不存在,          500  内部服务器错误,  5开头的一般都是指服务器错误</code></pre><h3 id="30、jsonp的原理？以及优缺点"><a href="#30、jsonp的原理？以及优缺点" class="headerlink" title="30、jsonp的原理？以及优缺点"></a>30、jsonp的原理？以及优缺点</h3><pre><code>答: 原理: 利用script标签的src属性具有天然可跨域的特性，由服务端返回一个预先定义好的Javascript函数的调用，并且将服务器数据以该函数参数的形式响应给浏览器.        优点: 完美解决在测试或者开发中获取不同域下的数据,用户传递一个callback参数给服务端，然后服务端返回数据时会将这个callback参数作为函数名来包裹住JSON数据，这样客户端就可以随意定制自己的函数来自动处理返回数据了。        缺点：Jsonp只支持get请求而不支持post 请求,也即是说如果想传给后台一个json 格式的数据,此时问题就来了, 浏览器会报一个http状态码41错误,告诉你请求格式不正确.</code></pre><h3 id="31、什么是同源策略？怎么解决跨域问题"><a href="#31、什么是同源策略？怎么解决跨域问题" class="headerlink" title="31、什么是同源策略？怎么解决跨域问题"></a>31、什么是同源策略？怎么解决跨域问题</h3><pre><code>答: 同源策略: 同源策略是浏览器的一种安全策略, 所谓同源是指域名、协议、端口完全相同，不同源则跨域。   解决跨域的方法:             1. 通过jsonp跨域            2. 跨域资源共享（CORS  Access-Control-Allow-Origin: http://api.bob.com）            3. nginx代理跨域</code></pre><h3 id="32、页面通信的方式有哪些"><a href="#32、页面通信的方式有哪些" class="headerlink" title="32、页面通信的方式有哪些"></a>32、页面通信的方式有哪些</h3><pre><code>答: 1. 通过url拼接地址    2. H5本地存储</code></pre><h3 id="33、null和undefined的区别"><a href="#33、null和undefined的区别" class="headerlink" title="33、null和undefined的区别"></a>33、null和undefined的区别</h3><pre class=" language-js"><code class="language-js">答：<span class="token keyword">null</span> 表示空值 没有获取到。<span class="token keyword">typeof</span> <span class="token keyword">null</span> 返回<span class="token string">"object"</span>   undefined 表示未定义，声明没有值。<span class="token keyword">typeof</span> undefined 返回<span class="token string">"undefined"</span></code></pre><h3 id="34、Json字符串和json对象怎么相互转换"><a href="#34、Json字符串和json对象怎么相互转换" class="headerlink" title="34、Json字符串和json对象怎么相互转换"></a>34、Json字符串和json对象怎么相互转换</h3><pre><code>答: JSON对象转JSON字符串: json.stringify(对象)    JSON字符串转JSON对象: json.parse(字符串)</code></pre><h3 id="35、怎么理解同步和异步"><a href="#35、怎么理解同步和异步" class="headerlink" title="35、怎么理解同步和异步"></a>35、怎么理解同步和异步</h3><pre class=" language-js"><code class="language-js"><span class="token number">1</span>、javascript是单线程。单线程就意味着，所有任务需要排队，前一个任务结束，才会执行后一个任务。如果前一个任务耗时很长，后一个任务就不得不一直等着。于是就有一个概念——任务队列。<span class="token number">2</span>、所有任务可以分成两种，一种是同步任务（synchronous），另一种是异步任务（asynchronous）。同步任务指的是，在主线程上排队执行的任务，只有前一个任务执行完毕，才能执行后一个任务；异步任务指的是，不进入主线程、而进入<span class="token string">"任务队列"</span>（task queue）的任务，只有等主线程任务执行完毕，<span class="token string">"任务队列"</span>开始通知主线程，请求执行任务，该任务才会进入主线程执行。</code></pre><h3 id="36、localStorage、sessionStorage和cookie的区别"><a href="#36、localStorage、sessionStorage和cookie的区别" class="headerlink" title="36、localStorage、sessionStorage和cookie的区别"></a>36、localStorage、sessionStorage和cookie的区别</h3><pre><code>答: 共同点: 都是保存在浏览器端，且同源的。    区别:     1. 请求不同:         cookie 数据始终在同源的http请求中携带（即使不需要），即cookie在浏览器和服务器间来回传递。                sessionStorage 和 localStorage不会自动把数据发给服务器，仅在本地保存。    2. 存储大小限制也不同:         cookie 数据不能超过4k，同时因为每次http请求都会携带cookie，所以cookie只适合保存很小的数据，如会话标识。        sessionStorage 和 localStorage虽然也有存储大小的限制，但比cookie大得多，sessionStorage约5M、localStorage约5M 。    3. 数据有效期不同:          sessionStorage：仅在当前浏览器窗口关闭前有效，自然也就不可能持久保持；          localStorage：始终有效，窗口或浏览器关闭也一直保存，因此用作持久数据；         cookie只在设置的cookie过期时间之前一直有效，即使窗口或浏览器关闭。     4. 作用域不同:        sessionStorage不在不同的浏览器窗口中共享，即使是同一个页面；        localStorage在所有同源窗口中都是共享的；        cookie也是在所有同源窗口中都是共享的。</code></pre><h3 id="37、你对WebSocket了解哪些"><a href="#37、你对WebSocket了解哪些" class="headerlink" title="37、你对WebSocket了解哪些"></a>37、你对WebSocket了解哪些</h3><pre><code>答: WebSocket 是HTML5一种新的协议。它实现了浏览器与服务器全双工通信，能更好的节省服务器资源和带宽并达到实时通讯，它建立在TCP之上，同HTTP一样通过TCP来传输数据，但是它和HTTP最大不同是：    1. WebSocket是一种双向通信协议，在建立连接后，WebSocket服务器和Browser/Client Agent都能主动的向对方发送或接收数据，就像Socket一样；    2. WebSocket需要类似TCP的客户端和服务器端通过握手连接连接成功后才能相互通信。</code></pre><h3 id="38、js的运行机制是什么"><a href="#38、js的运行机制是什么" class="headerlink" title="38、js的运行机制是什么"></a>38、js的运行机制是什么</h3><pre class=" language-js"><code class="language-js">答：js是单线程执行的，页面加载时，会自上而下执行主线程上的同步任务，当主线程代码执行完毕时，才开始执行在任务队列中的异步任务。具体如下      <span class="token number">1</span><span class="token punctuation">.</span>所有同步任务都在主线程上执行，形成一个执行栈。    <span class="token number">2</span><span class="token punctuation">.</span>主线程之外，还存在一个<span class="token string">"任务队列(eventloop队列或者消息队列)"</span>。只要异步任务有了运行结果，就在<span class="token string">"任务队列"</span>之中放置一个事件。    <span class="token number">3</span><span class="token punctuation">.</span>一旦<span class="token string">"执行栈"</span>中的所有同步任务执行完毕，系统就会读取<span class="token string">"任务队列"</span>，看看里面有哪些事件。哪些对应的异步任务，于是结束等待状态，进入执行栈，开始执行。    <span class="token number">4</span><span class="token punctuation">.</span>主线程不断重复上面的第三步。</code></pre><h3 id="39、怎么理解面向对象"><a href="#39、怎么理解面向对象" class="headerlink" title="39、怎么理解面向对象"></a>39、怎么理解面向对象</h3><pre class=" language-js"><code class="language-js">答：<span class="token number">1</span>、面向对象是一种软件开发的思想和面向过程是相对应的，就是把程序看作一个对象，将属性和方法封装其中，以提高代码的灵活性、复用性、可扩展性。  <span class="token number">2</span>、面向对象有三大特性：封装、继承、多态。       封装：把相关的信息（无论数据或方法）存储在对象中的能力       继承：由另一个类（或多个类）得来类的属性和方法的能力       多态：编写能以多种方法运行的函数或方法的能力   <span class="token number">3</span>、js中对象是一个无序的数据集合或者也可以说是属性和方法的集合，可以动态的添加属性可方法。   <span class="token number">4</span>、js是基于对象，但是也使用了嵌入了面向对象的思想，可以实现继承和封装，这样也可以提供代码的灵活性和复用性。</code></pre><h3 id="40、如何清除浏览器的缓存"><a href="#40、如何清除浏览器的缓存" class="headerlink" title="40、如何清除浏览器的缓存"></a>40、如何清除浏览器的缓存</h3><pre><code>答: 当我们请求的地址相同的时候，浏览器为了提高性能，会把相同地址的数据进行缓存。如果服务端的数据发生改变，客户端也不会更新，那就需要清除缓存    解决：在url后面加时间戳    例如：https://www.baidu.com?time=New Date()</code></pre><h3 id="41、token的作用是什么"><a href="#41、token的作用是什么" class="headerlink" title="41、token的作用是什么"></a>41、token的作用是什么</h3><pre><code>答: token是服务端生成的“令牌”，来标识不同身份的    1. 防止表单重复提交    2.判断用户是否登录</code></pre><h3 id="42、列举echarts常用的配置项，说明含义"><a href="#42、列举echarts常用的配置项，说明含义" class="headerlink" title="42、列举echarts常用的配置项，说明含义"></a>42、列举echarts常用的配置项，说明含义</h3><pre><code>答:      图表标题 title        图例  legend        值域 dataRange        提示框 tooltip        区域缩放控制器 dataZoom        网格 grid        类目轴 categoryAxis        值型坐标轴默认参数 valueAxis        柱形图默认参数 bar        折线图默认参数 line        散点图默认参数 scatter        饼图默认参数 pie        默认标志图形类型列表 symbolList        可计算特性配置, 孤岛, 提示颜色 calculable</code></pre><h3 id="43、git如何管理一个项目"><a href="#43、git如何管理一个项目" class="headerlink" title="43、git如何管理一个项目"></a>43、git如何管理一个项目</h3><pre><code>答: 1、git init初始化git仓库（新项目才有这一步）    2、git clone将远程仓库的项目资料下载下来    3、git checkout -b dev (dev 为本地分支名）    4、git add .将工作区文件存在暂存区    4、git commit -m  &quot;&quot;从暂存区存到仓储区    5、git checkout master切到master分支    6、git merge dev 合并分支,合并后要将分支删除    7、使用git push将其上传到远程仓库    8、第二上班，先pull一下，更新最新代码</code></pre><h3 id="44、介绍一下你们公司的开发流程（自己理解，形成自己的东西）"><a href="#44、介绍一下你们公司的开发流程（自己理解，形成自己的东西）" class="headerlink" title="44、介绍一下你们公司的开发流程（自己理解，形成自己的东西）"></a>44、介绍一下你们公司的开发流程（自己理解，形成自己的东西）</h3><pre><code>答: （这是最基础的流程，自己理解，形成自己的东西）    1、项目确定下来后    2、先分配确定开发人员,然后产品会召集相关开发人员一起开一个项目分析会    3、接着就项目立项了,项目立项会形成一个prd,确定开发周期    4、然后就进入开发阶段了,在开发一段时间会进行前后端联调    5、功能完成后会先进行冒烟测试,检查是否有阻塞缺陷    6、开发全部结束就进入测试阶段    7、测试通过就可以上线了,上线之后会有一个回归测试，检查有没有影响以前的功能，保证全流程没有问题</code></pre><h3 id="45、在地址栏输入网址，到数据返回的过程是什么？"><a href="#45、在地址栏输入网址，到数据返回的过程是什么？" class="headerlink" title="45、在地址栏输入网址，到数据返回的过程是什么？"></a>45、在地址栏输入网址，到数据返回的过程是什么？</h3><pre class=" language-js"><code class="language-js">答<span class="token punctuation">:</span>  <span class="token number">1</span><span class="token punctuation">.</span> 输入url地址后，首先进行DNS解析，将相应的域名解析为IP地址。     <span class="token number">2</span><span class="token punctuation">.</span> 根据IP地址去寻找相应的服务器。     <span class="token number">3</span><span class="token punctuation">.</span> 与服务器进行TCP的三次握手，建立连接。     <span class="token number">4</span><span class="token punctuation">.</span> 客户端发送请求，找到相应的资源库。     <span class="token number">5</span><span class="token punctuation">.</span> 客户端拿到数据，进行相应的渲染。</code></pre><h3 id="46、原生-ajax-请求的步骤"><a href="#46、原生-ajax-请求的步骤" class="headerlink" title="46、原生 ajax 请求的步骤"></a>46、原生 ajax 请求的步骤</h3><pre class=" language-js"><code class="language-js">答：<span class="token number">1</span><span class="token punctuation">.</span>创建异步对象 <span class="token keyword">var</span> xhr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HTMLHttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token number">2</span><span class="token punctuation">.</span>设置请求行  xhr<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token number">3</span><span class="token punctuation">.</span>设置请求头  xhr<span class="token punctuation">.</span><span class="token function">setRequestHeader</span><span class="token punctuation">(</span><span class="token punctuation">)</span>   <span class="token keyword">get</span>请求没有请求头    <span class="token number">4</span><span class="token punctuation">.</span>设置请求体  xhr<span class="token punctuation">.</span>send      <span class="token keyword">get</span>请求没有请求体<span class="token punctuation">,</span>参数为<span class="token keyword">null</span>    <span class="token number">5</span><span class="token punctuation">.</span>监视异步对象的状态变化   xhr<span class="token punctuation">.</span><span class="token function">onreadystatechange</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="2020/11/04/hello-world/"/>
      <url>2020/11/04/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class=" language-bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class=" language-bash"><code class="language-bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class=" language-bash"><code class="language-bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class=" language-bash"><code class="language-bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
